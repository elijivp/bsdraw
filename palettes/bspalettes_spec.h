#ifndef PALETTES_SPEC_H
#define PALETTES_SPEC_H

/// Non-standard palettes
/// Created By: Elijah Vlasov

#include "special/spec_BlGnYe.h"
#include "special/spec_BlYeRd.h"
#include "special/spec_GnYe.h"


///////////////////////////////////////// WhiteRed  /////////////////////////////////////////////////////////////

const unsigned int colors_rgb_WR_02[] = { 
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,
  0x00fdfdfe,0x00fdfdfe,0x00fdfdfe,0x00fdfdfe,0x00fcfcfe,0x00fcfcfe,0x00fbfbfd,0x00fbfbfd,0x00fbfbfd,0x00fafafd,0x00fafafd,0x00f9f9fc,0x00f9f9fc,0x00f8f8fc,0x00f7f7fc,0x00f7f7fc,0x00f6f6fb,0x00f5f5fb,0x00f5f5fb,0x00f4f4fb,0x00f3f3fa,0x00f2f2fa,0x00f2f2fa,0x00f1f1f9,0x00f0f0f9,0x00efeff9,0x00eeeef8,0x00ededf8,0x00ececf8,0x00ebebf7,0x00eaeaf7,0x00e9e9f6,0x00e8e8f6,0x00e7e7f6,0x00e6e6f5,0x00e5e5f5,0x00e3e3f4,0x00e2e2f4,0x00e1e1f3,0x00e0e0f3,0x00dedef2,0x00ddddf2,0x00dcdcf1,
  0x00dadaf1,0x00d9d9f0,0x00d7d7f0,0x00d6d6ef,0x00d5d5ef,0x00d3d3ee,0x00d1d1ee,0x00d0d0ed,0x00ceceec,0x00cdcdec,0x00cbcbeb,0x00c9c9ea,0x00c8c8ea,0x00c6c6e9,0x00c4c4e9,0x00c2c2e8,0x00c1c1e7,0x00bfbfe7,0x00bdbde6,0x00bbbbe5,0x00b9b9e4,0x00b7b7e4,0x00b5b5e3,0x00b3b3e2,0x00b1b1e1,0x00afafe1,0x00adade0,0x00ababdf,0x00a9a9de,0x00a7a7dd,0x00a4a4dd,0x00a2a2dc,0x00a0a0db,0x009e9eda,0x009b9bd9,0x009999d8,0x009797d7,0x009494d7,0x009292d6,0x009090d5,0x008d8dd4,0x008b8bd3,0x008888d2,
  0x008686d1,0x008383d0,0x008181cf,0x007e7ece,0x007b7bcd,0x007979cc,0x007676cb,0x007373ca,0x007070c9,0x006e6ec8,0x006b6bc7,0x006868c6,0x006565c5,0x006262c4,0x005f5fc3,0x005c5cc2,0x005a5ac0,0x005757bf,0x005454be,0x005050bd,0x004d4dbc,0x004a4abb,0x004747b9,0x004444b8,0x004141b7,0x003e3eb6,0x003a3ab5,0x003737b3,0x003434b2,0x003131b1,0x002d2db0,0x002a2aae,0x002727ad,0x002323ac,0x002020ab,0x001c1ca9,0x001919a8,0x001515a7,0x001212a5,0x000e0ea4,0x000a0aa3,0x000707a1,0x000303a0
  };
const PaletteConstFWD<sizeof(colors_rgb_WR_02) / sizeof(unsigned int)>   paletteWR_02(colors_rgb_WR_02);
const PaletteConstBWD<sizeof(colors_rgb_WR_02) / sizeof(unsigned int)>   paletteWR_02_inv(colors_rgb_WR_02);

const unsigned int colors_rgb_WR_03[] = { 
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fdfdfe,0x00fdfdfe,0x00fdfdfe,0x00fcfcfe,0x00fcfcfe,0x00fcfcfd,0x00fbfbfd,0x00fbfbfd,0x00fafafd,0x00f9f9fd,0x00f9f9fc,0x00f8f8fc,0x00f8f8fc,0x00f7f7fc,0x00f6f6fb,0x00f5f5fb,0x00f4f4fb,0x00f4f4fa,0x00f3f3fa,0x00f2f2fa,0x00f1f1f9,0x00f0f0f9,0x00efeff9,0x00eeeef8,0x00ededf8,0x00ececf7,0x00eaeaf7,
  0x00e9e9f6,0x00e8e8f6,0x00e7e7f6,0x00e5e5f5,0x00e4e4f5,0x00e3e3f4,0x00e1e1f3,0x00e0e0f3,0x00dedef2,0x00ddddf2,0x00dbdbf1,0x00dadaf1,0x00d8d8f0,0x00d6d6ef,0x00d5d5ef,0x00d3d3ee,0x00d1d1ed,0x00cfcfed,0x00ceceec,0x00cccceb,0x00cacaeb,0x00c8c8ea,0x00c6c6e9,0x00c4c4e8,0x00c2c2e8,0x00c0c0e7,0x00bebee6,0x00bcbce5,0x00b9b9e4,0x00b7b7e4,0x00b5b5e3,0x00b3b3e2,0x00b0b0e1,0x00aeaee0,0x00acacdf,0x00a9a9de,0x00a7a7dd,0x00a4a4dd,0x00a2a2dc,0x009f9fdb,0x009d9dda,0x009a9ad9,0x009797d8,
  0x009595d7,0x009292d6,0x008f8fd5,0x008c8cd3,0x008989d2,0x008787d1,0x008484d0,0x008181cf,0x007e7ece,0x007b7bcd,0x007878cc,0x007575cb,0x007171c9,0x006e6ec8,0x006b6bc7,0x006868c6,0x006565c5,0x006161c3,0x005e5ec2,0x005b5bc1,0x005757c0,0x005454be,0x005050bd,0x004d4dbc,0x004949ba,0x004646b9,0x004242b8,0x003e3eb6,0x003b3bb5,0x003737b3,0x003333b2,0x003030b1,0x002c2caf,0x002828ae,0x002424ac,0x002020ab,0x001c1ca9,0x001818a8,0x001414a6,0x001010a5,0x000c0ca3,0x000808a2,0x000404a0
  };
const PaletteConstFWD<sizeof(colors_rgb_WR_03) / sizeof(unsigned int)>   paletteWR_03(colors_rgb_WR_03);
const PaletteConstBWD<sizeof(colors_rgb_WR_03) / sizeof(unsigned int)>   paletteWR_03_inv(colors_rgb_WR_03);


const unsigned int colors_rgb_WR_04[] = { 
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fdfdfe,0x00fdfdfe,0x00fdfdfe,0x00fcfcfe,0x00fcfcfd,0x00fbfbfd,0x00fbfbfd,0x00fafafd,0x00f9f9fd,0x00f8f8fc,0x00f8f8fc,
  0x00f7f7fc,0x00f6f6fb,0x00f5f5fb,0x00f4f4fb,0x00f3f3fa,0x00f2f2fa,0x00f1f1f9,0x00f0f0f9,0x00efeff9,0x00ededf8,0x00ececf8,0x00ebebf7,0x00e9e9f7,0x00e8e8f6,0x00e6e6f5,0x00e5e5f5,0x00e3e3f4,0x00e2e2f4,0x00e0e0f3,0x00dedef2,0x00dcdcf2,0x00dbdbf1,0x00d9d9f0,0x00d7d7f0,0x00d5d5ef,0x00d3d3ee,0x00d1d1ed,0x00cfcfed,0x00cdcdec,0x00cacaeb,0x00c8c8ea,0x00c6c6e9,0x00c4c4e8,0x00c1c1e7,0x00bfbfe7,0x00bcbce6,0x00babae5,0x00b7b7e4,0x00b5b5e3,0x00b2b2e2,0x00afafe1,0x00acace0,0x00aaaadf,
  0x00a7a7dd,0x00a4a4dc,0x00a1a1db,0x009e9eda,0x009b9bd9,0x009898d8,0x009595d7,0x009191d5,0x008e8ed4,0x008b8bd3,0x008888d2,0x008484d0,0x008181cf,0x007d7dce,0x007a7acd,0x007676cb,0x007373ca,0x006f6fc9,0x006b6bc7,0x006868c6,0x006464c4,0x006060c3,0x005c5cc1,0x005858c0,0x005454be,0x005050bd,0x004c4cbb,0x004848ba,0x004444b8,0x004040b7,0x003b3bb5,0x003737b3,0x003333b2,0x002e2eb0,0x002a2aae,0x002525ad,0x002121ab,0x001c1ca9,0x001717a8,0x001313a6,0x000e0ea4,0x000909a2,0x000404a0
  };
const PaletteConstFWD<sizeof(colors_rgb_WR_04) / sizeof(unsigned int)>   paletteWR_04(colors_rgb_WR_04);
const PaletteConstBWD<sizeof(colors_rgb_WR_04) / sizeof(unsigned int)>   paletteWR_04_inv(colors_rgb_WR_04);

const unsigned int colors_rgb_WR_05[] = { 
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fdfdfe,0x00fdfdfe,0x00fcfcfe,0x00fcfcfd,0x00fbfbfd,0x00fafafd,0x00fafafd,0x00f9f9fc,0x00f8f8fc,0x00f7f7fc,0x00f6f6fb,0x00f5f5fb,0x00f3f3fa,0x00f2f2fa,0x00f1f1f9,0x00efeff9,0x00eeeef8,0x00ececf8,0x00ebebf7,0x00e9e9f6,0x00e7e7f6,0x00e5e5f5,0x00e3e3f4,0x00e2e2f4,0x00dfdff3,0x00ddddf2,0x00dbdbf1,0x00d9d9f0,0x00d7d7ef,0x00d4d4ef,0x00d2d2ee,0x00cfcfed,0x00cdcdec,0x00cacaeb,0x00c7c7ea,0x00c5c5e9,0x00c2c2e8,
  0x00bfbfe7,0x00bcbce5,0x00b9b9e4,0x00b6b6e3,0x00b2b2e2,0x00afafe1,0x00acacdf,0x00a8a8de,0x00a5a5dd,0x00a1a1db,0x009e9eda,0x009a9ad9,0x009696d7,0x009292d6,0x008e8ed4,0x008b8bd3,0x008686d1,0x008282d0,0x007e7ece,0x007a7acd,0x007676cb,0x007171c9,0x006d6dc8,0x006868c6,0x006464c4,0x005f5fc2,0x005a5ac1,0x005656bf,0x005151bd,0x004c4cbb,0x004747b9,0x004242b7,0x003d3db5,0x003737b4,0x003232b2,0x002d2db0,0x002727ad,0x002222ab,0x001c1ca9,0x001717a7,0x001111a5,0x000b0ba3,0x000505a1
  };
const PaletteConstFWD<sizeof(colors_rgb_WR_05) / sizeof(unsigned int)>   paletteWR_05(colors_rgb_WR_05);
const PaletteConstBWD<sizeof(colors_rgb_WR_05) / sizeof(unsigned int)>   paletteWR_05_inv(colors_rgb_WR_05);


const unsigned int colors_rgb_WR_06[] = { 
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fdfdfe,0x00fdfdfe,0x00fcfcfe,0x00fbfbfd,0x00fafafd,0x00f9f9fc,0x00f8f8fc,0x00f7f7fc,0x00f5f5fb,0x00f4f4fb,0x00f2f2fa,0x00f1f1f9,0x00efeff9,0x00ededf8,0x00ebebf7,0x00e9e9f6,0x00e7e7f6,0x00e5e5f5,0x00e2e2f4,0x00e0e0f3,0x00ddddf2,
  0x00dadaf1,0x00d7d7f0,0x00d5d5ef,0x00d1d1ee,0x00ceceec,0x00cbcbeb,0x00c8c8ea,0x00c4c4e9,0x00c1c1e7,0x00bdbde6,0x00b9b9e4,0x00b5b5e3,0x00b1b1e1,0x00adade0,0x00a9a9de,0x00a4a4dd,0x00a0a0db,0x009b9bd9,0x009797d7,0x009292d6,0x008d8dd4,0x008888d2,0x008383d0,0x007e7ece,0x007979cc,0x007373ca,0x006e6ec8,0x006868c6,0x006262c4,0x005c5cc2,0x005757bf,0x005050bd,0x004a4abb,0x004444b8,0x003e3eb6,0x003737b3,0x003131b1,0x002a2aae,0x002323ac,0x001c1ca9,0x001515a7,0x000e0ea4,0x000707a1
  };
const PaletteConstFWD<sizeof(colors_rgb_WR_06) / sizeof(unsigned int)>   paletteWR_06(colors_rgb_WR_06);
const PaletteConstBWD<sizeof(colors_rgb_WR_06) / sizeof(unsigned int)>   paletteWR_06_inv(colors_rgb_WR_06);

const unsigned int colors_rgb_WR_07[] = { 
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00fefefe,0x00fefefe,0x00fefefe,0x00fdfdfe,0x00fcfcfe,0x00fbfbfd,0x00fafafd,0x00f8f8fc,
  0x00f7f7fc,0x00f5f5fb,0x00f3f3fa,0x00f1f1f9,0x00efeff9,0x00ececf8,0x00e9e9f7,0x00e6e6f5,0x00e3e3f4,0x00e0e0f3,0x00dcdcf2,0x00d9d9f0,0x00d5d5ef,0x00d1d1ed,0x00cdcdec,0x00c8c8ea,0x00c4c4e8,0x00bfbfe7,0x00babae5,0x00b5b5e3,0x00afafe1,0x00aaaadf,0x00a4a4dc,0x009e9eda,0x009898d8,0x009191d5,0x008b8bd3,0x008484d0,0x007d7dce,0x007676cb,0x006f6fc9,0x006868c6,0x006060c3,0x005858c0,0x005050bd,0x004848ba,0x004040b7,0x003737b3,0x002e2eb0,0x002525ad,0x001c1ca9,0x001313a6,0x000909a2
  };
const PaletteConstFWD<sizeof(colors_rgb_WR_07) / sizeof(unsigned int)>   paletteWR_07(colors_rgb_WR_07);
const PaletteConstBWD<sizeof(colors_rgb_WR_07) / sizeof(unsigned int)>   paletteWR_07_inv(colors_rgb_WR_07);

const unsigned int colors_rgb_WR_08[] = { 
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00fefefe,0x00fefefe,0x00fdfdfe,0x00fbfbfd,0x00f9f9fd,0x00f7f7fc,0x00f4f4fb,0x00f1f1f9,0x00eeeef8,0x00eaeaf7,0x00e5e5f5,0x00e1e1f3,0x00dbdbf1,0x00d6d6ef,0x00d0d0ed,0x00c9c9ea,0x00c2c2e8,0x00bbbbe5,0x00b3b3e2,0x00ababdf,0x00a3a3dc,0x009a9ad9,0x009090d5,0x008787d1,0x007c7cce,0x007272ca,0x006767c5,0x005b5bc1,0x004f4fbd,0x004343b8,0x003636b3,0x002929ae,0x001c1ca9,0x000e0ea4
  };
const PaletteConstFWD<sizeof(colors_rgb_WR_08) / sizeof(unsigned int)>   paletteWR_08(colors_rgb_WR_08);
const PaletteConstBWD<sizeof(colors_rgb_WR_08) / sizeof(unsigned int)>   paletteWR_08_inv(colors_rgb_WR_08);

const unsigned int colors_rgb_WR_09[] = { 
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00fefefe,0x00fbfbfd,0x00f7f7fc,0x00f2f2fa,0x00ebebf7,0x00e2e2f4,0x00d8d8f0,0x00ccccec,0x00bfbfe7,0x00b0b0e1,0x009f9fdb,0x008d8dd4,0x007979cc,0x006464c4,0x004d4dbc,0x003535b3,0x001b1ba9
  };
const PaletteConstFWD<sizeof(colors_rgb_WR_09) / sizeof(unsigned int)>   paletteWR_09(colors_rgb_WR_09);
const PaletteConstBWD<sizeof(colors_rgb_WR_09) / sizeof(unsigned int)>   paletteWR_09_inv(colors_rgb_WR_09);

//////////////////////////////////////////////////////////////    WhiteGreen

const unsigned int colors_rgb_WG_02[] = { 
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,
  0x00fdfefd,0x00fdfefd,0x00fdfefd,0x00fdfefd,0x00fcfefc,0x00fcfefc,0x00fbfdfb,0x00fbfdfb,0x00fbfdfb,0x00fafdfa,0x00fafdfa,0x00f9fcf9,0x00f9fcf9,0x00f8fcf8,0x00f7fcf7,0x00f7fcf7,0x00f6fbf6,0x00f5fbf5,0x00f5fbf5,0x00f4fbf4,0x00f3faf3,0x00f2faf2,0x00f2faf2,0x00f1f9f1,0x00f0f9f0,0x00eff9ef,0x00eef8ee,0x00edf8ed,0x00ecf8ec,0x00ebf7eb,0x00eaf7ea,0x00e9f6e9,0x00e8f6e8,0x00e7f6e7,0x00e6f5e6,0x00e5f5e5,0x00e3f4e3,0x00e2f4e2,0x00e1f3e1,0x00e0f3e0,0x00def2de,0x00ddf2dd,0x00dcf1dc,
  0x00daf1da,0x00d9f0d9,0x00d7f0d7,0x00d6efd6,0x00d5efd5,0x00d3eed3,0x00d1eed1,0x00d0edd0,0x00ceecce,0x00cdeccd,0x00cbebcb,0x00c9eac9,0x00c8eac8,0x00c6e9c6,0x00c4e9c4,0x00c2e8c2,0x00c1e7c1,0x00bfe7bf,0x00bde6bd,0x00bbe5bb,0x00b9e4b9,0x00b7e4b7,0x00b5e3b5,0x00b3e2b3,0x00b1e1b1,0x00afe1af,0x00ade0ad,0x00abdfab,0x00a9dea9,0x00a7dda7,0x00a4dda4,0x00a2dca2,0x00a0dba0,0x009eda9e,0x009bd99b,0x0099d899,0x0097d797,0x0094d794,0x0092d692,0x0090d590,0x008dd48d,0x008bd38b,0x0088d288,
  0x0086d186,0x0083d083,0x0081cf81,0x007ece7e,0x007bcd7b,0x0079cc79,0x0076cb76,0x0073ca73,0x0070c970,0x006ec86e,0x006bc76b,0x0068c668,0x0065c565,0x0062c462,0x005fc35f,0x005cc25c,0x005ac05a,0x0057bf57,0x0054be54,0x0050bd50,0x004dbc4d,0x004abb4a,0x0047b947,0x0044b844,0x0041b741,0x003eb63e,0x003ab53a,0x0037b337,0x0034b234,0x0031b131,0x002db02d,0x002aae2a,0x0027ad27,0x0023ac23,0x0020ab20,0x001ca91c,0x0019a819,0x0015a715,0x0012a512,0x000ea40e,0x000aa30a,0x0007a107,0x0003a003
  };
const PaletteConstFWD<sizeof(colors_rgb_WG_02) / sizeof(unsigned int)>   paletteWG_02(colors_rgb_WG_02);
const PaletteConstBWD<sizeof(colors_rgb_WG_02) / sizeof(unsigned int)>   paletteWG_02_inv(colors_rgb_WG_02);

const unsigned int colors_rgb_WG_03[] = { 
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fdfefd,0x00fdfefd,0x00fdfefd,0x00fcfefc,0x00fcfefc,0x00fcfdfc,0x00fbfdfb,0x00fbfdfb,0x00fafdfa,0x00f9fdf9,0x00f9fcf9,0x00f8fcf8,0x00f8fcf8,0x00f7fcf7,0x00f6fbf6,0x00f5fbf5,0x00f4fbf4,0x00f4faf4,0x00f3faf3,0x00f2faf2,0x00f1f9f1,0x00f0f9f0,0x00eff9ef,0x00eef8ee,0x00edf8ed,0x00ecf7ec,0x00eaf7ea,
  0x00e9f6e9,0x00e8f6e8,0x00e7f6e7,0x00e5f5e5,0x00e4f5e4,0x00e3f4e3,0x00e1f3e1,0x00e0f3e0,0x00def2de,0x00ddf2dd,0x00dbf1db,0x00daf1da,0x00d8f0d8,0x00d6efd6,0x00d5efd5,0x00d3eed3,0x00d1edd1,0x00cfedcf,0x00ceecce,0x00ccebcc,0x00caebca,0x00c8eac8,0x00c6e9c6,0x00c4e8c4,0x00c2e8c2,0x00c0e7c0,0x00bee6be,0x00bce5bc,0x00b9e4b9,0x00b7e4b7,0x00b5e3b5,0x00b3e2b3,0x00b0e1b0,0x00aee0ae,0x00acdfac,0x00a9dea9,0x00a7dda7,0x00a4dda4,0x00a2dca2,0x009fdb9f,0x009dda9d,0x009ad99a,0x0097d897,
  0x0095d795,0x0092d692,0x008fd58f,0x008cd38c,0x0089d289,0x0087d187,0x0084d084,0x0081cf81,0x007ece7e,0x007bcd7b,0x0078cc78,0x0075cb75,0x0071c971,0x006ec86e,0x006bc76b,0x0068c668,0x0065c565,0x0061c361,0x005ec25e,0x005bc15b,0x0057c057,0x0054be54,0x0050bd50,0x004dbc4d,0x0049ba49,0x0046b946,0x0042b842,0x003eb63e,0x003bb53b,0x0037b337,0x0033b233,0x0030b130,0x002caf2c,0x0028ae28,0x0024ac24,0x0020ab20,0x001ca91c,0x0018a818,0x0014a614,0x0010a510,0x000ca30c,0x0008a208,0x0004a004
  };
const PaletteConstFWD<sizeof(colors_rgb_WG_03) / sizeof(unsigned int)>   paletteWG_03(colors_rgb_WG_03);
const PaletteConstBWD<sizeof(colors_rgb_WG_03) / sizeof(unsigned int)>   paletteWG_03_inv(colors_rgb_WG_03);

const unsigned int colors_rgb_WG_04[] = { 
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fdfefd,0x00fdfefd,0x00fdfefd,0x00fcfefc,0x00fcfdfc,0x00fbfdfb,0x00fbfdfb,0x00fafdfa,0x00f9fdf9,0x00f8fcf8,0x00f8fcf8,
  0x00f7fcf7,0x00f6fbf6,0x00f5fbf5,0x00f4fbf4,0x00f3faf3,0x00f2faf2,0x00f1f9f1,0x00f0f9f0,0x00eff9ef,0x00edf8ed,0x00ecf8ec,0x00ebf7eb,0x00e9f7e9,0x00e8f6e8,0x00e6f5e6,0x00e5f5e5,0x00e3f4e3,0x00e2f4e2,0x00e0f3e0,0x00def2de,0x00dcf2dc,0x00dbf1db,0x00d9f0d9,0x00d7f0d7,0x00d5efd5,0x00d3eed3,0x00d1edd1,0x00cfedcf,0x00cdeccd,0x00caebca,0x00c8eac8,0x00c6e9c6,0x00c4e8c4,0x00c1e7c1,0x00bfe7bf,0x00bce6bc,0x00bae5ba,0x00b7e4b7,0x00b5e3b5,0x00b2e2b2,0x00afe1af,0x00ace0ac,0x00aadfaa,
  0x00a7dda7,0x00a4dca4,0x00a1dba1,0x009eda9e,0x009bd99b,0x0098d898,0x0095d795,0x0091d591,0x008ed48e,0x008bd38b,0x0088d288,0x0084d084,0x0081cf81,0x007dce7d,0x007acd7a,0x0076cb76,0x0073ca73,0x006fc96f,0x006bc76b,0x0068c668,0x0064c464,0x0060c360,0x005cc15c,0x0058c058,0x0054be54,0x0050bd50,0x004cbb4c,0x0048ba48,0x0044b844,0x0040b740,0x003bb53b,0x0037b337,0x0033b233,0x002eb02e,0x002aae2a,0x0025ad25,0x0021ab21,0x001ca91c,0x0017a817,0x0013a613,0x000ea40e,0x0009a209,0x0004a004
  };
const PaletteConstFWD<sizeof(colors_rgb_WG_04) / sizeof(unsigned int)>   paletteWG_04(colors_rgb_WG_04);
const PaletteConstBWD<sizeof(colors_rgb_WG_04) / sizeof(unsigned int)>   paletteWG_04_inv(colors_rgb_WG_04);

const unsigned int colors_rgb_WG_05[] = { 
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fdfefd,0x00fdfefd,0x00fcfefc,0x00fcfdfc,0x00fbfdfb,0x00fafdfa,0x00fafdfa,0x00f9fcf9,0x00f8fcf8,0x00f7fcf7,0x00f6fbf6,0x00f5fbf5,0x00f3faf3,0x00f2faf2,0x00f1f9f1,0x00eff9ef,0x00eef8ee,0x00ecf8ec,0x00ebf7eb,0x00e9f6e9,0x00e7f6e7,0x00e5f5e5,0x00e3f4e3,0x00e2f4e2,0x00dff3df,0x00ddf2dd,0x00dbf1db,0x00d9f0d9,0x00d7efd7,0x00d4efd4,0x00d2eed2,0x00cfedcf,0x00cdeccd,0x00caebca,0x00c7eac7,0x00c5e9c5,0x00c2e8c2,
  0x00bfe7bf,0x00bce5bc,0x00b9e4b9,0x00b6e3b6,0x00b2e2b2,0x00afe1af,0x00acdfac,0x00a8dea8,0x00a5dda5,0x00a1dba1,0x009eda9e,0x009ad99a,0x0096d796,0x0092d692,0x008ed48e,0x008bd38b,0x0086d186,0x0082d082,0x007ece7e,0x007acd7a,0x0076cb76,0x0071c971,0x006dc86d,0x0068c668,0x0064c464,0x005fc25f,0x005ac15a,0x0056bf56,0x0051bd51,0x004cbb4c,0x0047b947,0x0042b742,0x003db53d,0x0037b437,0x0032b232,0x002db02d,0x0027ad27,0x0022ab22,0x001ca91c,0x0017a717,0x0011a511,0x000ba30b,0x0005a105
  };
const PaletteConstFWD<sizeof(colors_rgb_WG_05) / sizeof(unsigned int)>   paletteWG_05(colors_rgb_WG_05);
const PaletteConstBWD<sizeof(colors_rgb_WG_05) / sizeof(unsigned int)>   paletteWG_05_inv(colors_rgb_WG_05);

const unsigned int colors_rgb_WG_06[] = { 
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fdfefd,0x00fdfefd,0x00fcfefc,0x00fbfdfb,0x00fafdfa,0x00f9fcf9,0x00f8fcf8,0x00f7fcf7,0x00f5fbf5,0x00f4fbf4,0x00f2faf2,0x00f1f9f1,0x00eff9ef,0x00edf8ed,0x00ebf7eb,0x00e9f6e9,0x00e7f6e7,0x00e5f5e5,0x00e2f4e2,0x00e0f3e0,0x00ddf2dd,
  0x00daf1da,0x00d7f0d7,0x00d5efd5,0x00d1eed1,0x00ceecce,0x00cbebcb,0x00c8eac8,0x00c4e9c4,0x00c1e7c1,0x00bde6bd,0x00b9e4b9,0x00b5e3b5,0x00b1e1b1,0x00ade0ad,0x00a9dea9,0x00a4dda4,0x00a0dba0,0x009bd99b,0x0097d797,0x0092d692,0x008dd48d,0x0088d288,0x0083d083,0x007ece7e,0x0079cc79,0x0073ca73,0x006ec86e,0x0068c668,0x0062c462,0x005cc25c,0x0057bf57,0x0050bd50,0x004abb4a,0x0044b844,0x003eb63e,0x0037b337,0x0031b131,0x002aae2a,0x0023ac23,0x001ca91c,0x0015a715,0x000ea40e,0x0007a107
  };
const PaletteConstFWD<sizeof(colors_rgb_WG_06) / sizeof(unsigned int)>   paletteWG_06(colors_rgb_WG_06);
const PaletteConstBWD<sizeof(colors_rgb_WG_06) / sizeof(unsigned int)>   paletteWG_06_inv(colors_rgb_WG_06);

const unsigned int colors_rgb_WG_07[] = { 
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00fefefe,0x00fefefe,0x00fefefe,0x00fdfefd,0x00fcfefc,0x00fbfdfb,0x00fafdfa,0x00f8fcf8,
  0x00f7fcf7,0x00f5fbf5,0x00f3faf3,0x00f1f9f1,0x00eff9ef,0x00ecf8ec,0x00e9f7e9,0x00e6f5e6,0x00e3f4e3,0x00e0f3e0,0x00dcf2dc,0x00d9f0d9,0x00d5efd5,0x00d1edd1,0x00cdeccd,0x00c8eac8,0x00c4e8c4,0x00bfe7bf,0x00bae5ba,0x00b5e3b5,0x00afe1af,0x00aadfaa,0x00a4dca4,0x009eda9e,0x0098d898,0x0091d591,0x008bd38b,0x0084d084,0x007dce7d,0x0076cb76,0x006fc96f,0x0068c668,0x0060c360,0x0058c058,0x0050bd50,0x0048ba48,0x0040b740,0x0037b337,0x002eb02e,0x0025ad25,0x001ca91c,0x0013a613,0x0009a209
  };
const PaletteConstFWD<sizeof(colors_rgb_WG_07) / sizeof(unsigned int)>   paletteWG_07(colors_rgb_WG_07);
const PaletteConstBWD<sizeof(colors_rgb_WG_07) / sizeof(unsigned int)>   paletteWG_07_inv(colors_rgb_WG_07);

const unsigned int colors_rgb_WG_08[] = { 
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00fefefe,0x00fefefe,0x00fdfefd,0x00fbfdfb,0x00f9fdf9,0x00f7fcf7,0x00f4fbf4,0x00f1f9f1,0x00eef8ee,0x00eaf7ea,0x00e5f5e5,0x00e1f3e1,0x00dbf1db,0x00d6efd6,0x00d0edd0,0x00c9eac9,0x00c2e8c2,0x00bbe5bb,0x00b3e2b3,0x00abdfab,0x00a3dca3,0x009ad99a,0x0090d590,0x0087d187,0x007cce7c,0x0072ca72,0x0067c567,0x005bc15b,0x004fbd4f,0x0043b843,0x0036b336,0x0029ae29,0x001ca91c,0x000ea40e
  };
const PaletteConstFWD<sizeof(colors_rgb_WG_08) / sizeof(unsigned int)>   paletteWG_08(colors_rgb_WG_08);
const PaletteConstBWD<sizeof(colors_rgb_WG_08) / sizeof(unsigned int)>   paletteWG_08_inv(colors_rgb_WG_08);

const unsigned int colors_rgb_WG_09[] = { 
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00fefefe,0x00fbfdfb,0x00f7fcf7,0x00f2faf2,0x00ebf7eb,0x00e2f4e2,0x00d8f0d8,0x00cceccc,0x00bfe7bf,0x00b0e1b0,0x009fdb9f,0x008dd48d,0x0079cc79,0x0064c464,0x004dbc4d,0x0035b335,0x001ba91b
  };
const PaletteConstFWD<sizeof(colors_rgb_WG_09) / sizeof(unsigned int)>   paletteWG_09(colors_rgb_WG_09);
const PaletteConstBWD<sizeof(colors_rgb_WG_09) / sizeof(unsigned int)>   paletteWG_09_inv(colors_rgb_WG_09);

////////////////////////////////////////////////////////////////    WhiteYellow

const unsigned int colors_rgb_WY_02[] = { 
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,
  0x00fdfefe,0x00fdfefe,0x00fdfefe,0x00fdfefe,0x00fcfefe,0x00fcfefe,0x00fbfefe,0x00fbfefe,0x00fbfefe,0x00fafefe,0x00fafefe,0x00f9fefe,0x00f9fefe,0x00f8fefe,0x00f7fefe,0x00f7fefe,0x00f6fefe,0x00f5fefe,0x00f5fefe,0x00f4fefe,0x00f3fefe,0x00f2fefe,0x00f2fefe,0x00f1fefe,0x00f0fefe,0x00effefe,0x00eefdfd,0x00edfdfd,0x00ecfdfd,0x00ebfdfd,0x00eafdfd,0x00e9fdfd,0x00e8fdfd,0x00e7fdfd,0x00e6fdfd,0x00e5fdfd,0x00e3fdfd,0x00e2fdfd,0x00e1fdfd,0x00e0fdfd,0x00defcfc,0x00ddfcfc,0x00dcfcfc,
  0x00dafcfc,0x00d9fcfc,0x00d7fcfc,0x00d6fcfc,0x00d5fcfc,0x00d3fcfc,0x00d1fcfc,0x00d0fcfc,0x00cefbfb,0x00cdfbfb,0x00cbfbfb,0x00c9fbfb,0x00c8fbfb,0x00c6fbfb,0x00c4fbfb,0x00c2fbfb,0x00c1fbfb,0x00bffbfb,0x00bdfafa,0x00bbfafa,0x00b9fafa,0x00b7fafa,0x00b5fafa,0x00b3fafa,0x00b1fafa,0x00affafa,0x00adf9f9,0x00abf9f9,0x00a9f9f9,0x00a7f9f9,0x00a4f9f9,0x00a2f9f9,0x00a0f9f9,0x009ef8f8,0x009bf8f8,0x0099f8f8,0x0097f8f8,0x0094f8f8,0x0092f8f8,0x0090f8f8,0x008df7f7,0x008bf7f7,0x0088f7f7,
  0x0086f7f7,0x0083f7f7,0x0081f7f7,0x007ef6f6,0x007bf6f6,0x0079f6f6,0x0076f6f6,0x0073f6f6,0x0070f6f6,0x006ef5f5,0x006bf5f5,0x0068f5f5,0x0065f5f5,0x0062f5f5,0x005ff5f5,0x005cf4f4,0x005af4f4,0x0057f4f4,0x0054f4f4,0x0050f4f4,0x004df3f3,0x004af3f3,0x0047f3f3,0x0044f3f3,0x0041f3f3,0x003ef2f2,0x003af2f2,0x0037f2f2,0x0034f2f2,0x0031f2f2,0x002df1f1,0x002af1f1,0x0027f1f1,0x0023f1f1,0x0020f1f1,0x001cf0f0,0x0019f0f0,0x0015f0f0,0x0012f0f0,0x000eefef,0x000aefef,0x0007efef,0x0003efef
  };
const PaletteConstFWD<sizeof(colors_rgb_WY_02) / sizeof(unsigned int)>   paletteWY_02(colors_rgb_WY_02);
const PaletteConstBWD<sizeof(colors_rgb_WY_02) / sizeof(unsigned int)>   paletteWY_02_inv(colors_rgb_WY_02);

const unsigned int colors_rgb_WY_03[] = { 
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fdfefe,0x00fdfefe,0x00fdfefe,0x00fcfefe,0x00fcfefe,0x00fcfefe,0x00fbfefe,0x00fbfefe,0x00fafefe,0x00f9fefe,0x00f9fefe,0x00f8fefe,0x00f8fefe,0x00f7fefe,0x00f6fefe,0x00f5fefe,0x00f4fefe,0x00f4fefe,0x00f3fefe,0x00f2fefe,0x00f1fefe,0x00f0fefe,0x00effefe,0x00eefdfd,0x00edfdfd,0x00ecfdfd,0x00eafdfd,
  0x00e9fdfd,0x00e8fdfd,0x00e7fdfd,0x00e5fdfd,0x00e4fdfd,0x00e3fdfd,0x00e1fdfd,0x00e0fdfd,0x00defcfc,0x00ddfcfc,0x00dbfcfc,0x00dafcfc,0x00d8fcfc,0x00d6fcfc,0x00d5fcfc,0x00d3fcfc,0x00d1fcfc,0x00cffcfc,0x00cefbfb,0x00ccfbfb,0x00cafbfb,0x00c8fbfb,0x00c6fbfb,0x00c4fbfb,0x00c2fbfb,0x00c0fbfb,0x00befafa,0x00bcfafa,0x00b9fafa,0x00b7fafa,0x00b5fafa,0x00b3fafa,0x00b0fafa,0x00aef9f9,0x00acf9f9,0x00a9f9f9,0x00a7f9f9,0x00a4f9f9,0x00a2f9f9,0x009ff9f9,0x009df8f8,0x009af8f8,0x0097f8f8,
  0x0095f8f8,0x0092f8f8,0x008ff8f8,0x008cf7f7,0x0089f7f7,0x0087f7f7,0x0084f7f7,0x0081f7f7,0x007ef6f6,0x007bf6f6,0x0078f6f6,0x0075f6f6,0x0071f6f6,0x006ef5f5,0x006bf5f5,0x0068f5f5,0x0065f5f5,0x0061f5f5,0x005ef4f4,0x005bf4f4,0x0057f4f4,0x0054f4f4,0x0050f4f4,0x004df3f3,0x0049f3f3,0x0046f3f3,0x0042f3f3,0x003ef2f2,0x003bf2f2,0x0037f2f2,0x0033f2f2,0x0030f2f2,0x002cf1f1,0x0028f1f1,0x0024f1f1,0x0020f1f1,0x001cf0f0,0x0018f0f0,0x0014f0f0,0x0010f0f0,0x000cefef,0x0008efef,0x0004efef
  };
const PaletteConstFWD<sizeof(colors_rgb_WY_03) / sizeof(unsigned int)>   paletteWY_03(colors_rgb_WY_03);
const PaletteConstBWD<sizeof(colors_rgb_WY_03) / sizeof(unsigned int)>   paletteWY_03_inv(colors_rgb_WY_03);

const unsigned int colors_rgb_WY_04[] = { 
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fdfefe,0x00fdfefe,0x00fdfefe,0x00fcfefe,0x00fcfefe,0x00fbfefe,0x00fbfefe,0x00fafefe,0x00f9fefe,0x00f8fefe,0x00f8fefe,
  0x00f7fefe,0x00f6fefe,0x00f5fefe,0x00f4fefe,0x00f3fefe,0x00f2fefe,0x00f1fefe,0x00f0fefe,0x00effefe,0x00edfdfd,0x00ecfdfd,0x00ebfdfd,0x00e9fdfd,0x00e8fdfd,0x00e6fdfd,0x00e5fdfd,0x00e3fdfd,0x00e2fdfd,0x00e0fdfd,0x00defcfc,0x00dcfcfc,0x00dbfcfc,0x00d9fcfc,0x00d7fcfc,0x00d5fcfc,0x00d3fcfc,0x00d1fcfc,0x00cffcfc,0x00cdfbfb,0x00cafbfb,0x00c8fbfb,0x00c6fbfb,0x00c4fbfb,0x00c1fbfb,0x00bffbfb,0x00bcfafa,0x00bafafa,0x00b7fafa,0x00b5fafa,0x00b2fafa,0x00affafa,0x00acf9f9,0x00aaf9f9,
  0x00a7f9f9,0x00a4f9f9,0x00a1f9f9,0x009ef8f8,0x009bf8f8,0x0098f8f8,0x0095f8f8,0x0091f8f8,0x008ef7f7,0x008bf7f7,0x0088f7f7,0x0084f7f7,0x0081f7f7,0x007df6f6,0x007af6f6,0x0076f6f6,0x0073f6f6,0x006ff6f6,0x006bf5f5,0x0068f5f5,0x0064f5f5,0x0060f5f5,0x005cf4f4,0x0058f4f4,0x0054f4f4,0x0050f4f4,0x004cf3f3,0x0048f3f3,0x0044f3f3,0x0040f3f3,0x003bf2f2,0x0037f2f2,0x0033f2f2,0x002ef1f1,0x002af1f1,0x0025f1f1,0x0021f1f1,0x001cf0f0,0x0017f0f0,0x0013f0f0,0x000eefef,0x0009efef,0x0004efef
  };
const PaletteConstFWD<sizeof(colors_rgb_WY_04) / sizeof(unsigned int)>   paletteWY_04(colors_rgb_WY_04);
const PaletteConstBWD<sizeof(colors_rgb_WY_04) / sizeof(unsigned int)>   paletteWY_04_inv(colors_rgb_WY_04);

const unsigned int colors_rgb_WY_05[] = { 
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fdfefe,0x00fdfefe,0x00fcfefe,0x00fcfefe,0x00fbfefe,0x00fafefe,0x00fafefe,0x00f9fefe,0x00f8fefe,0x00f7fefe,0x00f6fefe,0x00f5fefe,0x00f3fefe,0x00f2fefe,0x00f1fefe,0x00effefe,0x00eefdfd,0x00ecfdfd,0x00ebfdfd,0x00e9fdfd,0x00e7fdfd,0x00e5fdfd,0x00e3fdfd,0x00e2fdfd,0x00dffdfd,0x00ddfcfc,0x00dbfcfc,0x00d9fcfc,0x00d7fcfc,0x00d4fcfc,0x00d2fcfc,0x00cffcfc,0x00cdfbfb,0x00cafbfb,0x00c7fbfb,0x00c5fbfb,0x00c2fbfb,
  0x00bffbfb,0x00bcfafa,0x00b9fafa,0x00b6fafa,0x00b2fafa,0x00affafa,0x00acf9f9,0x00a8f9f9,0x00a5f9f9,0x00a1f9f9,0x009ef8f8,0x009af8f8,0x0096f8f8,0x0092f8f8,0x008ef7f7,0x008bf7f7,0x0086f7f7,0x0082f7f7,0x007ef6f6,0x007af6f6,0x0076f6f6,0x0071f6f6,0x006df5f5,0x0068f5f5,0x0064f5f5,0x005ff4f4,0x005af4f4,0x0056f4f4,0x0051f4f4,0x004cf3f3,0x0047f3f3,0x0042f3f3,0x003df2f2,0x0037f2f2,0x0032f2f2,0x002df1f1,0x0027f1f1,0x0022f1f1,0x001cf0f0,0x0017f0f0,0x0011f0f0,0x000befef,0x0005efef
  };
const PaletteConstFWD<sizeof(colors_rgb_WY_05) / sizeof(unsigned int)>   paletteWY_05(colors_rgb_WY_05);
const PaletteConstBWD<sizeof(colors_rgb_WY_05) / sizeof(unsigned int)>   paletteWY_05_inv(colors_rgb_WY_05);

const unsigned int colors_rgb_WY_06[] = { 
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00fefefe,0x00fefefe,0x00fefefe,0x00fefefe,0x00fdfefe,0x00fdfefe,0x00fcfefe,0x00fbfefe,0x00fafefe,0x00f9fefe,0x00f8fefe,0x00f7fefe,0x00f5fefe,0x00f4fefe,0x00f2fefe,0x00f1fefe,0x00effefe,0x00edfdfd,0x00ebfdfd,0x00e9fdfd,0x00e7fdfd,0x00e5fdfd,0x00e2fdfd,0x00e0fdfd,0x00ddfcfc,
  0x00dafcfc,0x00d7fcfc,0x00d5fcfc,0x00d1fcfc,0x00cefbfb,0x00cbfbfb,0x00c8fbfb,0x00c4fbfb,0x00c1fbfb,0x00bdfafa,0x00b9fafa,0x00b5fafa,0x00b1fafa,0x00adf9f9,0x00a9f9f9,0x00a4f9f9,0x00a0f9f9,0x009bf8f8,0x0097f8f8,0x0092f8f8,0x008df7f7,0x0088f7f7,0x0083f7f7,0x007ef6f6,0x0079f6f6,0x0073f6f6,0x006ef5f5,0x0068f5f5,0x0062f5f5,0x005cf4f4,0x0057f4f4,0x0050f4f4,0x004af3f3,0x0044f3f3,0x003ef2f2,0x0037f2f2,0x0031f2f2,0x002af1f1,0x0023f1f1,0x001cf0f0,0x0015f0f0,0x000eefef,0x0007efef
  };
const PaletteConstFWD<sizeof(colors_rgb_WY_06) / sizeof(unsigned int)>   paletteWY_06(colors_rgb_WY_06);
const PaletteConstBWD<sizeof(colors_rgb_WY_06) / sizeof(unsigned int)>   paletteWY_06_inv(colors_rgb_WY_06);

const unsigned int colors_rgb_WY_07[] = { 
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00fefefe,0x00fefefe,0x00fefefe,0x00fdfefe,0x00fcfefe,0x00fbfefe,0x00fafefe,0x00f8fefe,
  0x00f7fefe,0x00f5fefe,0x00f3fefe,0x00f1fefe,0x00effefe,0x00ecfdfd,0x00e9fdfd,0x00e6fdfd,0x00e3fdfd,0x00e0fdfd,0x00dcfcfc,0x00d9fcfc,0x00d5fcfc,0x00d1fcfc,0x00cdfbfb,0x00c8fbfb,0x00c4fbfb,0x00bffbfb,0x00bafafa,0x00b5fafa,0x00affafa,0x00aaf9f9,0x00a4f9f9,0x009ef8f8,0x0098f8f8,0x0091f8f8,0x008bf7f7,0x0084f7f7,0x007df6f6,0x0076f6f6,0x006ff6f6,0x0068f5f5,0x0060f5f5,0x0058f4f4,0x0050f4f4,0x0048f3f3,0x0040f3f3,0x0037f2f2,0x002ef1f1,0x0025f1f1,0x001cf0f0,0x0013f0f0,0x0009efef
  };
const PaletteConstFWD<sizeof(colors_rgb_WY_07) / sizeof(unsigned int)>   paletteWY_07(colors_rgb_WY_07);
const PaletteConstBWD<sizeof(colors_rgb_WY_07) / sizeof(unsigned int)>   paletteWY_07_inv(colors_rgb_WY_07);

const unsigned int colors_rgb_WY_08[] = { 
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00fefefe,0x00fefefe,0x00fdfefe,0x00fbfefe,0x00f9fefe,0x00f7fefe,0x00f4fefe,0x00f1fefe,0x00eefdfd,0x00eafdfd,0x00e5fdfd,0x00e1fdfd,0x00dbfcfc,0x00d6fcfc,0x00d0fcfc,0x00c9fbfb,0x00c2fbfb,0x00bbfafa,0x00b3fafa,0x00abf9f9,0x00a3f9f9,0x009af8f8,0x0090f8f8,0x0087f7f7,0x007cf6f6,0x0072f6f6,0x0067f5f5,0x005bf4f4,0x004ff4f4,0x0043f3f3,0x0036f2f2,0x0029f1f1,0x001cf0f0,0x000eefef
  };
const PaletteConstFWD<sizeof(colors_rgb_WY_08) / sizeof(unsigned int)>   paletteWY_08(colors_rgb_WY_08);
const PaletteConstBWD<sizeof(colors_rgb_WY_08) / sizeof(unsigned int)>   paletteWY_08_inv(colors_rgb_WY_08);

const unsigned int colors_rgb_WY_09[] = { 
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,
  0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00ffffff,0x00fefefe,0x00fbfefe,0x00f7fefe,0x00f2fefe,0x00ebfdfd,0x00e2fdfd,0x00d8fcfc,0x00ccfbfb,0x00bffbfb,0x00b0fafa,0x009ff9f9,0x008df7f7,0x0079f6f6,0x0064f5f5,0x004df3f3,0x0035f2f2,0x001bf0f0
  };
const PaletteConstFWD<sizeof(colors_rgb_WY_09) / sizeof(unsigned int)>   paletteWY_09(colors_rgb_WY_09);
const PaletteConstBWD<sizeof(colors_rgb_WY_09) / sizeof(unsigned int)>   paletteWY_09_inv(colors_rgb_WY_09);


////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// BlackRed  /////////////////////////////////////////////////////////////

const unsigned int colors_rgb_BR_02[] = { 
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000001,0x00000001,0x00000001,0x00000001,0x00000003,0x00000003,0x00000003,0x00000003,0x00000003,0x00000004,0x00000004,0x00000004,0x00000004,0x00000006,0x00000007,0x00000007,0x00000007,0x00000009,0x00000009,0x0000000b,0x0000000b,0x0000000c,0x0000000c,0x0000000c,0x0000000e,0x0000000f,0x0000000f,0x00000011,0x00000013,0x00000013,0x00000014,0x00000014,0x00000016,0x00000017,0x00000017,0x00000019,0x0000001b,0x0000001c,0x0000001c,0x0000001e,0x0000001f,0x00000021,0x00000021,
  0x00000024,0x00000024,0x00000027,0x00000027,0x00000029,0x0000002b,0x0000002e,0x0000002e,0x0000002f,0x00000031,0x00000033,0x00000034,0x00000036,0x00000037,0x0000003a,0x0000003c,0x0000003c,0x0000003f,0x00000041,0x00000042,0x00000044,0x00000047,0x00000049,0x0000004a,0x0000004c,0x0000004f,0x00000051,0x00000052,0x00000054,0x00000056,0x0000005a,0x0000005c,0x0000005e,0x0000005f,0x00000062,0x00000064,0x00000066,0x0000006a,0x0000006c,0x0000006d,0x00000071,0x00000072,0x00000075,
  0x00000077,0x0000007a,0x0000007c,0x0000007f,0x00000082,0x00000084,0x00000087,0x0000008a,0x0000008d,0x0000008f,0x00000092,0x00000095,0x00000099,0x0000009c,0x0000009f,0x000000a2,0x000000a2,0x000000a5,0x000000a8,0x000000ad,0x000000b0,0x000000b4,0x000000b5,0x000000b8,0x000000bc,0x000000bf,0x000000c4,0x000000c5,0x000000c8,0x000000cc,0x000000d0,0x000000d2,0x000000d5,0x000000da,0x000000dd,0x000000e0,0x000000e3,0x000000e8,0x000000ea,0x000000ef,0x000000f3,0x000000f5,0x000000fa
  };
const PaletteConstFWD<sizeof(colors_rgb_BR_02) / sizeof(unsigned int)>   paletteBR_02(colors_rgb_BR_02);
const PaletteConstBWD<sizeof(colors_rgb_BR_02) / sizeof(unsigned int)>   paletteBR_02_inv(colors_rgb_BR_02);

const unsigned int colors_rgb_BR_03[] = { 
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000001,0x00000001,0x00000001,0x00000003,0x00000003,0x00000001,0x00000003,0x00000003,0x00000004,0x00000006,0x00000004,0x00000006,0x00000006,0x00000007,0x00000007,0x00000009,0x0000000b,0x00000009,0x0000000b,0x0000000c,0x0000000c,0x0000000e,0x0000000f,0x0000000f,0x00000011,0x00000011,0x00000014,
  0x00000014,0x00000016,0x00000017,0x00000019,0x0000001b,0x0000001b,0x0000001c,0x0000001e,0x0000001f,0x00000021,0x00000023,0x00000024,0x00000026,0x00000027,0x00000029,0x0000002b,0x0000002c,0x0000002f,0x0000002f,0x00000031,0x00000034,0x00000036,0x00000037,0x00000039,0x0000003c,0x0000003e,0x0000003f,0x00000041,0x00000044,0x00000047,0x00000049,0x0000004a,0x0000004e,0x0000004f,0x00000051,0x00000054,0x00000056,0x0000005a,0x0000005c,0x0000005f,0x00000061,0x00000064,0x00000067,
  0x00000069,0x0000006c,0x0000006f,0x00000071,0x00000074,0x00000075,0x00000079,0x0000007c,0x0000007f,0x00000082,0x00000085,0x00000089,0x0000008c,0x0000008f,0x00000092,0x00000095,0x00000099,0x0000009c,0x0000009f,0x000000a2,0x000000a7,0x000000a8,0x000000ad,0x000000b0,0x000000b4,0x000000b7,0x000000bc,0x000000bf,0x000000c2,0x000000c5,0x000000ca,0x000000cd,0x000000d0,0x000000d5,0x000000d8,0x000000dd,0x000000e0,0x000000e5,0x000000e8,0x000000ed,0x000000f0,0x000000f5,0x000000f8
  };
const PaletteConstFWD<sizeof(colors_rgb_BR_03) / sizeof(unsigned int)>   paletteBR_03(colors_rgb_BR_03);
const PaletteConstBWD<sizeof(colors_rgb_BR_03) / sizeof(unsigned int)>   paletteBR_03_inv(colors_rgb_BR_03);

const unsigned int colors_rgb_BR_04[] = { 
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000001,0x00000001,0x00000001,0x00000003,0x00000001,0x00000003,0x00000003,0x00000004,0x00000006,0x00000006,0x00000006,
  0x00000007,0x00000007,0x00000009,0x0000000b,0x0000000b,0x0000000c,0x0000000c,0x0000000e,0x0000000f,0x00000011,0x00000013,0x00000013,0x00000016,0x00000016,0x00000017,0x00000019,0x0000001b,0x0000001c,0x0000001e,0x0000001f,0x00000023,0x00000023,0x00000024,0x00000027,0x00000029,0x0000002b,0x0000002c,0x0000002f,0x00000031,0x00000034,0x00000036,0x00000037,0x00000039,0x0000003c,0x0000003f,0x00000042,0x00000044,0x00000047,0x00000049,0x0000004c,0x0000004f,0x00000052,0x00000054,
  0x00000056,0x00000059,0x0000005c,0x0000005f,0x00000062,0x00000066,0x00000069,0x0000006c,0x0000006f,0x00000072,0x00000075,0x00000079,0x0000007c,0x00000081,0x00000084,0x00000087,0x0000008a,0x0000008f,0x00000092,0x00000095,0x00000099,0x0000009d,0x000000a0,0x000000a5,0x000000a8,0x000000ad,0x000000b0,0x000000b5,0x000000b8,0x000000bd,0x000000c2,0x000000c5,0x000000ca,0x000000cf,0x000000d2,0x000000d8,0x000000db,0x000000e0,0x000000e7,0x000000ea,0x000000ef,0x000000f3,0x000000f8
  };
const PaletteConstFWD<sizeof(colors_rgb_BR_04) / sizeof(unsigned int)>   paletteBR_04(colors_rgb_BR_04);
const PaletteConstBWD<sizeof(colors_rgb_BR_04) / sizeof(unsigned int)>   paletteBR_04_inv(colors_rgb_BR_04);

const unsigned int colors_rgb_BR_05[] = { 
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000001,0x00000001,0x00000003,0x00000001,0x00000003,0x00000004,0x00000004,0x00000004,0x00000006,0x00000007,0x00000007,0x00000009,0x0000000b,0x0000000c,0x0000000c,0x0000000f,0x0000000f,0x00000013,0x00000013,0x00000014,0x00000017,0x00000019,0x0000001a,0x0000001c,0x0000001f,0x00000021,0x00000022,0x00000024,0x00000026,0x0000002a,0x0000002c,0x0000002f,0x00000031,0x00000034,0x00000037,0x00000039,0x0000003c,
  0x0000003f,0x00000040,0x00000044,0x00000047,0x0000004c,0x0000004f,0x00000050,0x00000055,0x00000058,0x0000005b,0x0000005f,0x00000063,0x00000066,0x0000006b,0x0000006e,0x00000072,0x00000076,0x0000007b,0x0000007e,0x00000083,0x00000086,0x0000008b,0x00000090,0x00000094,0x00000098,0x0000009c,0x000000a3,0x000000a6,0x000000ab,0x000000af,0x000000b4,0x000000b9,0x000000be,0x000000c5,0x000000ca,0x000000cf,0x000000d4,0x000000d8,0x000000df,0x000000e4,0x000000ea,0x000000f0,0x000000f7
  };
const PaletteConstFWD<sizeof(colors_rgb_BR_05) / sizeof(unsigned int)>   paletteBR_05(colors_rgb_BR_05);
const PaletteConstBWD<sizeof(colors_rgb_BR_05) / sizeof(unsigned int)>   paletteBR_05_inv(colors_rgb_BR_05);

const unsigned int colors_rgb_BR_06[] = { 
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000001,0x00000001,0x00000003,0x00000003,0x00000004,0x00000004,0x00000006,0x00000007,0x00000009,0x0000000b,0x0000000c,0x0000000c,0x0000000f,0x00000011,0x00000013,0x00000014,0x00000017,0x00000019,0x0000001c,0x0000001e,0x00000021,
  0x00000024,0x00000027,0x00000029,0x0000002d,0x0000002f,0x00000032,0x00000035,0x0000003a,0x0000003c,0x00000040,0x00000044,0x00000048,0x0000004c,0x00000050,0x00000053,0x0000005a,0x0000005d,0x00000062,0x00000065,0x0000006b,0x00000070,0x00000075,0x00000079,0x0000007e,0x00000083,0x00000089,0x0000008e,0x00000094,0x0000009b,0x000000a1,0x000000a4,0x000000ac,0x000000b2,0x000000b7,0x000000be,0x000000c4,0x000000ca,0x000000d1,0x000000d8,0x000000df,0x000000e7,0x000000ed,0x000000f3
  };
const PaletteConstFWD<sizeof(colors_rgb_BR_06) / sizeof(unsigned int)>   paletteBR_06(colors_rgb_BR_06);
const PaletteConstBWD<sizeof(colors_rgb_BR_06) / sizeof(unsigned int)>   paletteBR_06_inv(colors_rgb_BR_06);

const unsigned int colors_rgb_BR_07[] = { 
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000001,0x00000003,0x00000003,0x00000004,0x00000006,
  0x00000007,0x00000009,0x0000000b,0x0000000c,0x0000000f,0x00000012,0x00000016,0x00000017,0x0000001a,0x0000001d,0x00000022,0x00000024,0x00000028,0x0000002c,0x00000030,0x00000035,0x00000038,0x0000003e,0x00000043,0x00000048,0x0000004e,0x00000053,0x00000058,0x0000005e,0x00000064,0x0000006b,0x00000071,0x00000077,0x0000007f,0x00000085,0x0000008d,0x00000093,0x0000009b,0x000000a3,0x000000ab,0x000000b3,0x000000bb,0x000000c3,0x000000cc,0x000000d6,0x000000dd,0x000000e7,0x000000f0
  };
const PaletteConstFWD<sizeof(colors_rgb_BR_07) / sizeof(unsigned int)>   paletteBR_07(colors_rgb_BR_07);
const PaletteConstBWD<sizeof(colors_rgb_BR_07) / sizeof(unsigned int)>   paletteBR_07_inv(colors_rgb_BR_07);

const unsigned int colors_rgb_BR_08[] = { 
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000001,0x00000003,0x00000006,0x00000007,0x0000000a,0x0000000c,0x0000000f,0x00000014,0x00000018,0x0000001b,0x00000022,0x00000026,0x0000002d,0x00000033,0x0000003b,0x00000041,0x00000049,0x00000050,0x00000058,0x00000061,0x0000006b,0x00000073,0x0000007f,0x00000088,0x00000092,0x0000009e,0x000000ab,0x000000b5,0x000000c2,0x000000ce,0x000000db,0x000000e9
  };
const PaletteConstFWD<sizeof(colors_rgb_BR_08) / sizeof(unsigned int)>   paletteBR_08(colors_rgb_BR_08);
const PaletteConstBWD<sizeof(colors_rgb_BR_08) / sizeof(unsigned int)>   paletteBR_08_inv(colors_rgb_BR_08);

const unsigned int colors_rgb_BR_09[] = { 
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000003,0x00000007,0x0000000c,0x00000012,0x0000001b,0x00000024,0x00000030,0x0000003c,0x00000049,0x0000005a,0x0000006b,0x0000007d,0x00000090,0x000000a7,0x000000be,0x000000d6
  };
const PaletteConstFWD<sizeof(colors_rgb_BR_09) / sizeof(unsigned int)>   paletteBR_09(colors_rgb_BR_09);
const PaletteConstBWD<sizeof(colors_rgb_BR_09) / sizeof(unsigned int)>   paletteBR_09_inv(colors_rgb_BR_09);

const unsigned int colors_rgb_BG_02[] = { 
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000100,0x00000100,0x00000100,0x00000100,0x00000300,0x00000300,0x00000300,0x00000300,0x00000300,0x00000400,0x00000400,0x00000400,0x00000400,0x00000600,0x00000700,0x00000700,0x00000700,0x00000900,0x00000900,0x00000b00,0x00000b00,0x00000c00,0x00000c00,0x00000c00,0x00000e00,0x00000f00,0x00000f00,0x00001100,0x00001300,0x00001300,0x00001400,0x00001400,0x00001600,0x00001700,0x00001700,0x00001900,0x00001b00,0x00001c00,0x00001c00,0x00001e00,0x00001f00,0x00002100,0x00002100,
  0x00002400,0x00002400,0x00002700,0x00002700,0x00002900,0x00002b00,0x00002e00,0x00002e00,0x00002f00,0x00003100,0x00003300,0x00003400,0x00003600,0x00003700,0x00003a00,0x00003c00,0x00003c00,0x00003f00,0x00004100,0x00004200,0x00004400,0x00004700,0x00004900,0x00004a00,0x00004c00,0x00004f00,0x00005100,0x00005200,0x00005400,0x00005600,0x00005a00,0x00005c00,0x00005e00,0x00005f00,0x00006200,0x00006400,0x00006600,0x00006a00,0x00006c00,0x00006d00,0x00007100,0x00007200,0x00007500,
  0x00007700,0x00007a00,0x00007c00,0x00007f00,0x00008200,0x00008400,0x00008700,0x00008a00,0x00008d00,0x00008f00,0x00009200,0x00009500,0x00009900,0x00009c00,0x00009f00,0x0000a200,0x0000a200,0x0000a500,0x0000a800,0x0000ad00,0x0000b000,0x0000b400,0x0000b500,0x0000b800,0x0000bc00,0x0000bf00,0x0000c400,0x0000c500,0x0000c800,0x0000cc00,0x0000d000,0x0000d200,0x0000d500,0x0000da00,0x0000dd00,0x0000e000,0x0000e300,0x0000e800,0x0000ea00,0x0000ef00,0x0000f300,0x0000f500,0x0000fa00
  };
const PaletteConstFWD<sizeof(colors_rgb_BG_02) / sizeof(unsigned int)>   paletteBG_02(colors_rgb_BG_02);
const PaletteConstBWD<sizeof(colors_rgb_BG_02) / sizeof(unsigned int)>   paletteBG_02_inv(colors_rgb_BG_02);

const unsigned int colors_rgb_BG_03[] = { 
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000100,0x00000100,0x00000100,0x00000300,0x00000300,0x00000100,0x00000300,0x00000300,0x00000400,0x00000600,0x00000400,0x00000600,0x00000600,0x00000700,0x00000700,0x00000900,0x00000b00,0x00000900,0x00000b00,0x00000c00,0x00000c00,0x00000e00,0x00000f00,0x00000f00,0x00001100,0x00001100,0x00001400,
  0x00001400,0x00001600,0x00001700,0x00001900,0x00001b00,0x00001b00,0x00001c00,0x00001e00,0x00001f00,0x00002100,0x00002300,0x00002400,0x00002600,0x00002700,0x00002900,0x00002b00,0x00002c00,0x00002f00,0x00002f00,0x00003100,0x00003400,0x00003600,0x00003700,0x00003900,0x00003c00,0x00003e00,0x00003f00,0x00004100,0x00004400,0x00004700,0x00004900,0x00004a00,0x00004e00,0x00004f00,0x00005100,0x00005400,0x00005600,0x00005a00,0x00005c00,0x00005f00,0x00006100,0x00006400,0x00006700,
  0x00006900,0x00006c00,0x00006f00,0x00007100,0x00007400,0x00007500,0x00007900,0x00007c00,0x00007f00,0x00008200,0x00008500,0x00008900,0x00008c00,0x00008f00,0x00009200,0x00009500,0x00009900,0x00009c00,0x00009f00,0x0000a200,0x0000a700,0x0000a800,0x0000ad00,0x0000b000,0x0000b400,0x0000b700,0x0000bc00,0x0000bf00,0x0000c200,0x0000c500,0x0000ca00,0x0000cd00,0x0000d000,0x0000d500,0x0000d800,0x0000dd00,0x0000e000,0x0000e500,0x0000e800,0x0000ed00,0x0000f000,0x0000f500,0x0000f800
  };
const PaletteConstFWD<sizeof(colors_rgb_BG_03) / sizeof(unsigned int)>   paletteBG_03(colors_rgb_BG_03);
const PaletteConstBWD<sizeof(colors_rgb_BG_03) / sizeof(unsigned int)>   paletteBG_03_inv(colors_rgb_BG_03);

const unsigned int colors_rgb_BG_04[] = { 
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000100,0x00000100,0x00000100,0x00000300,0x00000100,0x00000300,0x00000300,0x00000400,0x00000600,0x00000600,0x00000600,
  0x00000700,0x00000700,0x00000900,0x00000b00,0x00000b00,0x00000c00,0x00000c00,0x00000e00,0x00000f00,0x00001100,0x00001300,0x00001300,0x00001600,0x00001600,0x00001700,0x00001900,0x00001b00,0x00001c00,0x00001e00,0x00001f00,0x00002300,0x00002300,0x00002400,0x00002700,0x00002900,0x00002b00,0x00002c00,0x00002f00,0x00003100,0x00003400,0x00003600,0x00003700,0x00003900,0x00003c00,0x00003f00,0x00004200,0x00004400,0x00004700,0x00004900,0x00004c00,0x00004f00,0x00005200,0x00005400,
  0x00005600,0x00005900,0x00005c00,0x00005f00,0x00006200,0x00006600,0x00006900,0x00006c00,0x00006f00,0x00007200,0x00007500,0x00007900,0x00007c00,0x00008100,0x00008400,0x00008700,0x00008a00,0x00008f00,0x00009200,0x00009500,0x00009900,0x00009d00,0x0000a000,0x0000a500,0x0000a800,0x0000ad00,0x0000b000,0x0000b500,0x0000b800,0x0000bd00,0x0000c200,0x0000c500,0x0000ca00,0x0000cf00,0x0000d200,0x0000d800,0x0000db00,0x0000e000,0x0000e700,0x0000ea00,0x0000ef00,0x0000f300,0x0000f800
  };
const PaletteConstFWD<sizeof(colors_rgb_BG_04) / sizeof(unsigned int)>   paletteBG_04(colors_rgb_BG_04);
const PaletteConstBWD<sizeof(colors_rgb_BG_04) / sizeof(unsigned int)>   paletteBG_04_inv(colors_rgb_BG_04);

const unsigned int colors_rgb_BG_05[] = { 
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000100,0x00000100,0x00000300,0x00000100,0x00000300,0x00000400,0x00000400,0x00000400,0x00000600,0x00000700,0x00000700,0x00000900,0x00000b00,0x00000c00,0x00000c00,0x00000f00,0x00000f00,0x00001300,0x00001300,0x00001400,0x00001700,0x00001900,0x00001a00,0x00001c00,0x00001f00,0x00002100,0x00002200,0x00002400,0x00002600,0x00002a00,0x00002c00,0x00002f00,0x00003100,0x00003400,0x00003700,0x00003900,0x00003c00,
  0x00003f00,0x00004000,0x00004400,0x00004700,0x00004c00,0x00004f00,0x00005000,0x00005500,0x00005800,0x00005b00,0x00005f00,0x00006300,0x00006600,0x00006b00,0x00006e00,0x00007200,0x00007600,0x00007b00,0x00007e00,0x00008300,0x00008600,0x00008b00,0x00009000,0x00009400,0x00009800,0x00009c00,0x0000a300,0x0000a600,0x0000ab00,0x0000af00,0x0000b400,0x0000b900,0x0000be00,0x0000c500,0x0000ca00,0x0000cf00,0x0000d400,0x0000d800,0x0000df00,0x0000e400,0x0000ea00,0x0000f000,0x0000f700
  };
const PaletteConstFWD<sizeof(colors_rgb_BG_05) / sizeof(unsigned int)>   paletteBG_05(colors_rgb_BG_05);
const PaletteConstBWD<sizeof(colors_rgb_BG_05) / sizeof(unsigned int)>   paletteBG_05_inv(colors_rgb_BG_05);

const unsigned int colors_rgb_BG_06[] = { 
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000100,0x00000100,0x00000300,0x00000300,0x00000400,0x00000400,0x00000600,0x00000700,0x00000900,0x00000b00,0x00000c00,0x00000c00,0x00000f00,0x00001100,0x00001300,0x00001400,0x00001700,0x00001900,0x00001c00,0x00001e00,0x00002100,
  0x00002400,0x00002700,0x00002900,0x00002d00,0x00002f00,0x00003200,0x00003500,0x00003a00,0x00003c00,0x00004000,0x00004400,0x00004800,0x00004c00,0x00005000,0x00005300,0x00005a00,0x00005d00,0x00006200,0x00006500,0x00006b00,0x00007000,0x00007500,0x00007900,0x00007e00,0x00008300,0x00008900,0x00008e00,0x00009400,0x00009b00,0x0000a100,0x0000a400,0x0000ac00,0x0000b200,0x0000b700,0x0000be00,0x0000c400,0x0000ca00,0x0000d100,0x0000d800,0x0000df00,0x0000e700,0x0000ed00,0x0000f300
  };
const PaletteConstFWD<sizeof(colors_rgb_BG_06) / sizeof(unsigned int)>   paletteBG_06(colors_rgb_BG_06);
const PaletteConstBWD<sizeof(colors_rgb_BG_06) / sizeof(unsigned int)>   paletteBG_06_inv(colors_rgb_BG_06);

const unsigned int colors_rgb_BG_07[] = { 
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000100,0x00000300,0x00000300,0x00000400,0x00000600,
  0x00000700,0x00000900,0x00000b00,0x00000c00,0x00000f00,0x00001200,0x00001600,0x00001700,0x00001a00,0x00001d00,0x00002200,0x00002400,0x00002800,0x00002c00,0x00003000,0x00003500,0x00003800,0x00003e00,0x00004300,0x00004800,0x00004e00,0x00005300,0x00005800,0x00005e00,0x00006400,0x00006b00,0x00007100,0x00007700,0x00007f00,0x00008500,0x00008d00,0x00009300,0x00009b00,0x0000a300,0x0000ab00,0x0000b300,0x0000bb00,0x0000c300,0x0000cc00,0x0000d600,0x0000dd00,0x0000e700,0x0000f000
  };
const PaletteConstFWD<sizeof(colors_rgb_BG_07) / sizeof(unsigned int)>   paletteBG_07(colors_rgb_BG_07);
const PaletteConstBWD<sizeof(colors_rgb_BG_07) / sizeof(unsigned int)>   paletteBG_07_inv(colors_rgb_BG_07);

const unsigned int colors_rgb_BG_08[] = { 
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000100,0x00000300,0x00000600,0x00000700,0x00000a00,0x00000c00,0x00000f00,0x00001400,0x00001800,0x00001b00,0x00002200,0x00002600,0x00002d00,0x00003300,0x00003b00,0x00004100,0x00004900,0x00005000,0x00005800,0x00006100,0x00006b00,0x00007300,0x00007f00,0x00008800,0x00009200,0x00009e00,0x0000ab00,0x0000b500,0x0000c200,0x0000ce00,0x0000db00,0x0000e900
  };
const PaletteConstFWD<sizeof(colors_rgb_BG_08) / sizeof(unsigned int)>   paletteBG_08(colors_rgb_BG_08);
const PaletteConstBWD<sizeof(colors_rgb_BG_08) / sizeof(unsigned int)>   paletteBG_08_inv(colors_rgb_BG_08);

const unsigned int colors_rgb_BG_09[] = { 
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000300,0x00000700,0x00000c00,0x00001200,0x00001b00,0x00002400,0x00003000,0x00003c00,0x00004900,0x00005a00,0x00006b00,0x00007d00,0x00009000,0x0000a700,0x0000be00,0x0000d600
  };
const PaletteConstFWD<sizeof(colors_rgb_BG_09) / sizeof(unsigned int)>   paletteBG_09(colors_rgb_BG_09);
const PaletteConstBWD<sizeof(colors_rgb_BG_09) / sizeof(unsigned int)>   paletteBG_09_inv(colors_rgb_BG_09);

const unsigned int colors_rgb_BY_02[] = { 
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000101,0x00000101,0x00000101,0x00000101,0x00000202,0x00000202,0x00000303,0x00000303,0x00000303,0x00000404,0x00000404,0x00000505,0x00000505,0x00000606,0x00000707,0x00000707,0x00000808,0x00000909,0x00000909,0x00000a0a,0x00000b0b,0x00000c0c,0x00000c0c,0x00000d0d,0x00000e0e,0x00001010,0x00001010,0x00001111,0x00001212,0x00001313,0x00001414,0x00001515,0x00001616,0x00001717,0x00001818,0x00001919,0x00001b1b,0x00001c1c,0x00001d1d,0x00001e1e,0x00002020,0x00002121,0x00002222,
  0x00002424,0x00002525,0x00002727,0x00002828,0x00002929,0x00002b2b,0x00002d2d,0x00002e2e,0x00003030,0x00003131,0x00003333,0x00003535,0x00003636,0x00003838,0x00003a3a,0x00003c3c,0x00003d3d,0x00004040,0x00004141,0x00004343,0x00004545,0x00004747,0x00004949,0x00004b4b,0x00004d4d,0x00005050,0x00005151,0x00005353,0x00005555,0x00005757,0x00005a5a,0x00005c5c,0x00005e5e,0x00006060,0x00006363,0x00006565,0x00006767,0x00006a6a,0x00006c6c,0x00006e6e,0x00007171,0x00007373,0x00007676,
  0x00007878,0x00007b7b,0x00007d7d,0x00008080,0x00008383,0x00008585,0x00008888,0x00008b8b,0x00008e8e,0x00009090,0x00009393,0x00009696,0x00009999,0x00009c9c,0x0000a0a0,0x0000a2a2,0x0000a4a4,0x0000a7a7,0x0000aaaa,0x0000aeae,0x0000b1b1,0x0000b4b4,0x0000b7b7,0x0000baba,0x0000bdbd,0x0000c0c0,0x0000c4c4,0x0000c7c7,0x0000caca,0x0000cdcd,0x0000d1d1,0x0000d4d4,0x0000d7d7,0x0000dbdb,0x0000dede,0x0000e2e2,0x0000e5e5,0x0000e9e9,0x0000ecec,0x0000f0f0,0x0000f4f4,0x0000f7f7,0x0000fbfb
  };
const PaletteConstFWD<sizeof(colors_rgb_BY_02) / sizeof(unsigned int)>   paletteBY_02(colors_rgb_BY_02);
const PaletteConstBWD<sizeof(colors_rgb_BY_02) / sizeof(unsigned int)>   paletteBY_02_inv(colors_rgb_BY_02);

const unsigned int colors_rgb_BY_03[] = { 
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000101,0x00000101,0x00000101,0x00000202,0x00000202,0x00000202,0x00000303,0x00000303,0x00000404,0x00000505,0x00000505,0x00000606,0x00000606,0x00000707,0x00000808,0x00000909,0x00000a0a,0x00000a0a,0x00000b0b,0x00000c0c,0x00000d0d,0x00000e0e,0x00001010,0x00001010,0x00001111,0x00001212,0x00001414,
  0x00001515,0x00001616,0x00001717,0x00001919,0x00001a1a,0x00001b1b,0x00001d1d,0x00001e1e,0x00002020,0x00002121,0x00002323,0x00002424,0x00002626,0x00002828,0x00002929,0x00002b2b,0x00002d2d,0x00003030,0x00003030,0x00003232,0x00003434,0x00003636,0x00003838,0x00003a3a,0x00003c3c,0x00003e3e,0x00004040,0x00004242,0x00004545,0x00004747,0x00004949,0x00004b4b,0x00004e4e,0x00005050,0x00005252,0x00005555,0x00005757,0x00005a5a,0x00005c5c,0x00006060,0x00006161,0x00006464,0x00006767,
  0x00006969,0x00006c6c,0x00007070,0x00007272,0x00007575,0x00007777,0x00007a7a,0x00007d7d,0x00008080,0x00008383,0x00008686,0x00008989,0x00008d8d,0x00009090,0x00009393,0x00009696,0x00009999,0x00009d9d,0x0000a0a0,0x0000a3a3,0x0000a7a7,0x0000aaaa,0x0000aeae,0x0000b1b1,0x0000b5b5,0x0000b8b8,0x0000bcbc,0x0000c0c0,0x0000c3c3,0x0000c7c7,0x0000cbcb,0x0000cece,0x0000d2d2,0x0000d6d6,0x0000dada,0x0000dede,0x0000e2e2,0x0000e6e6,0x0000eaea,0x0000eeee,0x0000f2f2,0x0000f6f6,0x0000fafa
  };
const PaletteConstFWD<sizeof(colors_rgb_BY_03) / sizeof(unsigned int)>   paletteBY_03(colors_rgb_BY_03);
const PaletteConstBWD<sizeof(colors_rgb_BY_03) / sizeof(unsigned int)>   paletteBY_03_inv(colors_rgb_BY_03);

const unsigned int colors_rgb_BY_04[] = { 
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000101,0x00000101,0x00000101,0x00000202,0x00000202,0x00000303,0x00000303,0x00000404,0x00000505,0x00000606,0x00000606,
  0x00000707,0x00000808,0x00000909,0x00000a0a,0x00000b0b,0x00000c0c,0x00000d0d,0x00000e0e,0x00001010,0x00001111,0x00001212,0x00001313,0x00001515,0x00001616,0x00001818,0x00001919,0x00001b1b,0x00001c1c,0x00001e1e,0x00002020,0x00002222,0x00002323,0x00002525,0x00002727,0x00002929,0x00002b2b,0x00002d2d,0x00003030,0x00003131,0x00003434,0x00003636,0x00003838,0x00003a3a,0x00003d3d,0x00004040,0x00004242,0x00004444,0x00004747,0x00004949,0x00004c4c,0x00005050,0x00005252,0x00005454,
  0x00005757,0x00005a5a,0x00005d5d,0x00006060,0x00006363,0x00006666,0x00006969,0x00006d6d,0x00007070,0x00007373,0x00007676,0x00007a7a,0x00007d7d,0x00008181,0x00008484,0x00008888,0x00008b8b,0x00009090,0x00009393,0x00009696,0x00009a9a,0x00009e9e,0x0000a2a2,0x0000a6a6,0x0000aaaa,0x0000aeae,0x0000b2b2,0x0000b6b6,0x0000baba,0x0000bebe,0x0000c3c3,0x0000c7c7,0x0000cbcb,0x0000d0d0,0x0000d4d4,0x0000d9d9,0x0000dddd,0x0000e2e2,0x0000e7e7,0x0000ebeb,0x0000f0f0,0x0000f5f5,0x0000fafa
  };
const PaletteConstFWD<sizeof(colors_rgb_BY_04) / sizeof(unsigned int)>   paletteBY_04(colors_rgb_BY_04);
const PaletteConstBWD<sizeof(colors_rgb_BY_04) / sizeof(unsigned int)>   paletteBY_04_inv(colors_rgb_BY_04);

const unsigned int colors_rgb_BY_05[] = { 
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000101,0x00000101,0x00000202,0x00000202,0x00000303,0x00000404,0x00000404,0x00000505,0x00000606,0x00000707,0x00000808,0x00000909,0x00000b0b,0x00000c0c,0x00000d0d,0x00001010,0x00001010,0x00001212,0x00001313,0x00001515,0x00001717,0x00001919,0x00001b1b,0x00001c1c,0x00002020,0x00002121,0x00002323,0x00002525,0x00002727,0x00002a2a,0x00002c2c,0x00003030,0x00003131,0x00003434,0x00003737,0x00003939,0x00003c3c,
  0x00004040,0x00004242,0x00004545,0x00004848,0x00004c4c,0x00005050,0x00005252,0x00005656,0x00005959,0x00005d5d,0x00006060,0x00006464,0x00006868,0x00006c6c,0x00007070,0x00007373,0x00007878,0x00007c7c,0x00008080,0x00008484,0x00008888,0x00008d8d,0x00009191,0x00009696,0x00009a9a,0x00009e9e,0x0000a4a4,0x0000a8a8,0x0000adad,0x0000b2b2,0x0000b7b7,0x0000bcbc,0x0000c1c1,0x0000c7c7,0x0000cccc,0x0000d1d1,0x0000d7d7,0x0000dcdc,0x0000e2e2,0x0000e7e7,0x0000eded,0x0000f3f3,0x0000f9f9
  };
const PaletteConstFWD<sizeof(colors_rgb_BY_05) / sizeof(unsigned int)>   paletteBY_05(colors_rgb_BY_05);
const PaletteConstBWD<sizeof(colors_rgb_BY_05) / sizeof(unsigned int)>   paletteBY_05_inv(colors_rgb_BY_05);

const unsigned int colors_rgb_BY_06[] = { 
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000101,0x00000101,0x00000202,0x00000303,0x00000404,0x00000505,0x00000606,0x00000707,0x00000909,0x00000a0a,0x00000c0c,0x00000d0d,0x00001010,0x00001111,0x00001313,0x00001515,0x00001717,0x00001919,0x00001c1c,0x00001e1e,0x00002121,
  0x00002424,0x00002727,0x00002929,0x00002d2d,0x00003030,0x00003333,0x00003636,0x00003a3a,0x00003d3d,0x00004141,0x00004545,0x00004949,0x00004d4d,0x00005151,0x00005555,0x00005a5a,0x00005e5e,0x00006363,0x00006767,0x00006c6c,0x00007171,0x00007676,0x00007b7b,0x00008080,0x00008585,0x00008b8b,0x00009090,0x00009696,0x00009c9c,0x0000a2a2,0x0000a7a7,0x0000aeae,0x0000b4b4,0x0000baba,0x0000c0c0,0x0000c7c7,0x0000cdcd,0x0000d4d4,0x0000dbdb,0x0000e2e2,0x0000e9e9,0x0000f0f0,0x0000f7f7
  };
const PaletteConstFWD<sizeof(colors_rgb_BY_06) / sizeof(unsigned int)>   paletteBY_06(colors_rgb_BY_06);
const PaletteConstBWD<sizeof(colors_rgb_BY_06) / sizeof(unsigned int)>   paletteBY_06_inv(colors_rgb_BY_06);

const unsigned int colors_rgb_BY_07[] = { 
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000101,0x00000202,0x00000303,0x00000404,0x00000606,
  0x00000707,0x00000909,0x00000b0b,0x00000d0d,0x00001010,0x00001212,0x00001515,0x00001818,0x00001b1b,0x00001e1e,0x00002222,0x00002525,0x00002929,0x00002d2d,0x00003131,0x00003636,0x00003a3a,0x00004040,0x00004444,0x00004949,0x00005050,0x00005454,0x00005a5a,0x00006060,0x00006666,0x00006d6d,0x00007373,0x00007a7a,0x00008181,0x00008888,0x00009090,0x00009696,0x00009e9e,0x0000a6a6,0x0000aeae,0x0000b6b6,0x0000bebe,0x0000c7c7,0x0000d0d0,0x0000d9d9,0x0000e2e2,0x0000ebeb,0x0000f5f5
  };
const PaletteConstFWD<sizeof(colors_rgb_BY_07) / sizeof(unsigned int)>   paletteBY_07(colors_rgb_BY_07);
const PaletteConstBWD<sizeof(colors_rgb_BY_07) / sizeof(unsigned int)>   paletteBY_07_inv(colors_rgb_BY_07);

const unsigned int colors_rgb_BY_08[] = { 
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000101,0x00000303,0x00000505,0x00000707,0x00000a0a,0x00000d0d,0x00001010,0x00001414,0x00001919,0x00001d1d,0x00002323,0x00002828,0x00002e2e,0x00003535,0x00003c3c,0x00004343,0x00004b4b,0x00005353,0x00005b5b,0x00006464,0x00006e6e,0x00007777,0x00008282,0x00008c8c,0x00009797,0x0000a3a3,0x0000b0b0,0x0000bbbb,0x0000c8c8,0x0000d5d5,0x0000e2e2,0x0000f0f0
  };
const PaletteConstFWD<sizeof(colors_rgb_BY_08) / sizeof(unsigned int)>   paletteBY_08(colors_rgb_BY_08);
const PaletteConstBWD<sizeof(colors_rgb_BY_08) / sizeof(unsigned int)>   paletteBY_08_inv(colors_rgb_BY_08);

const unsigned int colors_rgb_BY_09[] = { 
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000303,0x00000707,0x00000c0c,0x00001313,0x00001c1c,0x00002626,0x00003131,0x00003f3f,0x00004e4e,0x00005f5f,0x00007070,0x00008484,0x00009a9a,0x0000b0b0,0x0000c8c8,0x0000e2e2
  };
const PaletteConstFWD<sizeof(colors_rgb_BY_09) / sizeof(unsigned int)>   paletteBY_09(colors_rgb_BY_09);
const PaletteConstBWD<sizeof(colors_rgb_BY_09) / sizeof(unsigned int)>   paletteBY_09_inv(colors_rgb_BY_09);

/////////////////////////////   SuperSHP  //////////////////////////////////////////////////////


static const unsigned int colors_superblue_a_1[] = {
                                          0x00a2ecff, 0x00a4edff, 0x00a6eeff, 0x00a7f0ff, 0x00a9f1ff, 0x00abf2ff, 0x00adf3ff, 0x00aff5ff,
                                          0x00b1f6ff, 0x00b2f7ff, 0x00b4f8ff, 0x00b6faff, 0x00b8fbff, 0x00bafcff, 0x00bcfeff, 0x00beffff,
                                          0x00c0ffff, 0x00c2fefd, 0x00c5fefc, 0x00c7fdfb, 0x00c9fdfa, 0x00cbfcf9, 0x00cdfcf7, 0x00d0fcf6,
                                          0x00d2fbf5, 0x00d4fbf4, 0x00d6faf3, 0x00d8faf1, 0x00dbf9f0, 0x00ddf9ef, 0x00dff8ee, 0x00e1f8ed,
                                          0x00e3f7ec, 0x00e5f7ea, 0x00e8f6e9, 0x00eaf6e8, 0x00ecf6e7, 0x00eef5e6, 0x00f0f5e4, 0x00f3f4e3,
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dcc28d, 0x00dbc08b, 0x00dabe89, 0x00d9bc87, 0x00d8ba85, 0x00d7b983, 0x00d6b781,
                                          0x00d5b57f, 0x00d4b37d, 0x00d3b17b, 0x00d2af79, 0x00d1ad77, 0x00d0ab75, 0x00cfa973, 0x00cfa771,
                                          0x00cea56f, 0x00cda36d, 0x00cca16b, 0x00cb9f6a, 0x00c99d68, 0x00c89b66, 0x00c79964, 0x00c69762,
                                          0x00c59560, 0x00c4935e, 0x00c2915c, 0x00c18f5a, 0x00c08c58, 0x00bf8a56, 0x00be8854, 0x00bd8652,
                                          0x00bb8451, 0x00ba814f, 0x00b97f4d, 0x00b87d4b, 0x00b77b49, 0x00b57847, 0x00b47645, 0x00b37444,
                                          0x00b27243, 0x00b16f43, 0x00b06d42, 0x00ae6a41, 0x00ad6840, 0x00ac6640, 0x00ab633f, 0x00aa613e,
                                          0x00a95e3e, 0x00a75c3d, 0x00a6593c, 0x00a5573b, 0x00a4553b, 0x00a3523a, 0x00a24f39, 0x00a04d38,
                                          0x009f4a38, 0x009e4837, 0x009d4536, 0x009c4335, 0x009a4035, 0x00993d34, 0x00983b33, 0x00973833,
                                          0x00971a00, 0x00961900, 0x00951700, 0x00931600, 0x00921400, 0x00911200, 0x008f1100, 0x008e0f00,
                                          0x008d0e00, 0x008b0c00, 0x008a0a00, 0x00890900, 0x00870700, 0x00860600, 0x00850400, 0x00830200,
                                          0x00820100, 0x00810000, 0x007f0000, 0x007e0000, 0x007c0000, 0x007b0000, 0x007a0000, 0x00780000,
                                          0x00770000, 0x00760000, 0x00740000, 0x00730000, 0x00720000, 0x00700000, 0x006f0000, 0x006e0000,
                                          0x006c0000, 0x006b0000, 0x006a0000, 0x00680000, 0x00670000, 0x00660000, 0x00640000, 0x00630000,
                                          0x00610000, 0x00600000, 0x005f0000, 0x005d0000, 0x005c0000, 0x005b0000, 0x00590000, 0x00580000,
                                          0x00570000, 0x00550000, 0x00540000, 0x00530000, 0x00510000, 0x00500000, 0x004f0000, 0x004d0000,
                                          0x004c0000, 0x004a0000, 0x00490000, 0x00480000, 0x00460000, 0x00450000, 0x00440000, 0x00420000,
                                          0x00410000, 0x00400000, 0x003e0000, 0x003d0000, 0x003c0000, 0x003a0000, 0x00390000, 0x00380000,
                                          0x00360000, 0x00350000, 0x00340000, 0x00320000, 0x00310000, 0x002f0000, 0x002e0000, 0x002d0000,
                                          0x002b0000, 0x002a0000, 0x00290000, 0x00270000, 0x00260000, 0x00250000, 0x00230000, 0x00220000,
                                          0x00210000, 0x001f0000, 0x001e0000, 0x001d0000, 0x001b0000, 0x001a0000, 0x00180000, 0x00170000,
                                          0x00160000, 0x00140000, 0x00130000, 0x00120000, 0x00100000, 0x000f0000, 0x000e0000, 0x000c0000,
                                          0x000b0000, 0x000a0000, 0x00080000, 0x00070000, 0x00060000, 0x00040000, 0x00030000, 0x00020000
};

static const PaletteConstFWD<sizeof(colors_superblue_a_1) / sizeof(unsigned int)> palette_superblue_a_1(colors_superblue_a_1);
static const PaletteConstBWD<sizeof(colors_superblue_a_1) / sizeof(unsigned int)> palette_superblue_a_1_inv(colors_superblue_a_1);

static const unsigned int colors_superblue_a_2[] = {
                                          0x0093e1ff, 0x0095e3ff, 0x0097e4ff, 0x0099e5ff, 0x009be7ff, 0x009de8ff, 0x009ee9ff, 0x00a0ebff,
                                          0x00a2ecff, 0x00a4edff, 0x00a6eeff, 0x00a7f0ff, 0x00a9f1ff, 0x00abf2ff, 0x00adf3ff, 0x00aff5ff,
                                          0x00b1f6ff, 0x00b2f7ff, 0x00b4f8ff, 0x00b6faff, 0x00b8fbff, 0x00bafcff, 0x00bcfeff, 0x00beffff,
                                          0x00c0ffff, 0x00c2fefd, 0x00c5fefc, 0x00c7fdfb, 0x00c9fdfa, 0x00cbfcf9, 0x00cdfcf7, 0x00d0fcf6,
                                          0x00d2fbf5, 0x00d4fbf4, 0x00d6faf3, 0x00d8faf1, 0x00dbf9f0, 0x00ddf9ef, 0x00dff8ee, 0x00e1f8ed,
                                          0x00e3f7ec, 0x00e5f7ea, 0x00e8f6e9, 0x00eaf6e8, 0x00ecf6e7, 0x00eef5e6, 0x00f0f5e4, 0x00f3f4e3,
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dcc28d, 0x00dbc08b, 0x00dabe89, 0x00d9bc87, 0x00d8ba85, 0x00d7b983, 0x00d6b781,
                                          0x00d5b57f, 0x00d4b37d, 0x00d3b17b, 0x00d2af79, 0x00d1ad77, 0x00d0ab75, 0x00cfa973, 0x00cfa771,
                                          0x00cea56f, 0x00cda36d, 0x00cca16b, 0x00cb9f6a, 0x00c99d68, 0x00c89b66, 0x00c79964, 0x00c69762,
                                          0x00c59560, 0x00c4935e, 0x00c2915c, 0x00c18f5a, 0x00c08c58, 0x00bf8a56, 0x00be8854, 0x00bd8652,
                                          0x00bb8451, 0x00ba814f, 0x00b97f4d, 0x00b87d4b, 0x00b77b49, 0x00b57847, 0x00b47645, 0x00b37444,
                                          0x00b27243, 0x00b16f43, 0x00b06d42, 0x00ae6a41, 0x00ad6840, 0x00ac6640, 0x00ab633f, 0x00aa613e,
                                          0x00a95e3e, 0x00a75c3d, 0x00a6593c, 0x00a5573b, 0x00a4553b, 0x00a3523a, 0x00a24f39, 0x00a04d38,
                                          0x009f4a38, 0x009e4837, 0x009d4536, 0x009c4335, 0x009a4035, 0x00993d34, 0x00983b33, 0x00973833,
                                          0x00971a00, 0x00961900, 0x00951700, 0x00931600, 0x00921400, 0x00911200, 0x008f1100, 0x008e0f00,
                                          0x008d0e00, 0x008b0c00, 0x008a0a00, 0x00890900, 0x00870700, 0x00860600, 0x00850400, 0x00830200,
                                          0x00820100, 0x00810000, 0x007f0000, 0x007e0000, 0x007c0000, 0x007b0000, 0x007a0000, 0x00780000,
                                          0x00770000, 0x00760000, 0x00740000, 0x00730000, 0x00720000, 0x00700000, 0x006f0000, 0x006e0000,
                                          0x006c0000, 0x006b0000, 0x006a0000, 0x00680000, 0x00670000, 0x00660000, 0x00640000, 0x00630000,
                                          0x00610000, 0x00600000, 0x005f0000, 0x005d0000, 0x005c0000, 0x005b0000, 0x00590000, 0x00580000,
                                          0x00570000, 0x00550000, 0x00540000, 0x00530000, 0x00510000, 0x00500000, 0x004f0000, 0x004d0000,
                                          0x004c0000, 0x004a0000, 0x00490000, 0x00480000, 0x00460000, 0x00450000, 0x00440000, 0x00420000,
                                          0x00410000, 0x00400000, 0x003e0000, 0x003d0000, 0x003c0000, 0x003a0000, 0x00390000, 0x00380000,
                                          0x00360000, 0x00350000, 0x00340000, 0x00320000, 0x00310000, 0x002f0000, 0x002e0000, 0x002d0000,
                                          0x002b0000, 0x002a0000, 0x00290000, 0x00270000, 0x00260000, 0x00250000, 0x00230000, 0x00220000,
                                          0x00210000, 0x001f0000, 0x001e0000, 0x001d0000, 0x001b0000, 0x001a0000, 0x00180000, 0x00170000,
                                          0x00160000, 0x00140000, 0x00130000, 0x00120000, 0x00100000, 0x000f0000, 0x000e0000, 0x000c0000,
};

static const PaletteConstFWD<sizeof(colors_superblue_a_2) / sizeof(unsigned int)> palette_superblue_a_2(colors_superblue_a_2);
static const PaletteConstBWD<sizeof(colors_superblue_a_2) / sizeof(unsigned int)> palette_superblue_a_2_inv(colors_superblue_a_2);


static const unsigned int colors_superblue_a_3[] = {
                                          0x0085d5ff, 0x0087d6ff, 0x0089d8ff, 0x008ad9ff, 0x008cdbff, 0x008eddff, 0x0090deff, 0x0092e0ff,
                                          0x0093e1ff, 0x0095e3ff, 0x0097e4ff, 0x0099e5ff, 0x009be7ff, 0x009de8ff, 0x009ee9ff, 0x00a0ebff,
                                          0x00a2ecff, 0x00a4edff, 0x00a6eeff, 0x00a7f0ff, 0x00a9f1ff, 0x00abf2ff, 0x00adf3ff, 0x00aff5ff,
                                          0x00b1f6ff, 0x00b2f7ff, 0x00b4f8ff, 0x00b6faff, 0x00b8fbff, 0x00bafcff, 0x00bcfeff, 0x00beffff,
                                          0x00c0ffff, 0x00c2fefd, 0x00c5fefc, 0x00c7fdfb, 0x00c9fdfa, 0x00cbfcf9, 0x00cdfcf7, 0x00d0fcf6,
                                          0x00d2fbf5, 0x00d4fbf4, 0x00d6faf3, 0x00d8faf1, 0x00dbf9f0, 0x00ddf9ef, 0x00dff8ee, 0x00e1f8ed,
                                          0x00e3f7ec, 0x00e5f7ea, 0x00e8f6e9, 0x00eaf6e8, 0x00ecf6e7, 0x00eef5e6, 0x00f0f5e4, 0x00f3f4e3,
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dcc28d, 0x00dbc08b, 0x00dabe89, 0x00d9bc87, 0x00d8ba85, 0x00d7b983, 0x00d6b781,
                                          0x00d5b57f, 0x00d4b37d, 0x00d3b17b, 0x00d2af79, 0x00d1ad77, 0x00d0ab75, 0x00cfa973, 0x00cfa771,
                                          0x00cea56f, 0x00cda36d, 0x00cca16b, 0x00cb9f6a, 0x00c99d68, 0x00c89b66, 0x00c79964, 0x00c69762,
                                          0x00c59560, 0x00c4935e, 0x00c2915c, 0x00c18f5a, 0x00c08c58, 0x00bf8a56, 0x00be8854, 0x00bd8652,
                                          0x00bb8451, 0x00ba814f, 0x00b97f4d, 0x00b87d4b, 0x00b77b49, 0x00b57847, 0x00b47645, 0x00b37444,
                                          0x00b27243, 0x00b16f43, 0x00b06d42, 0x00ae6a41, 0x00ad6840, 0x00ac6640, 0x00ab633f, 0x00aa613e,
                                          0x00a95e3e, 0x00a75c3d, 0x00a6593c, 0x00a5573b, 0x00a4553b, 0x00a3523a, 0x00a24f39, 0x00a04d38,
                                          0x009f4a38, 0x009e4837, 0x009d4536, 0x009c4335, 0x009a4035, 0x00993d34, 0x00983b33, 0x00973833,
                                          0x00971a00, 0x00961900, 0x00951700, 0x00931600, 0x00921400, 0x00911200, 0x008f1100, 0x008e0f00,
                                          0x008d0e00, 0x008b0c00, 0x008a0a00, 0x00890900, 0x00870700, 0x00860600, 0x00850400, 0x00830200,
                                          0x00820100, 0x00810000, 0x007f0000, 0x007e0000, 0x007c0000, 0x007b0000, 0x007a0000, 0x00780000,
                                          0x00770000, 0x00760000, 0x00740000, 0x00730000, 0x00720000, 0x00700000, 0x006f0000, 0x006e0000,
                                          0x006c0000, 0x006b0000, 0x006a0000, 0x00680000, 0x00670000, 0x00660000, 0x00640000, 0x00630000,
                                          0x00610000, 0x00600000, 0x005f0000, 0x005d0000, 0x005c0000, 0x005b0000, 0x00590000, 0x00580000,
                                          0x00570000, 0x00550000, 0x00540000, 0x00530000, 0x00510000, 0x00500000, 0x004f0000, 0x004d0000,
                                          0x004c0000, 0x004a0000, 0x00490000, 0x00480000, 0x00460000, 0x00450000, 0x00440000, 0x00420000,
                                          0x00410000, 0x00400000, 0x003e0000, 0x003d0000, 0x003c0000, 0x003a0000, 0x00390000, 0x00380000,
                                          0x00360000, 0x00350000, 0x00340000, 0x00320000, 0x00310000, 0x002f0000, 0x002e0000, 0x002d0000,
                                          0x002b0000, 0x002a0000, 0x00290000, 0x00270000, 0x00260000, 0x00250000, 0x00230000, 0x00220000,
                                          0x00210000, 0x001f0000, 0x001e0000, 0x001d0000, 0x001b0000, 0x001a0000, 0x00180000, 0x00170000,
};

static const PaletteConstFWD<sizeof(colors_superblue_a_3) / sizeof(unsigned int)> palette_superblue_a_3(colors_superblue_a_3);
static const PaletteConstBWD<sizeof(colors_superblue_a_3) / sizeof(unsigned int)> palette_superblue_a_3_inv(colors_superblue_a_3);

static const unsigned int colors_superblue_a_4[] = {
                                          0x0076c6ff, 0x0078c8ff, 0x007acaff, 0x007cccff, 0x007ecdff, 0x007fcfff, 0x0081d1ff, 0x0083d3ff,
                                          0x0085d5ff, 0x0087d6ff, 0x0089d8ff, 0x008ad9ff, 0x008cdbff, 0x008eddff, 0x0090deff, 0x0092e0ff,
                                          0x0093e1ff, 0x0095e3ff, 0x0097e4ff, 0x0099e5ff, 0x009be7ff, 0x009de8ff, 0x009ee9ff, 0x00a0ebff,
                                          0x00a2ecff, 0x00a4edff, 0x00a6eeff, 0x00a7f0ff, 0x00a9f1ff, 0x00abf2ff, 0x00adf3ff, 0x00aff5ff,
                                          0x00b1f6ff, 0x00b2f7ff, 0x00b4f8ff, 0x00b6faff, 0x00b8fbff, 0x00bafcff, 0x00bcfeff, 0x00beffff,
                                          0x00c0ffff, 0x00c2fefd, 0x00c5fefc, 0x00c7fdfb, 0x00c9fdfa, 0x00cbfcf9, 0x00cdfcf7, 0x00d0fcf6,
                                          0x00d2fbf5, 0x00d4fbf4, 0x00d6faf3, 0x00d8faf1, 0x00dbf9f0, 0x00ddf9ef, 0x00dff8ee, 0x00e1f8ed,
                                          0x00e3f7ec, 0x00e5f7ea, 0x00e8f6e9, 0x00eaf6e8, 0x00ecf6e7, 0x00eef5e6, 0x00f0f5e4, 0x00f3f4e3,
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dcc28d, 0x00dbc08b, 0x00dabe89, 0x00d9bc87, 0x00d8ba85, 0x00d7b983, 0x00d6b781,
                                          0x00d5b57f, 0x00d4b37d, 0x00d3b17b, 0x00d2af79, 0x00d1ad77, 0x00d0ab75, 0x00cfa973, 0x00cfa771,
                                          0x00cea56f, 0x00cda36d, 0x00cca16b, 0x00cb9f6a, 0x00c99d68, 0x00c89b66, 0x00c79964, 0x00c69762,
                                          0x00c59560, 0x00c4935e, 0x00c2915c, 0x00c18f5a, 0x00c08c58, 0x00bf8a56, 0x00be8854, 0x00bd8652,
                                          0x00bb8451, 0x00ba814f, 0x00b97f4d, 0x00b87d4b, 0x00b77b49, 0x00b57847, 0x00b47645, 0x00b37444,
                                          0x00b27243, 0x00b16f43, 0x00b06d42, 0x00ae6a41, 0x00ad6840, 0x00ac6640, 0x00ab633f, 0x00aa613e,
                                          0x00a95e3e, 0x00a75c3d, 0x00a6593c, 0x00a5573b, 0x00a4553b, 0x00a3523a, 0x00a24f39, 0x00a04d38,
                                          0x009f4a38, 0x009e4837, 0x009d4536, 0x009c4335, 0x009a4035, 0x00993d34, 0x00983b33, 0x00973833,
                                          0x00971a00, 0x00961900, 0x00951700, 0x00931600, 0x00921400, 0x00911200, 0x008f1100, 0x008e0f00,
                                          0x008d0e00, 0x008b0c00, 0x008a0a00, 0x00890900, 0x00870700, 0x00860600, 0x00850400, 0x00830200,
                                          0x00820100, 0x00810000, 0x007f0000, 0x007e0000, 0x007c0000, 0x007b0000, 0x007a0000, 0x00780000,
                                          0x00770000, 0x00760000, 0x00740000, 0x00730000, 0x00720000, 0x00700000, 0x006f0000, 0x006e0000,
                                          0x006c0000, 0x006b0000, 0x006a0000, 0x00680000, 0x00670000, 0x00660000, 0x00640000, 0x00630000,
                                          0x00610000, 0x00600000, 0x005f0000, 0x005d0000, 0x005c0000, 0x005b0000, 0x00590000, 0x00580000,
                                          0x00570000, 0x00550000, 0x00540000, 0x00530000, 0x00510000, 0x00500000, 0x004f0000, 0x004d0000,
                                          0x004c0000, 0x004a0000, 0x00490000, 0x00480000, 0x00460000, 0x00450000, 0x00440000, 0x00420000,
                                          0x00410000, 0x00400000, 0x003e0000, 0x003d0000, 0x003c0000, 0x003a0000, 0x00390000, 0x00380000,
                                          0x00360000, 0x00350000, 0x00340000, 0x00320000, 0x00310000, 0x002f0000, 0x002e0000, 0x002d0000,
                                          0x002b0000, 0x002a0000, 0x00290000, 0x00270000, 0x00260000, 0x00250000, 0x00230000, 0x00220000,
};

static const PaletteConstFWD<sizeof(colors_superblue_a_4) / sizeof(unsigned int)> palette_superblue_a_4(colors_superblue_a_4);
static const PaletteConstBWD<sizeof(colors_superblue_a_4) / sizeof(unsigned int)> palette_superblue_a_4_inv(colors_superblue_a_4);


static const unsigned int colors_superblue_a_5[] = {
                                          0x0068b5ff, 0x006ab7ff, 0x006bb9ff, 0x006dbbff, 0x006fbeff, 0x0071c0ff, 0x0073c2ff, 0x0075c4ff,
                                          0x0076c6ff, 0x0078c8ff, 0x007acaff, 0x007cccff, 0x007ecdff, 0x007fcfff, 0x0081d1ff, 0x0083d3ff,
                                          0x0085d5ff, 0x0087d6ff, 0x0089d8ff, 0x008ad9ff, 0x008cdbff, 0x008eddff, 0x0090deff, 0x0092e0ff,
                                          0x0093e1ff, 0x0095e3ff, 0x0097e4ff, 0x0099e5ff, 0x009be7ff, 0x009de8ff, 0x009ee9ff, 0x00a0ebff,
                                          0x00a2ecff, 0x00a4edff, 0x00a6eeff, 0x00a7f0ff, 0x00a9f1ff, 0x00abf2ff, 0x00adf3ff, 0x00aff5ff,
                                          0x00b1f6ff, 0x00b2f7ff, 0x00b4f8ff, 0x00b6faff, 0x00b8fbff, 0x00bafcff, 0x00bcfeff, 0x00beffff,
                                          0x00c0ffff, 0x00c2fefd, 0x00c5fefc, 0x00c7fdfb, 0x00c9fdfa, 0x00cbfcf9, 0x00cdfcf7, 0x00d0fcf6,
                                          0x00d2fbf5, 0x00d4fbf4, 0x00d6faf3, 0x00d8faf1, 0x00dbf9f0, 0x00ddf9ef, 0x00dff8ee, 0x00e1f8ed,
                                          0x00e3f7ec, 0x00e5f7ea, 0x00e8f6e9, 0x00eaf6e8, 0x00ecf6e7, 0x00eef5e6, 0x00f0f5e4, 0x00f3f4e3,
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dcc28d, 0x00dbc08b, 0x00dabe89, 0x00d9bc87, 0x00d8ba85, 0x00d7b983, 0x00d6b781,
                                          0x00d5b57f, 0x00d4b37d, 0x00d3b17b, 0x00d2af79, 0x00d1ad77, 0x00d0ab75, 0x00cfa973, 0x00cfa771,
                                          0x00cea56f, 0x00cda36d, 0x00cca16b, 0x00cb9f6a, 0x00c99d68, 0x00c89b66, 0x00c79964, 0x00c69762,
                                          0x00c59560, 0x00c4935e, 0x00c2915c, 0x00c18f5a, 0x00c08c58, 0x00bf8a56, 0x00be8854, 0x00bd8652,
                                          0x00bb8451, 0x00ba814f, 0x00b97f4d, 0x00b87d4b, 0x00b77b49, 0x00b57847, 0x00b47645, 0x00b37444,
                                          0x00b27243, 0x00b16f43, 0x00b06d42, 0x00ae6a41, 0x00ad6840, 0x00ac6640, 0x00ab633f, 0x00aa613e,
                                          0x00a95e3e, 0x00a75c3d, 0x00a6593c, 0x00a5573b, 0x00a4553b, 0x00a3523a, 0x00a24f39, 0x00a04d38,
                                          0x009f4a38, 0x009e4837, 0x009d4536, 0x009c4335, 0x009a4035, 0x00993d34, 0x00983b33, 0x00973833,
                                          0x00971a00, 0x00961900, 0x00951700, 0x00931600, 0x00921400, 0x00911200, 0x008f1100, 0x008e0f00,
                                          0x008d0e00, 0x008b0c00, 0x008a0a00, 0x00890900, 0x00870700, 0x00860600, 0x00850400, 0x00830200,
                                          0x00820100, 0x00810000, 0x007f0000, 0x007e0000, 0x007c0000, 0x007b0000, 0x007a0000, 0x00780000,
                                          0x00770000, 0x00760000, 0x00740000, 0x00730000, 0x00720000, 0x00700000, 0x006f0000, 0x006e0000,
                                          0x006c0000, 0x006b0000, 0x006a0000, 0x00680000, 0x00670000, 0x00660000, 0x00640000, 0x00630000,
                                          0x00610000, 0x00600000, 0x005f0000, 0x005d0000, 0x005c0000, 0x005b0000, 0x00590000, 0x00580000,
                                          0x00570000, 0x00550000, 0x00540000, 0x00530000, 0x00510000, 0x00500000, 0x004f0000, 0x004d0000,
                                          0x004c0000, 0x004a0000, 0x00490000, 0x00480000, 0x00460000, 0x00450000, 0x00440000, 0x00420000,
                                          0x00410000, 0x00400000, 0x003e0000, 0x003d0000, 0x003c0000, 0x003a0000, 0x00390000, 0x00380000,
                                          0x00360000, 0x00350000, 0x00340000, 0x00320000, 0x00310000, 0x002f0000, 0x002e0000, 0x002d0000,
};

static const PaletteConstFWD<sizeof(colors_superblue_a_5) / sizeof(unsigned int)> palette_superblue_a_5(colors_superblue_a_5);
static const PaletteConstBWD<sizeof(colors_superblue_a_5) / sizeof(unsigned int)> palette_superblue_a_5_inv(colors_superblue_a_5);


static const unsigned int colors_superblue_a_6[] = {
                                          0x005ca2fc, 0x005da5fc, 0x005ea7fc, 0x005faafd, 0x0061acfd, 0x0062aefd, 0x0064b0fe, 0x0066b3fe,
                                          0x0068b5ff, 0x006ab7ff, 0x006bb9ff, 0x006dbbff, 0x006fbeff, 0x0071c0ff, 0x0073c2ff, 0x0075c4ff,
                                          0x0076c6ff, 0x0078c8ff, 0x007acaff, 0x007cccff, 0x007ecdff, 0x007fcfff, 0x0081d1ff, 0x0083d3ff,
                                          0x0085d5ff, 0x0087d6ff, 0x0089d8ff, 0x008ad9ff, 0x008cdbff, 0x008eddff, 0x0090deff, 0x0092e0ff,
                                          0x0093e1ff, 0x0095e3ff, 0x0097e4ff, 0x0099e5ff, 0x009be7ff, 0x009de8ff, 0x009ee9ff, 0x00a0ebff,
                                          0x00a2ecff, 0x00a4edff, 0x00a6eeff, 0x00a7f0ff, 0x00a9f1ff, 0x00abf2ff, 0x00adf3ff, 0x00aff5ff,
                                          0x00b1f6ff, 0x00b2f7ff, 0x00b4f8ff, 0x00b6faff, 0x00b8fbff, 0x00bafcff, 0x00bcfeff, 0x00beffff,
                                          0x00c0ffff, 0x00c2fefd, 0x00c5fefc, 0x00c7fdfb, 0x00c9fdfa, 0x00cbfcf9, 0x00cdfcf7, 0x00d0fcf6,
                                          0x00d2fbf5, 0x00d4fbf4, 0x00d6faf3, 0x00d8faf1, 0x00dbf9f0, 0x00ddf9ef, 0x00dff8ee, 0x00e1f8ed,
                                          0x00e3f7ec, 0x00e5f7ea, 0x00e8f6e9, 0x00eaf6e8, 0x00ecf6e7, 0x00eef5e6, 0x00f0f5e4, 0x00f3f4e3,
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dcc28d, 0x00dbc08b, 0x00dabe89, 0x00d9bc87, 0x00d8ba85, 0x00d7b983, 0x00d6b781,
                                          0x00d5b57f, 0x00d4b37d, 0x00d3b17b, 0x00d2af79, 0x00d1ad77, 0x00d0ab75, 0x00cfa973, 0x00cfa771,
                                          0x00cea56f, 0x00cda36d, 0x00cca16b, 0x00cb9f6a, 0x00c99d68, 0x00c89b66, 0x00c79964, 0x00c69762,
                                          0x00c59560, 0x00c4935e, 0x00c2915c, 0x00c18f5a, 0x00c08c58, 0x00bf8a56, 0x00be8854, 0x00bd8652,
                                          0x00bb8451, 0x00ba814f, 0x00b97f4d, 0x00b87d4b, 0x00b77b49, 0x00b57847, 0x00b47645, 0x00b37444,
                                          0x00b27243, 0x00b16f43, 0x00b06d42, 0x00ae6a41, 0x00ad6840, 0x00ac6640, 0x00ab633f, 0x00aa613e,
                                          0x00a95e3e, 0x00a75c3d, 0x00a6593c, 0x00a5573b, 0x00a4553b, 0x00a3523a, 0x00a24f39, 0x00a04d38,
                                          0x009f4a38, 0x009e4837, 0x009d4536, 0x009c4335, 0x009a4035, 0x00993d34, 0x00983b33, 0x00973833,
                                          0x00971a00, 0x00961900, 0x00951700, 0x00931600, 0x00921400, 0x00911200, 0x008f1100, 0x008e0f00,
                                          0x008d0e00, 0x008b0c00, 0x008a0a00, 0x00890900, 0x00870700, 0x00860600, 0x00850400, 0x00830200,
                                          0x00820100, 0x00810000, 0x007f0000, 0x007e0000, 0x007c0000, 0x007b0000, 0x007a0000, 0x00780000,
                                          0x00770000, 0x00760000, 0x00740000, 0x00730000, 0x00720000, 0x00700000, 0x006f0000, 0x006e0000,
                                          0x006c0000, 0x006b0000, 0x006a0000, 0x00680000, 0x00670000, 0x00660000, 0x00640000, 0x00630000,
                                          0x00610000, 0x00600000, 0x005f0000, 0x005d0000, 0x005c0000, 0x005b0000, 0x00590000, 0x00580000,
                                          0x00570000, 0x00550000, 0x00540000, 0x00530000, 0x00510000, 0x00500000, 0x004f0000, 0x004d0000,
                                          0x004c0000, 0x004a0000, 0x00490000, 0x00480000, 0x00460000, 0x00450000, 0x00440000, 0x00420000,
                                          0x00410000, 0x00400000, 0x003e0000, 0x003d0000, 0x003c0000, 0x003a0000, 0x00390000, 0x00380000,
};

static const PaletteConstFWD<sizeof(colors_superblue_a_6) / sizeof(unsigned int)> palette_superblue_a_6(colors_superblue_a_6);
static const PaletteConstBWD<sizeof(colors_superblue_a_6) / sizeof(unsigned int)> palette_superblue_a_6_inv(colors_superblue_a_6);


static const unsigned int colors_superblue_a_7[] = {
                                          0x00538ff9, 0x005491f9, 0x005594fa, 0x005696fa, 0x005799fa, 0x00589bfb, 0x00599efb, 0x005aa0fb,
                                          0x005ca2fc, 0x005da5fc, 0x005ea7fc, 0x005faafd, 0x0061acfd, 0x0062aefd, 0x0064b0fe, 0x0066b3fe,
                                          0x0068b5ff, 0x006ab7ff, 0x006bb9ff, 0x006dbbff, 0x006fbeff, 0x0071c0ff, 0x0073c2ff, 0x0075c4ff,
                                          0x0076c6ff, 0x0078c8ff, 0x007acaff, 0x007cccff, 0x007ecdff, 0x007fcfff, 0x0081d1ff, 0x0083d3ff,
                                          0x0085d5ff, 0x0087d6ff, 0x0089d8ff, 0x008ad9ff, 0x008cdbff, 0x008eddff, 0x0090deff, 0x0092e0ff,
                                          0x0093e1ff, 0x0095e3ff, 0x0097e4ff, 0x0099e5ff, 0x009be7ff, 0x009de8ff, 0x009ee9ff, 0x00a0ebff,
                                          0x00a2ecff, 0x00a4edff, 0x00a6eeff, 0x00a7f0ff, 0x00a9f1ff, 0x00abf2ff, 0x00adf3ff, 0x00aff5ff,
                                          0x00b1f6ff, 0x00b2f7ff, 0x00b4f8ff, 0x00b6faff, 0x00b8fbff, 0x00bafcff, 0x00bcfeff, 0x00beffff,
                                          0x00c0ffff, 0x00c2fefd, 0x00c5fefc, 0x00c7fdfb, 0x00c9fdfa, 0x00cbfcf9, 0x00cdfcf7, 0x00d0fcf6,
                                          0x00d2fbf5, 0x00d4fbf4, 0x00d6faf3, 0x00d8faf1, 0x00dbf9f0, 0x00ddf9ef, 0x00dff8ee, 0x00e1f8ed,
                                          0x00e3f7ec, 0x00e5f7ea, 0x00e8f6e9, 0x00eaf6e8, 0x00ecf6e7, 0x00eef5e6, 0x00f0f5e4, 0x00f3f4e3,
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dcc28d, 0x00dbc08b, 0x00dabe89, 0x00d9bc87, 0x00d8ba85, 0x00d7b983, 0x00d6b781,
                                          0x00d5b57f, 0x00d4b37d, 0x00d3b17b, 0x00d2af79, 0x00d1ad77, 0x00d0ab75, 0x00cfa973, 0x00cfa771,
                                          0x00cea56f, 0x00cda36d, 0x00cca16b, 0x00cb9f6a, 0x00c99d68, 0x00c89b66, 0x00c79964, 0x00c69762,
                                          0x00c59560, 0x00c4935e, 0x00c2915c, 0x00c18f5a, 0x00c08c58, 0x00bf8a56, 0x00be8854, 0x00bd8652,
                                          0x00bb8451, 0x00ba814f, 0x00b97f4d, 0x00b87d4b, 0x00b77b49, 0x00b57847, 0x00b47645, 0x00b37444,
                                          0x00b27243, 0x00b16f43, 0x00b06d42, 0x00ae6a41, 0x00ad6840, 0x00ac6640, 0x00ab633f, 0x00aa613e,
                                          0x00a95e3e, 0x00a75c3d, 0x00a6593c, 0x00a5573b, 0x00a4553b, 0x00a3523a, 0x00a24f39, 0x00a04d38,
                                          0x009f4a38, 0x009e4837, 0x009d4536, 0x009c4335, 0x009a4035, 0x00993d34, 0x00983b33, 0x00973833,
                                          0x00971a00, 0x00961900, 0x00951700, 0x00931600, 0x00921400, 0x00911200, 0x008f1100, 0x008e0f00,
                                          0x008d0e00, 0x008b0c00, 0x008a0a00, 0x00890900, 0x00870700, 0x00860600, 0x00850400, 0x00830200,
                                          0x00820100, 0x00810000, 0x007f0000, 0x007e0000, 0x007c0000, 0x007b0000, 0x007a0000, 0x00780000,
                                          0x00770000, 0x00760000, 0x00740000, 0x00730000, 0x00720000, 0x00700000, 0x006f0000, 0x006e0000,
                                          0x006c0000, 0x006b0000, 0x006a0000, 0x00680000, 0x00670000, 0x00660000, 0x00640000, 0x00630000,
                                          0x00610000, 0x00600000, 0x005f0000, 0x005d0000, 0x005c0000, 0x005b0000, 0x00590000, 0x00580000,
                                          0x00570000, 0x00550000, 0x00540000, 0x00530000, 0x00510000, 0x00500000, 0x004f0000, 0x004d0000,
                                          0x004c0000, 0x004a0000, 0x00490000, 0x00480000, 0x00460000, 0x00450000, 0x00440000, 0x00420000,
};

static const PaletteConstFWD<sizeof(colors_superblue_a_7) / sizeof(unsigned int)> palette_superblue_a_7(colors_superblue_a_7);
static const PaletteConstBWD<sizeof(colors_superblue_a_7) / sizeof(unsigned int)> palette_superblue_a_7_inv(colors_superblue_a_7);


static const unsigned int colors_superblue_a_8[] = {
                                          0x004a7af6, 0x004b7df6, 0x004c80f7, 0x004d82f7, 0x004e85f7, 0x004f87f8, 0x00508af8, 0x00518cf8,
                                          0x00538ff9, 0x005491f9, 0x005594fa, 0x005696fa, 0x005799fa, 0x00589bfb, 0x00599efb, 0x005aa0fb,
                                          0x005ca2fc, 0x005da5fc, 0x005ea7fc, 0x005faafd, 0x0061acfd, 0x0062aefd, 0x0064b0fe, 0x0066b3fe,
                                          0x0068b5ff, 0x006ab7ff, 0x006bb9ff, 0x006dbbff, 0x006fbeff, 0x0071c0ff, 0x0073c2ff, 0x0075c4ff,
                                          0x0076c6ff, 0x0078c8ff, 0x007acaff, 0x007cccff, 0x007ecdff, 0x007fcfff, 0x0081d1ff, 0x0083d3ff,
                                          0x0085d5ff, 0x0087d6ff, 0x0089d8ff, 0x008ad9ff, 0x008cdbff, 0x008eddff, 0x0090deff, 0x0092e0ff,
                                          0x0093e1ff, 0x0095e3ff, 0x0097e4ff, 0x0099e5ff, 0x009be7ff, 0x009de8ff, 0x009ee9ff, 0x00a0ebff,
                                          0x00a2ecff, 0x00a4edff, 0x00a6eeff, 0x00a7f0ff, 0x00a9f1ff, 0x00abf2ff, 0x00adf3ff, 0x00aff5ff,
                                          0x00b1f6ff, 0x00b2f7ff, 0x00b4f8ff, 0x00b6faff, 0x00b8fbff, 0x00bafcff, 0x00bcfeff, 0x00beffff,
                                          0x00c0ffff, 0x00c2fefd, 0x00c5fefc, 0x00c7fdfb, 0x00c9fdfa, 0x00cbfcf9, 0x00cdfcf7, 0x00d0fcf6,
                                          0x00d2fbf5, 0x00d4fbf4, 0x00d6faf3, 0x00d8faf1, 0x00dbf9f0, 0x00ddf9ef, 0x00dff8ee, 0x00e1f8ed,
                                          0x00e3f7ec, 0x00e5f7ea, 0x00e8f6e9, 0x00eaf6e8, 0x00ecf6e7, 0x00eef5e6, 0x00f0f5e4, 0x00f3f4e3,
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dcc28d, 0x00dbc08b, 0x00dabe89, 0x00d9bc87, 0x00d8ba85, 0x00d7b983, 0x00d6b781,
                                          0x00d5b57f, 0x00d4b37d, 0x00d3b17b, 0x00d2af79, 0x00d1ad77, 0x00d0ab75, 0x00cfa973, 0x00cfa771,
                                          0x00cea56f, 0x00cda36d, 0x00cca16b, 0x00cb9f6a, 0x00c99d68, 0x00c89b66, 0x00c79964, 0x00c69762,
                                          0x00c59560, 0x00c4935e, 0x00c2915c, 0x00c18f5a, 0x00c08c58, 0x00bf8a56, 0x00be8854, 0x00bd8652,
                                          0x00bb8451, 0x00ba814f, 0x00b97f4d, 0x00b87d4b, 0x00b77b49, 0x00b57847, 0x00b47645, 0x00b37444,
                                          0x00b27243, 0x00b16f43, 0x00b06d42, 0x00ae6a41, 0x00ad6840, 0x00ac6640, 0x00ab633f, 0x00aa613e,
                                          0x00a95e3e, 0x00a75c3d, 0x00a6593c, 0x00a5573b, 0x00a4553b, 0x00a3523a, 0x00a24f39, 0x00a04d38,
                                          0x009f4a38, 0x009e4837, 0x009d4536, 0x009c4335, 0x009a4035, 0x00993d34, 0x00983b33, 0x00973833,
                                          0x00971a00, 0x00961900, 0x00951700, 0x00931600, 0x00921400, 0x00911200, 0x008f1100, 0x008e0f00,
                                          0x008d0e00, 0x008b0c00, 0x008a0a00, 0x00890900, 0x00870700, 0x00860600, 0x00850400, 0x00830200,
                                          0x00820100, 0x00810000, 0x007f0000, 0x007e0000, 0x007c0000, 0x007b0000, 0x007a0000, 0x00780000,
                                          0x00770000, 0x00760000, 0x00740000, 0x00730000, 0x00720000, 0x00700000, 0x006f0000, 0x006e0000,
                                          0x006c0000, 0x006b0000, 0x006a0000, 0x00680000, 0x00670000, 0x00660000, 0x00640000, 0x00630000,
                                          0x00610000, 0x00600000, 0x005f0000, 0x005d0000, 0x005c0000, 0x005b0000, 0x00590000, 0x00580000,
                                          0x00570000, 0x00550000, 0x00540000, 0x00530000, 0x00510000, 0x00500000, 0x004f0000, 0x004d0000,
};

static const PaletteConstFWD<sizeof(colors_superblue_a_8) / sizeof(unsigned int)> palette_superblue_a_8(colors_superblue_a_8);
static const PaletteConstBWD<sizeof(colors_superblue_a_8) / sizeof(unsigned int)> palette_superblue_a_8_inv(colors_superblue_a_8);


static const unsigned int colors_superblue_a_9[] = {
                                          0x004166f1, 0x004269f2, 0x00436bf3, 0x00446ef4, 0x004570f4, 0x004673f5, 0x004775f5, 0x004878f6,
                                          0x004a7af6, 0x004b7df6, 0x004c80f7, 0x004d82f7, 0x004e85f7, 0x004f87f8, 0x00508af8, 0x00518cf8,
                                          0x00538ff9, 0x005491f9, 0x005594fa, 0x005696fa, 0x005799fa, 0x00589bfb, 0x00599efb, 0x005aa0fb,
                                          0x005ca2fc, 0x005da5fc, 0x005ea7fc, 0x005faafd, 0x0061acfd, 0x0062aefd, 0x0064b0fe, 0x0066b3fe,
                                          0x0068b5ff, 0x006ab7ff, 0x006bb9ff, 0x006dbbff, 0x006fbeff, 0x0071c0ff, 0x0073c2ff, 0x0075c4ff,
                                          0x0076c6ff, 0x0078c8ff, 0x007acaff, 0x007cccff, 0x007ecdff, 0x007fcfff, 0x0081d1ff, 0x0083d3ff,
                                          0x0085d5ff, 0x0087d6ff, 0x0089d8ff, 0x008ad9ff, 0x008cdbff, 0x008eddff, 0x0090deff, 0x0092e0ff,
                                          0x0093e1ff, 0x0095e3ff, 0x0097e4ff, 0x0099e5ff, 0x009be7ff, 0x009de8ff, 0x009ee9ff, 0x00a0ebff,
                                          0x00a2ecff, 0x00a4edff, 0x00a6eeff, 0x00a7f0ff, 0x00a9f1ff, 0x00abf2ff, 0x00adf3ff, 0x00aff5ff,
                                          0x00b1f6ff, 0x00b2f7ff, 0x00b4f8ff, 0x00b6faff, 0x00b8fbff, 0x00bafcff, 0x00bcfeff, 0x00beffff,
                                          0x00c0ffff, 0x00c2fefd, 0x00c5fefc, 0x00c7fdfb, 0x00c9fdfa, 0x00cbfcf9, 0x00cdfcf7, 0x00d0fcf6,
                                          0x00d2fbf5, 0x00d4fbf4, 0x00d6faf3, 0x00d8faf1, 0x00dbf9f0, 0x00ddf9ef, 0x00dff8ee, 0x00e1f8ed,
                                          0x00e3f7ec, 0x00e5f7ea, 0x00e8f6e9, 0x00eaf6e8, 0x00ecf6e7, 0x00eef5e6, 0x00f0f5e4, 0x00f3f4e3,
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dcc28d, 0x00dbc08b, 0x00dabe89, 0x00d9bc87, 0x00d8ba85, 0x00d7b983, 0x00d6b781,
                                          0x00d5b57f, 0x00d4b37d, 0x00d3b17b, 0x00d2af79, 0x00d1ad77, 0x00d0ab75, 0x00cfa973, 0x00cfa771,
                                          0x00cea56f, 0x00cda36d, 0x00cca16b, 0x00cb9f6a, 0x00c99d68, 0x00c89b66, 0x00c79964, 0x00c69762,
                                          0x00c59560, 0x00c4935e, 0x00c2915c, 0x00c18f5a, 0x00c08c58, 0x00bf8a56, 0x00be8854, 0x00bd8652,
                                          0x00bb8451, 0x00ba814f, 0x00b97f4d, 0x00b87d4b, 0x00b77b49, 0x00b57847, 0x00b47645, 0x00b37444,
                                          0x00b27243, 0x00b16f43, 0x00b06d42, 0x00ae6a41, 0x00ad6840, 0x00ac6640, 0x00ab633f, 0x00aa613e,
                                          0x00a95e3e, 0x00a75c3d, 0x00a6593c, 0x00a5573b, 0x00a4553b, 0x00a3523a, 0x00a24f39, 0x00a04d38,
                                          0x009f4a38, 0x009e4837, 0x009d4536, 0x009c4335, 0x009a4035, 0x00993d34, 0x00983b33, 0x00973833,
                                          0x00971a00, 0x00961900, 0x00951700, 0x00931600, 0x00921400, 0x00911200, 0x008f1100, 0x008e0f00,
                                          0x008d0e00, 0x008b0c00, 0x008a0a00, 0x00890900, 0x00870700, 0x00860600, 0x00850400, 0x00830200,
                                          0x00820100, 0x00810000, 0x007f0000, 0x007e0000, 0x007c0000, 0x007b0000, 0x007a0000, 0x00780000,
                                          0x00770000, 0x00760000, 0x00740000, 0x00730000, 0x00720000, 0x00700000, 0x006f0000, 0x006e0000,
                                          0x006c0000, 0x006b0000, 0x006a0000, 0x00680000, 0x00670000, 0x00660000, 0x00640000, 0x00630000,
                                          0x00610000, 0x00600000, 0x005f0000, 0x005d0000, 0x005c0000, 0x005b0000, 0x00590000, 0x00580000,
};

static const PaletteConstFWD<sizeof(colors_superblue_a_9) / sizeof(unsigned int)> palette_superblue_a_9(colors_superblue_a_9);
static const PaletteConstBWD<sizeof(colors_superblue_a_9) / sizeof(unsigned int)> palette_superblue_a_9_inv(colors_superblue_a_9);


static const unsigned int colors_superblue_a_10[] = {
                                          0x003853e8, 0x003955e9, 0x003a58ea, 0x003b5aeb, 0x003c5ded, 0x003d5fee, 0x003e61ef, 0x004064f0,
                                          0x004166f1, 0x004269f2, 0x00436bf3, 0x00446ef4, 0x004570f4, 0x004673f5, 0x004775f5, 0x004878f6,
                                          0x004a7af6, 0x004b7df6, 0x004c80f7, 0x004d82f7, 0x004e85f7, 0x004f87f8, 0x00508af8, 0x00518cf8,
                                          0x00538ff9, 0x005491f9, 0x005594fa, 0x005696fa, 0x005799fa, 0x00589bfb, 0x00599efb, 0x005aa0fb,
                                          0x005ca2fc, 0x005da5fc, 0x005ea7fc, 0x005faafd, 0x0061acfd, 0x0062aefd, 0x0064b0fe, 0x0066b3fe,
                                          0x0068b5ff, 0x006ab7ff, 0x006bb9ff, 0x006dbbff, 0x006fbeff, 0x0071c0ff, 0x0073c2ff, 0x0075c4ff,
                                          0x0076c6ff, 0x0078c8ff, 0x007acaff, 0x007cccff, 0x007ecdff, 0x007fcfff, 0x0081d1ff, 0x0083d3ff,
                                          0x0085d5ff, 0x0087d6ff, 0x0089d8ff, 0x008ad9ff, 0x008cdbff, 0x008eddff, 0x0090deff, 0x0092e0ff,
                                          0x0093e1ff, 0x0095e3ff, 0x0097e4ff, 0x0099e5ff, 0x009be7ff, 0x009de8ff, 0x009ee9ff, 0x00a0ebff,
                                          0x00a2ecff, 0x00a4edff, 0x00a6eeff, 0x00a7f0ff, 0x00a9f1ff, 0x00abf2ff, 0x00adf3ff, 0x00aff5ff,
                                          0x00b1f6ff, 0x00b2f7ff, 0x00b4f8ff, 0x00b6faff, 0x00b8fbff, 0x00bafcff, 0x00bcfeff, 0x00beffff,
                                          0x00c0ffff, 0x00c2fefd, 0x00c5fefc, 0x00c7fdfb, 0x00c9fdfa, 0x00cbfcf9, 0x00cdfcf7, 0x00d0fcf6,
                                          0x00d2fbf5, 0x00d4fbf4, 0x00d6faf3, 0x00d8faf1, 0x00dbf9f0, 0x00ddf9ef, 0x00dff8ee, 0x00e1f8ed,
                                          0x00e3f7ec, 0x00e5f7ea, 0x00e8f6e9, 0x00eaf6e8, 0x00ecf6e7, 0x00eef5e6, 0x00f0f5e4, 0x00f3f4e3,
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dcc28d, 0x00dbc08b, 0x00dabe89, 0x00d9bc87, 0x00d8ba85, 0x00d7b983, 0x00d6b781,
                                          0x00d5b57f, 0x00d4b37d, 0x00d3b17b, 0x00d2af79, 0x00d1ad77, 0x00d0ab75, 0x00cfa973, 0x00cfa771,
                                          0x00cea56f, 0x00cda36d, 0x00cca16b, 0x00cb9f6a, 0x00c99d68, 0x00c89b66, 0x00c79964, 0x00c69762,
                                          0x00c59560, 0x00c4935e, 0x00c2915c, 0x00c18f5a, 0x00c08c58, 0x00bf8a56, 0x00be8854, 0x00bd8652,
                                          0x00bb8451, 0x00ba814f, 0x00b97f4d, 0x00b87d4b, 0x00b77b49, 0x00b57847, 0x00b47645, 0x00b37444,
                                          0x00b27243, 0x00b16f43, 0x00b06d42, 0x00ae6a41, 0x00ad6840, 0x00ac6640, 0x00ab633f, 0x00aa613e,
                                          0x00a95e3e, 0x00a75c3d, 0x00a6593c, 0x00a5573b, 0x00a4553b, 0x00a3523a, 0x00a24f39, 0x00a04d38,
                                          0x009f4a38, 0x009e4837, 0x009d4536, 0x009c4335, 0x009a4035, 0x00993d34, 0x00983b33, 0x00973833,
                                          0x00971a00, 0x00961900, 0x00951700, 0x00931600, 0x00921400, 0x00911200, 0x008f1100, 0x008e0f00,
                                          0x008d0e00, 0x008b0c00, 0x008a0a00, 0x00890900, 0x00870700, 0x00860600, 0x00850400, 0x00830200,
                                          0x00820100, 0x00810000, 0x007f0000, 0x007e0000, 0x007c0000, 0x007b0000, 0x007a0000, 0x00780000,
                                          0x00770000, 0x00760000, 0x00740000, 0x00730000, 0x00720000, 0x00700000, 0x006f0000, 0x006e0000,
                                          0x006c0000, 0x006b0000, 0x006a0000, 0x00680000, 0x00670000, 0x00660000, 0x00640000, 0x00630000,
};

static const PaletteConstFWD<sizeof(colors_superblue_a_10) / sizeof(unsigned int)> palette_superblue_a_10(colors_superblue_a_10);
static const PaletteConstBWD<sizeof(colors_superblue_a_10) / sizeof(unsigned int)> palette_superblue_a_10_inv(colors_superblue_a_10);


static const unsigned int colors_superblue_a_11[] = {
                                          0x002f40df, 0x003043e0, 0x003145e1, 0x003247e3, 0x00334ae4, 0x00344ce5, 0x00354ee6, 0x003751e7,
                                          0x003853e8, 0x003955e9, 0x003a58ea, 0x003b5aeb, 0x003c5ded, 0x003d5fee, 0x003e61ef, 0x004064f0,
                                          0x004166f1, 0x004269f2, 0x00436bf3, 0x00446ef4, 0x004570f4, 0x004673f5, 0x004775f5, 0x004878f6,
                                          0x004a7af6, 0x004b7df6, 0x004c80f7, 0x004d82f7, 0x004e85f7, 0x004f87f8, 0x00508af8, 0x00518cf8,
                                          0x00538ff9, 0x005491f9, 0x005594fa, 0x005696fa, 0x005799fa, 0x00589bfb, 0x00599efb, 0x005aa0fb,
                                          0x005ca2fc, 0x005da5fc, 0x005ea7fc, 0x005faafd, 0x0061acfd, 0x0062aefd, 0x0064b0fe, 0x0066b3fe,
                                          0x0068b5ff, 0x006ab7ff, 0x006bb9ff, 0x006dbbff, 0x006fbeff, 0x0071c0ff, 0x0073c2ff, 0x0075c4ff,
                                          0x0076c6ff, 0x0078c8ff, 0x007acaff, 0x007cccff, 0x007ecdff, 0x007fcfff, 0x0081d1ff, 0x0083d3ff,
                                          0x0085d5ff, 0x0087d6ff, 0x0089d8ff, 0x008ad9ff, 0x008cdbff, 0x008eddff, 0x0090deff, 0x0092e0ff,
                                          0x0093e1ff, 0x0095e3ff, 0x0097e4ff, 0x0099e5ff, 0x009be7ff, 0x009de8ff, 0x009ee9ff, 0x00a0ebff,
                                          0x00a2ecff, 0x00a4edff, 0x00a6eeff, 0x00a7f0ff, 0x00a9f1ff, 0x00abf2ff, 0x00adf3ff, 0x00aff5ff,
                                          0x00b1f6ff, 0x00b2f7ff, 0x00b4f8ff, 0x00b6faff, 0x00b8fbff, 0x00bafcff, 0x00bcfeff, 0x00beffff,
                                          0x00c0ffff, 0x00c2fefd, 0x00c5fefc, 0x00c7fdfb, 0x00c9fdfa, 0x00cbfcf9, 0x00cdfcf7, 0x00d0fcf6,
                                          0x00d2fbf5, 0x00d4fbf4, 0x00d6faf3, 0x00d8faf1, 0x00dbf9f0, 0x00ddf9ef, 0x00dff8ee, 0x00e1f8ed,
                                          0x00e3f7ec, 0x00e5f7ea, 0x00e8f6e9, 0x00eaf6e8, 0x00ecf6e7, 0x00eef5e6, 0x00f0f5e4, 0x00f3f4e3,
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dcc28d, 0x00dbc08b, 0x00dabe89, 0x00d9bc87, 0x00d8ba85, 0x00d7b983, 0x00d6b781,
                                          0x00d5b57f, 0x00d4b37d, 0x00d3b17b, 0x00d2af79, 0x00d1ad77, 0x00d0ab75, 0x00cfa973, 0x00cfa771,
                                          0x00cea56f, 0x00cda36d, 0x00cca16b, 0x00cb9f6a, 0x00c99d68, 0x00c89b66, 0x00c79964, 0x00c69762,
                                          0x00c59560, 0x00c4935e, 0x00c2915c, 0x00c18f5a, 0x00c08c58, 0x00bf8a56, 0x00be8854, 0x00bd8652,
                                          0x00bb8451, 0x00ba814f, 0x00b97f4d, 0x00b87d4b, 0x00b77b49, 0x00b57847, 0x00b47645, 0x00b37444,
                                          0x00b27243, 0x00b16f43, 0x00b06d42, 0x00ae6a41, 0x00ad6840, 0x00ac6640, 0x00ab633f, 0x00aa613e,
                                          0x00a95e3e, 0x00a75c3d, 0x00a6593c, 0x00a5573b, 0x00a4553b, 0x00a3523a, 0x00a24f39, 0x00a04d38,
                                          0x009f4a38, 0x009e4837, 0x009d4536, 0x009c4335, 0x009a4035, 0x00993d34, 0x00983b33, 0x00973833,
                                          0x00971a00, 0x00961900, 0x00951700, 0x00931600, 0x00921400, 0x00911200, 0x008f1100, 0x008e0f00,
                                          0x008d0e00, 0x008b0c00, 0x008a0a00, 0x00890900, 0x00870700, 0x00860600, 0x00850400, 0x00830200,
                                          0x00820100, 0x00810000, 0x007f0000, 0x007e0000, 0x007c0000, 0x007b0000, 0x007a0000, 0x00780000,
                                          0x00770000, 0x00760000, 0x00740000, 0x00730000, 0x00720000, 0x00700000, 0x006f0000, 0x006e0000,
};

static const PaletteConstFWD<sizeof(colors_superblue_a_11) / sizeof(unsigned int)> palette_superblue_a_11(colors_superblue_a_11);
static const PaletteConstBWD<sizeof(colors_superblue_a_11) / sizeof(unsigned int)> palette_superblue_a_11_inv(colors_superblue_a_11);


static const unsigned int colors_superblue_a_12[] = {
                                          0x00272fd6, 0x002731d7, 0x002833d9, 0x002935da, 0x002a37db, 0x002b3adc, 0x002c3cdd, 0x002e3ede,
                                          0x002f40df, 0x003043e0, 0x003145e1, 0x003247e3, 0x00334ae4, 0x00344ce5, 0x00354ee6, 0x003751e7,
                                          0x003853e8, 0x003955e9, 0x003a58ea, 0x003b5aeb, 0x003c5ded, 0x003d5fee, 0x003e61ef, 0x004064f0,
                                          0x004166f1, 0x004269f2, 0x00436bf3, 0x00446ef4, 0x004570f4, 0x004673f5, 0x004775f5, 0x004878f6,
                                          0x004a7af6, 0x004b7df6, 0x004c80f7, 0x004d82f7, 0x004e85f7, 0x004f87f8, 0x00508af8, 0x00518cf8,
                                          0x00538ff9, 0x005491f9, 0x005594fa, 0x005696fa, 0x005799fa, 0x00589bfb, 0x00599efb, 0x005aa0fb,
                                          0x005ca2fc, 0x005da5fc, 0x005ea7fc, 0x005faafd, 0x0061acfd, 0x0062aefd, 0x0064b0fe, 0x0066b3fe,
                                          0x0068b5ff, 0x006ab7ff, 0x006bb9ff, 0x006dbbff, 0x006fbeff, 0x0071c0ff, 0x0073c2ff, 0x0075c4ff,
                                          0x0076c6ff, 0x0078c8ff, 0x007acaff, 0x007cccff, 0x007ecdff, 0x007fcfff, 0x0081d1ff, 0x0083d3ff,
                                          0x0085d5ff, 0x0087d6ff, 0x0089d8ff, 0x008ad9ff, 0x008cdbff, 0x008eddff, 0x0090deff, 0x0092e0ff,
                                          0x0093e1ff, 0x0095e3ff, 0x0097e4ff, 0x0099e5ff, 0x009be7ff, 0x009de8ff, 0x009ee9ff, 0x00a0ebff,
                                          0x00a2ecff, 0x00a4edff, 0x00a6eeff, 0x00a7f0ff, 0x00a9f1ff, 0x00abf2ff, 0x00adf3ff, 0x00aff5ff,
                                          0x00b1f6ff, 0x00b2f7ff, 0x00b4f8ff, 0x00b6faff, 0x00b8fbff, 0x00bafcff, 0x00bcfeff, 0x00beffff,
                                          0x00c0ffff, 0x00c2fefd, 0x00c5fefc, 0x00c7fdfb, 0x00c9fdfa, 0x00cbfcf9, 0x00cdfcf7, 0x00d0fcf6,
                                          0x00d2fbf5, 0x00d4fbf4, 0x00d6faf3, 0x00d8faf1, 0x00dbf9f0, 0x00ddf9ef, 0x00dff8ee, 0x00e1f8ed,
                                          0x00e3f7ec, 0x00e5f7ea, 0x00e8f6e9, 0x00eaf6e8, 0x00ecf6e7, 0x00eef5e6, 0x00f0f5e4, 0x00f3f4e3,
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dcc28d, 0x00dbc08b, 0x00dabe89, 0x00d9bc87, 0x00d8ba85, 0x00d7b983, 0x00d6b781,
                                          0x00d5b57f, 0x00d4b37d, 0x00d3b17b, 0x00d2af79, 0x00d1ad77, 0x00d0ab75, 0x00cfa973, 0x00cfa771,
                                          0x00cea56f, 0x00cda36d, 0x00cca16b, 0x00cb9f6a, 0x00c99d68, 0x00c89b66, 0x00c79964, 0x00c69762,
                                          0x00c59560, 0x00c4935e, 0x00c2915c, 0x00c18f5a, 0x00c08c58, 0x00bf8a56, 0x00be8854, 0x00bd8652,
                                          0x00bb8451, 0x00ba814f, 0x00b97f4d, 0x00b87d4b, 0x00b77b49, 0x00b57847, 0x00b47645, 0x00b37444,
                                          0x00b27243, 0x00b16f43, 0x00b06d42, 0x00ae6a41, 0x00ad6840, 0x00ac6640, 0x00ab633f, 0x00aa613e,
                                          0x00a95e3e, 0x00a75c3d, 0x00a6593c, 0x00a5573b, 0x00a4553b, 0x00a3523a, 0x00a24f39, 0x00a04d38,
                                          0x009f4a38, 0x009e4837, 0x009d4536, 0x009c4335, 0x009a4035, 0x00993d34, 0x00983b33, 0x00973833,
                                          0x00971a00, 0x00961900, 0x00951700, 0x00931600, 0x00921400, 0x00911200, 0x008f1100, 0x008e0f00,
                                          0x008d0e00, 0x008b0c00, 0x008a0a00, 0x00890900, 0x00870700, 0x00860600, 0x00850400, 0x00830200,
                                          0x00820100, 0x00810000, 0x007f0000, 0x007e0000, 0x007c0000, 0x007b0000, 0x007a0000, 0x00780000,
};

static const PaletteConstFWD<sizeof(colors_superblue_a_12) / sizeof(unsigned int)> palette_superblue_a_12(colors_superblue_a_12);
static const PaletteConstBWD<sizeof(colors_superblue_a_12) / sizeof(unsigned int)> palette_superblue_a_12_inv(colors_superblue_a_12);


static const unsigned int colors_superblue_a_13[] = {
                                          0x00261fc6, 0x002621c8, 0x002623ca, 0x002725cc, 0x002727ce, 0x002729d0, 0x00272bd2, 0x00272dd4,
                                          0x00272fd6, 0x002731d7, 0x002833d9, 0x002935da, 0x002a37db, 0x002b3adc, 0x002c3cdd, 0x002e3ede,
                                          0x002f40df, 0x003043e0, 0x003145e1, 0x003247e3, 0x00334ae4, 0x00344ce5, 0x00354ee6, 0x003751e7,
                                          0x003853e8, 0x003955e9, 0x003a58ea, 0x003b5aeb, 0x003c5ded, 0x003d5fee, 0x003e61ef, 0x004064f0,
                                          0x004166f1, 0x004269f2, 0x00436bf3, 0x00446ef4, 0x004570f4, 0x004673f5, 0x004775f5, 0x004878f6,
                                          0x004a7af6, 0x004b7df6, 0x004c80f7, 0x004d82f7, 0x004e85f7, 0x004f87f8, 0x00508af8, 0x00518cf8,
                                          0x00538ff9, 0x005491f9, 0x005594fa, 0x005696fa, 0x005799fa, 0x00589bfb, 0x00599efb, 0x005aa0fb,
                                          0x005ca2fc, 0x005da5fc, 0x005ea7fc, 0x005faafd, 0x0061acfd, 0x0062aefd, 0x0064b0fe, 0x0066b3fe,
                                          0x0068b5ff, 0x006ab7ff, 0x006bb9ff, 0x006dbbff, 0x006fbeff, 0x0071c0ff, 0x0073c2ff, 0x0075c4ff,
                                          0x0076c6ff, 0x0078c8ff, 0x007acaff, 0x007cccff, 0x007ecdff, 0x007fcfff, 0x0081d1ff, 0x0083d3ff,
                                          0x0085d5ff, 0x0087d6ff, 0x0089d8ff, 0x008ad9ff, 0x008cdbff, 0x008eddff, 0x0090deff, 0x0092e0ff,
                                          0x0093e1ff, 0x0095e3ff, 0x0097e4ff, 0x0099e5ff, 0x009be7ff, 0x009de8ff, 0x009ee9ff, 0x00a0ebff,
                                          0x00a2ecff, 0x00a4edff, 0x00a6eeff, 0x00a7f0ff, 0x00a9f1ff, 0x00abf2ff, 0x00adf3ff, 0x00aff5ff,
                                          0x00b1f6ff, 0x00b2f7ff, 0x00b4f8ff, 0x00b6faff, 0x00b8fbff, 0x00bafcff, 0x00bcfeff, 0x00beffff,
                                          0x00c0ffff, 0x00c2fefd, 0x00c5fefc, 0x00c7fdfb, 0x00c9fdfa, 0x00cbfcf9, 0x00cdfcf7, 0x00d0fcf6,
                                          0x00d2fbf5, 0x00d4fbf4, 0x00d6faf3, 0x00d8faf1, 0x00dbf9f0, 0x00ddf9ef, 0x00dff8ee, 0x00e1f8ed,
                                          0x00e3f7ec, 0x00e5f7ea, 0x00e8f6e9, 0x00eaf6e8, 0x00ecf6e7, 0x00eef5e6, 0x00f0f5e4, 0x00f3f4e3,
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dcc28d, 0x00dbc08b, 0x00dabe89, 0x00d9bc87, 0x00d8ba85, 0x00d7b983, 0x00d6b781,
                                          0x00d5b57f, 0x00d4b37d, 0x00d3b17b, 0x00d2af79, 0x00d1ad77, 0x00d0ab75, 0x00cfa973, 0x00cfa771,
                                          0x00cea56f, 0x00cda36d, 0x00cca16b, 0x00cb9f6a, 0x00c99d68, 0x00c89b66, 0x00c79964, 0x00c69762,
                                          0x00c59560, 0x00c4935e, 0x00c2915c, 0x00c18f5a, 0x00c08c58, 0x00bf8a56, 0x00be8854, 0x00bd8652,
                                          0x00bb8451, 0x00ba814f, 0x00b97f4d, 0x00b87d4b, 0x00b77b49, 0x00b57847, 0x00b47645, 0x00b37444,
                                          0x00b27243, 0x00b16f43, 0x00b06d42, 0x00ae6a41, 0x00ad6840, 0x00ac6640, 0x00ab633f, 0x00aa613e,
                                          0x00a95e3e, 0x00a75c3d, 0x00a6593c, 0x00a5573b, 0x00a4553b, 0x00a3523a, 0x00a24f39, 0x00a04d38,
                                          0x009f4a38, 0x009e4837, 0x009d4536, 0x009c4335, 0x009a4035, 0x00993d34, 0x00983b33, 0x00973833,
                                          0x00971a00, 0x00961900, 0x00951700, 0x00931600, 0x00921400, 0x00911200, 0x008f1100, 0x008e0f00,
                                          0x008d0e00, 0x008b0c00, 0x008a0a00, 0x00890900, 0x00870700, 0x00860600, 0x00850400, 0x00830200,
};

static const PaletteConstFWD<sizeof(colors_superblue_a_13) / sizeof(unsigned int)> palette_superblue_a_13(colors_superblue_a_13);
static const PaletteConstBWD<sizeof(colors_superblue_a_13) / sizeof(unsigned int)> palette_superblue_a_13_inv(colors_superblue_a_13);


static const unsigned int colors_superblue_a_14[] = {
                                          0x002610b6, 0x002612b8, 0x002614ba, 0x002616bc, 0x002618be, 0x00261ac0, 0x00261cc2, 0x00261ec4,
                                          0x00261fc6, 0x002621c8, 0x002623ca, 0x002725cc, 0x002727ce, 0x002729d0, 0x00272bd2, 0x00272dd4,
                                          0x00272fd6, 0x002731d7, 0x002833d9, 0x002935da, 0x002a37db, 0x002b3adc, 0x002c3cdd, 0x002e3ede,
                                          0x002f40df, 0x003043e0, 0x003145e1, 0x003247e3, 0x00334ae4, 0x00344ce5, 0x00354ee6, 0x003751e7,
                                          0x003853e8, 0x003955e9, 0x003a58ea, 0x003b5aeb, 0x003c5ded, 0x003d5fee, 0x003e61ef, 0x004064f0,
                                          0x004166f1, 0x004269f2, 0x00436bf3, 0x00446ef4, 0x004570f4, 0x004673f5, 0x004775f5, 0x004878f6,
                                          0x004a7af6, 0x004b7df6, 0x004c80f7, 0x004d82f7, 0x004e85f7, 0x004f87f8, 0x00508af8, 0x00518cf8,
                                          0x00538ff9, 0x005491f9, 0x005594fa, 0x005696fa, 0x005799fa, 0x00589bfb, 0x00599efb, 0x005aa0fb,
                                          0x005ca2fc, 0x005da5fc, 0x005ea7fc, 0x005faafd, 0x0061acfd, 0x0062aefd, 0x0064b0fe, 0x0066b3fe,
                                          0x0068b5ff, 0x006ab7ff, 0x006bb9ff, 0x006dbbff, 0x006fbeff, 0x0071c0ff, 0x0073c2ff, 0x0075c4ff,
                                          0x0076c6ff, 0x0078c8ff, 0x007acaff, 0x007cccff, 0x007ecdff, 0x007fcfff, 0x0081d1ff, 0x0083d3ff,
                                          0x0085d5ff, 0x0087d6ff, 0x0089d8ff, 0x008ad9ff, 0x008cdbff, 0x008eddff, 0x0090deff, 0x0092e0ff,
                                          0x0093e1ff, 0x0095e3ff, 0x0097e4ff, 0x0099e5ff, 0x009be7ff, 0x009de8ff, 0x009ee9ff, 0x00a0ebff,
                                          0x00a2ecff, 0x00a4edff, 0x00a6eeff, 0x00a7f0ff, 0x00a9f1ff, 0x00abf2ff, 0x00adf3ff, 0x00aff5ff,
                                          0x00b1f6ff, 0x00b2f7ff, 0x00b4f8ff, 0x00b6faff, 0x00b8fbff, 0x00bafcff, 0x00bcfeff, 0x00beffff,
                                          0x00c0ffff, 0x00c2fefd, 0x00c5fefc, 0x00c7fdfb, 0x00c9fdfa, 0x00cbfcf9, 0x00cdfcf7, 0x00d0fcf6,
                                          0x00d2fbf5, 0x00d4fbf4, 0x00d6faf3, 0x00d8faf1, 0x00dbf9f0, 0x00ddf9ef, 0x00dff8ee, 0x00e1f8ed,
                                          0x00e3f7ec, 0x00e5f7ea, 0x00e8f6e9, 0x00eaf6e8, 0x00ecf6e7, 0x00eef5e6, 0x00f0f5e4, 0x00f3f4e3,
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dcc28d, 0x00dbc08b, 0x00dabe89, 0x00d9bc87, 0x00d8ba85, 0x00d7b983, 0x00d6b781,
                                          0x00d5b57f, 0x00d4b37d, 0x00d3b17b, 0x00d2af79, 0x00d1ad77, 0x00d0ab75, 0x00cfa973, 0x00cfa771,
                                          0x00cea56f, 0x00cda36d, 0x00cca16b, 0x00cb9f6a, 0x00c99d68, 0x00c89b66, 0x00c79964, 0x00c69762,
                                          0x00c59560, 0x00c4935e, 0x00c2915c, 0x00c18f5a, 0x00c08c58, 0x00bf8a56, 0x00be8854, 0x00bd8652,
                                          0x00bb8451, 0x00ba814f, 0x00b97f4d, 0x00b87d4b, 0x00b77b49, 0x00b57847, 0x00b47645, 0x00b37444,
                                          0x00b27243, 0x00b16f43, 0x00b06d42, 0x00ae6a41, 0x00ad6840, 0x00ac6640, 0x00ab633f, 0x00aa613e,
                                          0x00a95e3e, 0x00a75c3d, 0x00a6593c, 0x00a5573b, 0x00a4553b, 0x00a3523a, 0x00a24f39, 0x00a04d38,
                                          0x009f4a38, 0x009e4837, 0x009d4536, 0x009c4335, 0x009a4035, 0x00993d34, 0x00983b33, 0x00973833,
                                          0x00971a00, 0x00961900, 0x00951700, 0x00931600, 0x00921400, 0x00911200, 0x008f1100, 0x008e0f00,
};

static const PaletteConstFWD<sizeof(colors_superblue_a_14) / sizeof(unsigned int)> palette_superblue_a_14(colors_superblue_a_14);
static const PaletteConstBWD<sizeof(colors_superblue_a_14) / sizeof(unsigned int)> palette_superblue_a_14_inv(colors_superblue_a_14);


static const unsigned int colors_superblue_a_15[] = {
                                          0x002501a6, 0x002503a8, 0x002505aa, 0x002507ac, 0x002609ae, 0x00260bb0, 0x00260db2, 0x00260fb4,
                                          0x002610b6, 0x002612b8, 0x002614ba, 0x002616bc, 0x002618be, 0x00261ac0, 0x00261cc2, 0x00261ec4,
                                          0x00261fc6, 0x002621c8, 0x002623ca, 0x002725cc, 0x002727ce, 0x002729d0, 0x00272bd2, 0x00272dd4,
                                          0x00272fd6, 0x002731d7, 0x002833d9, 0x002935da, 0x002a37db, 0x002b3adc, 0x002c3cdd, 0x002e3ede,
                                          0x002f40df, 0x003043e0, 0x003145e1, 0x003247e3, 0x00334ae4, 0x00344ce5, 0x00354ee6, 0x003751e7,
                                          0x003853e8, 0x003955e9, 0x003a58ea, 0x003b5aeb, 0x003c5ded, 0x003d5fee, 0x003e61ef, 0x004064f0,
                                          0x004166f1, 0x004269f2, 0x00436bf3, 0x00446ef4, 0x004570f4, 0x004673f5, 0x004775f5, 0x004878f6,
                                          0x004a7af6, 0x004b7df6, 0x004c80f7, 0x004d82f7, 0x004e85f7, 0x004f87f8, 0x00508af8, 0x00518cf8,
                                          0x00538ff9, 0x005491f9, 0x005594fa, 0x005696fa, 0x005799fa, 0x00589bfb, 0x00599efb, 0x005aa0fb,
                                          0x005ca2fc, 0x005da5fc, 0x005ea7fc, 0x005faafd, 0x0061acfd, 0x0062aefd, 0x0064b0fe, 0x0066b3fe,
                                          0x0068b5ff, 0x006ab7ff, 0x006bb9ff, 0x006dbbff, 0x006fbeff, 0x0071c0ff, 0x0073c2ff, 0x0075c4ff,
                                          0x0076c6ff, 0x0078c8ff, 0x007acaff, 0x007cccff, 0x007ecdff, 0x007fcfff, 0x0081d1ff, 0x0083d3ff,
                                          0x0085d5ff, 0x0087d6ff, 0x0089d8ff, 0x008ad9ff, 0x008cdbff, 0x008eddff, 0x0090deff, 0x0092e0ff,
                                          0x0093e1ff, 0x0095e3ff, 0x0097e4ff, 0x0099e5ff, 0x009be7ff, 0x009de8ff, 0x009ee9ff, 0x00a0ebff,
                                          0x00a2ecff, 0x00a4edff, 0x00a6eeff, 0x00a7f0ff, 0x00a9f1ff, 0x00abf2ff, 0x00adf3ff, 0x00aff5ff,
                                          0x00b1f6ff, 0x00b2f7ff, 0x00b4f8ff, 0x00b6faff, 0x00b8fbff, 0x00bafcff, 0x00bcfeff, 0x00beffff,
                                          0x00c0ffff, 0x00c2fefd, 0x00c5fefc, 0x00c7fdfb, 0x00c9fdfa, 0x00cbfcf9, 0x00cdfcf7, 0x00d0fcf6,
                                          0x00d2fbf5, 0x00d4fbf4, 0x00d6faf3, 0x00d8faf1, 0x00dbf9f0, 0x00ddf9ef, 0x00dff8ee, 0x00e1f8ed,
                                          0x00e3f7ec, 0x00e5f7ea, 0x00e8f6e9, 0x00eaf6e8, 0x00ecf6e7, 0x00eef5e6, 0x00f0f5e4, 0x00f3f4e3,
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dcc28d, 0x00dbc08b, 0x00dabe89, 0x00d9bc87, 0x00d8ba85, 0x00d7b983, 0x00d6b781,
                                          0x00d5b57f, 0x00d4b37d, 0x00d3b17b, 0x00d2af79, 0x00d1ad77, 0x00d0ab75, 0x00cfa973, 0x00cfa771,
                                          0x00cea56f, 0x00cda36d, 0x00cca16b, 0x00cb9f6a, 0x00c99d68, 0x00c89b66, 0x00c79964, 0x00c69762,
                                          0x00c59560, 0x00c4935e, 0x00c2915c, 0x00c18f5a, 0x00c08c58, 0x00bf8a56, 0x00be8854, 0x00bd8652,
                                          0x00bb8451, 0x00ba814f, 0x00b97f4d, 0x00b87d4b, 0x00b77b49, 0x00b57847, 0x00b47645, 0x00b37444,
                                          0x00b27243, 0x00b16f43, 0x00b06d42, 0x00ae6a41, 0x00ad6840, 0x00ac6640, 0x00ab633f, 0x00aa613e,
                                          0x00a95e3e, 0x00a75c3d, 0x00a6593c, 0x00a5573b, 0x00a4553b, 0x00a3523a, 0x00a24f39, 0x00a04d38,
                                          0x009f4a38, 0x009e4837, 0x009d4536, 0x009c4335, 0x009a4035, 0x00993d34, 0x00983b33, 0x00973833,
};

static const PaletteConstFWD<sizeof(colors_superblue_a_15) / sizeof(unsigned int)> palette_superblue_a_15(colors_superblue_a_15);
static const PaletteConstBWD<sizeof(colors_superblue_a_15) / sizeof(unsigned int)> palette_superblue_a_15_inv(colors_superblue_a_15);


static const unsigned int colors_superblue_b_1[] = {
                                          0x002501a6, 0x002503a8, 0x002505aa, 0x002507ac, 0x002609ae, 0x00260bb0, 0x00260db2, 0x00260fb4,
                                          0x002610b6, 0x002612b8, 0x002614ba, 0x002616bc, 0x002618be, 0x00261ac0, 0x00261cc2, 0x00261ec4,
                                          0x00261fc6, 0x002621c8, 0x002623ca, 0x002725cc, 0x002727ce, 0x002729d0, 0x00272bd2, 0x00272dd4,
                                          0x00272fd6, 0x002731d7, 0x002833d9, 0x002935da, 0x002a37db, 0x002b3adc, 0x002c3cdd, 0x002e3ede,
                                          0x002f40df, 0x003043e0, 0x003145e1, 0x003247e3, 0x00334ae4, 0x00344ce5, 0x00354ee6, 0x003751e7,
                                          0x003853e8, 0x003955e9, 0x003a58ea, 0x003b5aeb, 0x003c5ded, 0x003d5fee, 0x003e61ef, 0x004064f0,
                                          0x004166f1, 0x004269f2, 0x00436bf3, 0x00446ef4, 0x004570f4, 0x004673f5, 0x004775f5, 0x004878f6,
                                          0x004a7af6, 0x004b7df6, 0x004c80f7, 0x004d82f7, 0x004e85f7, 0x004f87f8, 0x00508af8, 0x00518cf8,
                                          0x00538ff9, 0x005491f9, 0x005594fa, 0x005696fa, 0x005799fa, 0x00589bfb, 0x00599efb, 0x005aa0fb,
                                          0x005ca2fc, 0x005da5fc, 0x005ea7fc, 0x005faafd, 0x0061acfd, 0x0062aefd, 0x0064b0fe, 0x0066b3fe,
                                          0x0068b5ff, 0x006ab7ff, 0x006bb9ff, 0x006dbbff, 0x006fbeff, 0x0071c0ff, 0x0073c2ff, 0x0075c4ff,
                                          0x0076c6ff, 0x0078c8ff, 0x007acaff, 0x007cccff, 0x007ecdff, 0x007fcfff, 0x0081d1ff, 0x0083d3ff,
                                          0x0085d5ff, 0x0087d6ff, 0x0089d8ff, 0x008ad9ff, 0x008cdbff, 0x008eddff, 0x0090deff, 0x0092e0ff,
                                          0x0093e1ff, 0x0095e3ff, 0x0097e4ff, 0x0099e5ff, 0x009be7ff, 0x009de8ff, 0x009ee9ff, 0x00a0ebff,

                                          0x00a2ecff, 0x00a4edff, 0x00a6eeff, 0x00a7f0ff, 0x00a9f1ff, 0x00abf2ff, 0x00adf3ff, 0x00aff5ff,
                                          0x00b1f6ff, 0x00b2f7ff, 0x00b4f8ff, 0x00b6faff, 0x00b8fbff, 0x00bafcff, 0x00bcfeff, 0x00beffff,
                                          0x00c0ffff, 0x00c2fefd, 0x00c5fefc, 0x00c7fdfb, 0x00c9fdfa, 0x00cbfcf9, 0x00cdfcf7, 0x00d0fcf6,
                                          0x00d2fbf5, 0x00d4fbf4, 0x00d6faf3, 0x00d8faf1, 0x00dbf9f0, 0x00ddf9ef, 0x00dff8ee, 0x00e1f8ed,
                                          0x00e3f7ec, 0x00e5f7ea, 0x00e8f6e9, 0x00eaf6e8, 0x00ecf6e7, 0x00eef5e6, 0x00f0f5e4, 0x00f3f4e3,
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dcc28d, 0x00dbc08b, 0x00dabe89, 0x00d9bc87, 0x00d8ba85, 0x00d7b983, 0x00d6b781,
                                          0x00d5b57f, 0x00d4b37d, 0x00d3b17b, 0x00d2af79, 0x00d1ad77, 0x00d0ab75, 0x00cfa973, 0x00cfa771,
                                          0x00cea56f, 0x00cda36d, 0x00cca16b, 0x00cb9f6a, 0x00c99d68, 0x00c89b66, 0x00c79964, 0x00c69762,
                                          0x00c59560, 0x00c4935e, 0x00c2915c, 0x00c18f5a, 0x00c08c58, 0x00bf8a56, 0x00be8854, 0x00bd8652,
                                          0x00bb8451, 0x00ba814f, 0x00b97f4d, 0x00b87d4b, 0x00b77b49, 0x00b57847, 0x00b47645, 0x00b37444,
                                          0x00b27243, 0x00b16f43, 0x00b06d42, 0x00ae6a41, 0x00ad6840, 0x00ac6640, 0x00ab633f, 0x00aa613e,
                                          0x00a95e3e, 0x00a75c3d, 0x00a6593c, 0x00a5573b, 0x00a4553b, 0x00a3523a, 0x00a24f39, 0x00a04d38,
                                          0x009f4a38, 0x009e4837, 0x009d4536, 0x009c4335, 0x009a4035, 0x00993d34, 0x00983b33, 0x00973833,

                                          0x00971a00, 0x00961900, 0x00951700, 0x00931600, 0x00921400, 0x00911200, 0x008f1100, 0x008e0f00,
                                          0x008d0e00, 0x008b0c00, 0x008a0a00, 0x00890900, 0x00870700, 0x00860600, 0x00850400, 0x00830200,
                                          0x00820100, 0x00810000, 0x007f0000, 0x007e0000, 0x007c0000, 0x007b0000, 0x007a0000, 0x00780000,
                                          0x00770000, 0x00760000, 0x00740000, 0x00730000, 0x00720000, 0x00700000, 0x006f0000, 0x006e0000,
                                          0x006c0000, 0x006b0000, 0x006a0000, 0x00680000, 0x00670000, 0x00660000, 0x00640000, 0x00630000,
                                          0x00610000, 0x00600000, 0x005f0000, 0x005d0000, 0x005c0000, 0x005b0000, 0x00590000, 0x00580000,
                                          0x00570000, 0x00550000, 0x00540000, 0x00530000, 0x00510000, 0x00500000, 0x004f0000, 0x004d0000,
                                          0x004c0000, 0x004a0000, 0x00490000, 0x00480000, 0x00460000, 0x00450000, 0x00440000, 0x00420000,
                                          0x00410000, 0x00400000, 0x003e0000, 0x003d0000, 0x003c0000, 0x003a0000, 0x00390000, 0x00380000,
                                          0x00360000, 0x00350000, 0x00340000, 0x00320000, 0x00310000, 0x002f0000, 0x002e0000, 0x002d0000,
                                          0x002b0000, 0x002a0000, 0x00290000, 0x00270000, 0x00260000, 0x00250000, 0x00230000, 0x00220000,
                                          0x00210000, 0x001f0000, 0x001e0000, 0x001d0000, 0x001b0000, 0x001a0000, 0x00180000, 0x00170000,
                                          0x00160000, 0x00140000, 0x00130000, 0x00120000, 0x00100000, 0x000f0000, 0x000e0000, 0x000c0000,
                                          0x000b0000, 0x000a0000, 0x00080000, 0x00070000, 0x00060000, 0x00040000, 0x00030000, 0x00020000
};


static const PaletteConstFWD<sizeof(colors_superblue_b_1) / sizeof(unsigned int)> palette_superblue_b_1(colors_superblue_b_1);
static const PaletteConstBWD<sizeof(colors_superblue_b_1) / sizeof(unsigned int)> palette_superblue_b_1_inv(colors_superblue_b_1);


static const unsigned int colors_superblue_b_2[] = {
                                          0x002501a6, 0x002503a8, 0x002505aa, 0x002507ac, 0x002609ae, 0x00260bb0, 0x00260db2, 0x00260fb4,
                                          0x002610b6, 0x002612b8, 0x002614ba, 0x002616bc, 0x002618be, 0x00261ac0, 0x00261cc2, 0x00261ec4,
                                          0x00261fc6, 0x002621c8, 0x002623ca, 0x002725cc, 0x002727ce, 0x002729d0, 0x00272bd2, 0x00272dd4,
                                          0x00272fd6, 0x002731d7, 0x002833d9, 0x002935da, 0x002a37db, 0x002b3adc, 0x002c3cdd, 0x002e3ede,
                                          0x002f40df, 0x003043e0, 0x003145e1, 0x003247e3, 0x00334ae4, 0x00344ce5, 0x00354ee6, 0x003751e7,
                                          0x003853e8, 0x003955e9, 0x003a58ea, 0x003b5aeb, 0x003c5ded, 0x003d5fee, 0x003e61ef, 0x004064f0,
                                          0x004166f1, 0x004269f2, 0x00436bf3, 0x00446ef4, 0x004570f4, 0x004673f5, 0x004775f5, 0x004878f6,
                                          0x004a7af6, 0x004b7df6, 0x004c80f7, 0x004d82f7, 0x004e85f7, 0x004f87f8, 0x00508af8, 0x00518cf8,
                                          0x00538ff9, 0x005491f9, 0x005594fa, 0x005696fa, 0x005799fa, 0x00589bfb, 0x00599efb, 0x005aa0fb,
                                          0x005ca2fc, 0x005da5fc, 0x005ea7fc, 0x005faafd, 0x0061acfd, 0x0062aefd, 0x0064b0fe, 0x0066b3fe,
                                          0x0068b5ff, 0x006ab7ff, 0x006bb9ff, 0x006dbbff, 0x006fbeff, 0x0071c0ff, 0x0073c2ff, 0x0075c4ff,
                                          0x0076c6ff, 0x0078c8ff, 0x007acaff, 0x007cccff, 0x007ecdff, 0x007fcfff, 0x0081d1ff, 0x0083d3ff,
                                          0x0085d5ff, 0x0087d6ff, 0x0089d8ff, 0x008ad9ff, 0x008cdbff, 0x008eddff, 0x0090deff, 0x0092e0ff,
                                          0x0093e1ff, 0x0095e3ff, 0x0097e4ff, 0x0099e5ff, 0x009be7ff, 0x009de8ff, 0x009ee9ff, 0x00a0ebff,

                                          0x00a2ecff, 0x00a4edff, 0x00a6eeff, 0x00a7f0ff, 0x00a9f1ff, 0x00abf2ff, 0x00adf3ff, 0x00aff5ff,
                                          0x00b1f6ff, 0x00b2f7ff, 0x00b4f8ff, 0x00b6faff, 0x00b8fbff, 0x00bafcff, 0x00bcfeff, 0x00beffff,
                                          0x00c0ffff, 0x00c2fefd, 0x00c5fefc, 0x00c7fdfb, 0x00c9fdfa, 0x00cbfcf9, 0x00cdfcf7, 0x00d0fcf6,
                                          0x00d2fbf5, 0x00d4fbf4, 0x00d6faf3, 0x00d8faf1, 0x00dbf9f0, 0x00ddf9ef, 0x00dff8ee, 0x00e1f8ed,
                                          0x00e3f7ec, 0x00e5f7ea, 0x00e8f6e9, 0x00eaf6e8, 0x00ecf6e7, 0x00eef5e6, 0x00f0f5e4, 0x00f3f4e3,
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dcc28d, 0x00dbc08b, 0x00dabe89, 0x00d9bc87, 0x00d8ba85, 0x00d7b983, 0x00d6b781,
                                          0x00d5b57f, 0x00d4b37d, 0x00d3b17b, 0x00d2af79, 0x00d1ad77, 0x00d0ab75, 0x00cfa973, 0x00cfa771,
                                          0x00cea56f, 0x00cda36d, 0x00cca16b, 0x00cb9f6a, 0x00c99d68, 0x00c89b66, 0x00c79964, 0x00c69762,
                                          0x00c59560, 0x00c4935e, 0x00c2915c, 0x00c18f5a, 0x00c08c58, 0x00bf8a56, 0x00be8854, 0x00bd8652,
                                          0x00bb8451, 0x00ba814f, 0x00b97f4d, 0x00b87d4b, 0x00b77b49, 0x00b57847, 0x00b47645, 0x00b37444,
                                          0x00b27243, 0x00b16f43, 0x00b06d42, 0x00ae6a41, 0x00ad6840, 0x00ac6640, 0x00ab633f, 0x00aa613e,
                                          0x00a95e3e, 0x00a75c3d, 0x00a6593c, 0x00a5573b, 0x00a4553b, 0x00a3523a, 0x00a24f39, 0x00a04d38,
                                          0x009f4a38, 0x009e4837, 0x009d4536, 0x009c4335, 0x009a4035, 0x00993d34, 0x00983b33, 0x00973833,

                                          0x00971a00, 0x00961900, 0x00951700, 0x00931600, 0x00921400, 0x00911200, 0x008f1100, 0x008e0f00,
                                          0x008d0e00, 0x008b0c00, 0x008a0a00, 0x00890900, 0x00870700, 0x00860600, 0x00850400, 0x00830200,
                                          0x00820100, 0x00810000, 0x007f0000, 0x007e0000, 0x007c0000, 0x007b0000, 0x007a0000, 0x00780000,
                                          0x00770000, 0x00760000, 0x00740000, 0x00730000, 0x00720000, 0x00700000, 0x006f0000, 0x006e0000,
                                          0x006c0000, 0x006b0000, 0x006a0000, 0x00680000, 0x00670000, 0x00660000, 0x00640000, 0x00630000,
                                          0x00610000, 0x00600000, 0x005f0000, 0x005d0000, 0x005c0000, 0x005b0000, 0x00590000, 0x00580000,
                                          0x00570000, 0x00550000, 0x00540000, 0x00530000, 0x00510000, 0x00500000, 0x004f0000, 0x004d0000,
                                          0x004c0000, 0x004a0000, 0x00490000, 0x00480000, 0x00460000, 0x00450000, 0x00440000, 0x00420000,
                                          0x00410000, 0x00400000, 0x003e0000, 0x003d0000, 0x003c0000, 0x003a0000, 0x00390000, 0x00380000,
                                          0x00360000, 0x00350000, 0x00340000, 0x00320000, 0x00310000, 0x002f0000, 0x002e0000, 0x002d0000,
                                          0x002b0000, 0x002a0000, 0x00290000, 0x00270000, 0x00260000, 0x00250000, 0x00230000, 0x00220000,
                                          0x00210000, 0x001f0000, 0x001e0000, 0x001d0000, 0x001b0000, 0x001a0000, 0x00180000, 0x00170000,
                                          0x00160000, 0x00140000, 0x00130000, 0x00120000, 0x00100000, 0x000f0000, 0x000e0000, 0x000c0000,
};


static const PaletteConstFWD<sizeof(colors_superblue_b_2) / sizeof(unsigned int)> palette_superblue_b_2(colors_superblue_b_2);
static const PaletteConstBWD<sizeof(colors_superblue_b_2) / sizeof(unsigned int)> palette_superblue_b_2_inv(colors_superblue_b_2);


static const unsigned int colors_superblue_b_3[] = {
                                          0x002610b6, 0x002612b8, 0x002614ba, 0x002616bc, 0x002618be, 0x00261ac0, 0x00261cc2, 0x00261ec4,
                                          0x00261fc6, 0x002621c8, 0x002623ca, 0x002725cc, 0x002727ce, 0x002729d0, 0x00272bd2, 0x00272dd4,
                                          0x00272fd6, 0x002731d7, 0x002833d9, 0x002935da, 0x002a37db, 0x002b3adc, 0x002c3cdd, 0x002e3ede,
                                          0x002f40df, 0x003043e0, 0x003145e1, 0x003247e3, 0x00334ae4, 0x00344ce5, 0x00354ee6, 0x003751e7,
                                          0x003853e8, 0x003955e9, 0x003a58ea, 0x003b5aeb, 0x003c5ded, 0x003d5fee, 0x003e61ef, 0x004064f0,
                                          0x004166f1, 0x004269f2, 0x00436bf3, 0x00446ef4, 0x004570f4, 0x004673f5, 0x004775f5, 0x004878f6,
                                          0x004a7af6, 0x004b7df6, 0x004c80f7, 0x004d82f7, 0x004e85f7, 0x004f87f8, 0x00508af8, 0x00518cf8,
                                          0x00538ff9, 0x005491f9, 0x005594fa, 0x005696fa, 0x005799fa, 0x00589bfb, 0x00599efb, 0x005aa0fb,
                                          0x005ca2fc, 0x005da5fc, 0x005ea7fc, 0x005faafd, 0x0061acfd, 0x0062aefd, 0x0064b0fe, 0x0066b3fe,
                                          0x0068b5ff, 0x006ab7ff, 0x006bb9ff, 0x006dbbff, 0x006fbeff, 0x0071c0ff, 0x0073c2ff, 0x0075c4ff,
                                          0x0076c6ff, 0x0078c8ff, 0x007acaff, 0x007cccff, 0x007ecdff, 0x007fcfff, 0x0081d1ff, 0x0083d3ff,
                                          0x0085d5ff, 0x0087d6ff, 0x0089d8ff, 0x008ad9ff, 0x008cdbff, 0x008eddff, 0x0090deff, 0x0092e0ff,
                                          0x0093e1ff, 0x0095e3ff, 0x0097e4ff, 0x0099e5ff, 0x009be7ff, 0x009de8ff, 0x009ee9ff, 0x00a0ebff,

                                          0x00a2ecff, 0x00a4edff, 0x00a6eeff, 0x00a7f0ff, 0x00a9f1ff, 0x00abf2ff, 0x00adf3ff, 0x00aff5ff,
                                          0x00b1f6ff, 0x00b2f7ff, 0x00b4f8ff, 0x00b6faff, 0x00b8fbff, 0x00bafcff, 0x00bcfeff, 0x00beffff,
                                          0x00c0ffff, 0x00c2fefd, 0x00c5fefc, 0x00c7fdfb, 0x00c9fdfa, 0x00cbfcf9, 0x00cdfcf7, 0x00d0fcf6,
                                          0x00d2fbf5, 0x00d4fbf4, 0x00d6faf3, 0x00d8faf1, 0x00dbf9f0, 0x00ddf9ef, 0x00dff8ee, 0x00e1f8ed,
                                          0x00e3f7ec, 0x00e5f7ea, 0x00e8f6e9, 0x00eaf6e8, 0x00ecf6e7, 0x00eef5e6, 0x00f0f5e4, 0x00f3f4e3,
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dcc28d, 0x00dbc08b, 0x00dabe89, 0x00d9bc87, 0x00d8ba85, 0x00d7b983, 0x00d6b781,
                                          0x00d5b57f, 0x00d4b37d, 0x00d3b17b, 0x00d2af79, 0x00d1ad77, 0x00d0ab75, 0x00cfa973, 0x00cfa771,
                                          0x00cea56f, 0x00cda36d, 0x00cca16b, 0x00cb9f6a, 0x00c99d68, 0x00c89b66, 0x00c79964, 0x00c69762,
                                          0x00c59560, 0x00c4935e, 0x00c2915c, 0x00c18f5a, 0x00c08c58, 0x00bf8a56, 0x00be8854, 0x00bd8652,
                                          0x00bb8451, 0x00ba814f, 0x00b97f4d, 0x00b87d4b, 0x00b77b49, 0x00b57847, 0x00b47645, 0x00b37444,
                                          0x00b27243, 0x00b16f43, 0x00b06d42, 0x00ae6a41, 0x00ad6840, 0x00ac6640, 0x00ab633f, 0x00aa613e,
                                          0x00a95e3e, 0x00a75c3d, 0x00a6593c, 0x00a5573b, 0x00a4553b, 0x00a3523a, 0x00a24f39, 0x00a04d38,
                                          0x009f4a38, 0x009e4837, 0x009d4536, 0x009c4335, 0x009a4035, 0x00993d34, 0x00983b33, 0x00973833,

                                          0x00971a00, 0x00961900, 0x00951700, 0x00931600, 0x00921400, 0x00911200, 0x008f1100, 0x008e0f00,
                                          0x008d0e00, 0x008b0c00, 0x008a0a00, 0x00890900, 0x00870700, 0x00860600, 0x00850400, 0x00830200,
                                          0x00820100, 0x00810000, 0x007f0000, 0x007e0000, 0x007c0000, 0x007b0000, 0x007a0000, 0x00780000,
                                          0x00770000, 0x00760000, 0x00740000, 0x00730000, 0x00720000, 0x00700000, 0x006f0000, 0x006e0000,
                                          0x006c0000, 0x006b0000, 0x006a0000, 0x00680000, 0x00670000, 0x00660000, 0x00640000, 0x00630000,
                                          0x00610000, 0x00600000, 0x005f0000, 0x005d0000, 0x005c0000, 0x005b0000, 0x00590000, 0x00580000,
                                          0x00570000, 0x00550000, 0x00540000, 0x00530000, 0x00510000, 0x00500000, 0x004f0000, 0x004d0000,
                                          0x004c0000, 0x004a0000, 0x00490000, 0x00480000, 0x00460000, 0x00450000, 0x00440000, 0x00420000,
                                          0x00410000, 0x00400000, 0x003e0000, 0x003d0000, 0x003c0000, 0x003a0000, 0x00390000, 0x00380000,
                                          0x00360000, 0x00350000, 0x00340000, 0x00320000, 0x00310000, 0x002f0000, 0x002e0000, 0x002d0000,
                                          0x002b0000, 0x002a0000, 0x00290000, 0x00270000, 0x00260000, 0x00250000, 0x00230000, 0x00220000,
                                          0x00210000, 0x001f0000, 0x001e0000, 0x001d0000, 0x001b0000, 0x001a0000, 0x00180000, 0x00170000,
};


static const PaletteConstFWD<sizeof(colors_superblue_b_3) / sizeof(unsigned int)> palette_superblue_b_3(colors_superblue_b_3);
static const PaletteConstBWD<sizeof(colors_superblue_b_3) / sizeof(unsigned int)> palette_superblue_b_3_inv(colors_superblue_b_3);


static const unsigned int colors_superblue_b_4[] = {
                                          0x00272fd6, 0x002731d7, 0x002833d9, 0x002935da, 0x002a37db, 0x002b3adc, 0x002c3cdd, 0x002e3ede,
                                          0x002f40df, 0x003043e0, 0x003145e1, 0x003247e3, 0x00334ae4, 0x00344ce5, 0x00354ee6, 0x003751e7,
                                          0x003853e8, 0x003955e9, 0x003a58ea, 0x003b5aeb, 0x003c5ded, 0x003d5fee, 0x003e61ef, 0x004064f0,
                                          0x004166f1, 0x004269f2, 0x00436bf3, 0x00446ef4, 0x004570f4, 0x004673f5, 0x004775f5, 0x004878f6,
                                          0x004a7af6, 0x004b7df6, 0x004c80f7, 0x004d82f7, 0x004e85f7, 0x004f87f8, 0x00508af8, 0x00518cf8,
                                          0x00538ff9, 0x005491f9, 0x005594fa, 0x005696fa, 0x005799fa, 0x00589bfb, 0x00599efb, 0x005aa0fb,
                                          0x005ca2fc, 0x005da5fc, 0x005ea7fc, 0x005faafd, 0x0061acfd, 0x0062aefd, 0x0064b0fe, 0x0066b3fe,
                                          0x0068b5ff, 0x006ab7ff, 0x006bb9ff, 0x006dbbff, 0x006fbeff, 0x0071c0ff, 0x0073c2ff, 0x0075c4ff,
                                          0x0076c6ff, 0x0078c8ff, 0x007acaff, 0x007cccff, 0x007ecdff, 0x007fcfff, 0x0081d1ff, 0x0083d3ff,
                                          0x0085d5ff, 0x0087d6ff, 0x0089d8ff, 0x008ad9ff, 0x008cdbff, 0x008eddff, 0x0090deff, 0x0092e0ff,
                                          0x0093e1ff, 0x0095e3ff, 0x0097e4ff, 0x0099e5ff, 0x009be7ff, 0x009de8ff, 0x009ee9ff, 0x00a0ebff,

                                          0x00a2ecff, 0x00a4edff, 0x00a6eeff, 0x00a7f0ff, 0x00a9f1ff, 0x00abf2ff, 0x00adf3ff, 0x00aff5ff,
                                          0x00b1f6ff, 0x00b2f7ff, 0x00b4f8ff, 0x00b6faff, 0x00b8fbff, 0x00bafcff, 0x00bcfeff, 0x00beffff,
                                          0x00c0ffff, 0x00c2fefd, 0x00c5fefc, 0x00c7fdfb, 0x00c9fdfa, 0x00cbfcf9, 0x00cdfcf7, 0x00d0fcf6,
                                          0x00d2fbf5, 0x00d4fbf4, 0x00d6faf3, 0x00d8faf1, 0x00dbf9f0, 0x00ddf9ef, 0x00dff8ee, 0x00e1f8ed,
                                          0x00e3f7ec, 0x00e5f7ea, 0x00e8f6e9, 0x00eaf6e8, 0x00ecf6e7, 0x00eef5e6, 0x00f0f5e4, 0x00f3f4e3,
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dcc28d, 0x00dbc08b, 0x00dabe89, 0x00d9bc87, 0x00d8ba85, 0x00d7b983, 0x00d6b781,
                                          0x00d5b57f, 0x00d4b37d, 0x00d3b17b, 0x00d2af79, 0x00d1ad77, 0x00d0ab75, 0x00cfa973, 0x00cfa771,
                                          0x00cea56f, 0x00cda36d, 0x00cca16b, 0x00cb9f6a, 0x00c99d68, 0x00c89b66, 0x00c79964, 0x00c69762,
                                          0x00c59560, 0x00c4935e, 0x00c2915c, 0x00c18f5a, 0x00c08c58, 0x00bf8a56, 0x00be8854, 0x00bd8652,
                                          0x00bb8451, 0x00ba814f, 0x00b97f4d, 0x00b87d4b, 0x00b77b49, 0x00b57847, 0x00b47645, 0x00b37444,
                                          0x00b27243, 0x00b16f43, 0x00b06d42, 0x00ae6a41, 0x00ad6840, 0x00ac6640, 0x00ab633f, 0x00aa613e,
                                          0x00a95e3e, 0x00a75c3d, 0x00a6593c, 0x00a5573b, 0x00a4553b, 0x00a3523a, 0x00a24f39, 0x00a04d38,
                                          0x009f4a38, 0x009e4837, 0x009d4536, 0x009c4335, 0x009a4035, 0x00993d34, 0x00983b33, 0x00973833,

                                          0x00971a00, 0x00961900, 0x00951700, 0x00931600, 0x00921400, 0x00911200, 0x008f1100, 0x008e0f00,
                                          0x008d0e00, 0x008b0c00, 0x008a0a00, 0x00890900, 0x00870700, 0x00860600, 0x00850400, 0x00830200,
                                          0x00820100, 0x00810000, 0x007f0000, 0x007e0000, 0x007c0000, 0x007b0000, 0x007a0000, 0x00780000,
                                          0x00770000, 0x00760000, 0x00740000, 0x00730000, 0x00720000, 0x00700000, 0x006f0000, 0x006e0000,
                                          0x006c0000, 0x006b0000, 0x006a0000, 0x00680000, 0x00670000, 0x00660000, 0x00640000, 0x00630000,
                                          0x00610000, 0x00600000, 0x005f0000, 0x005d0000, 0x005c0000, 0x005b0000, 0x00590000, 0x00580000,
                                          0x00570000, 0x00550000, 0x00540000, 0x00530000, 0x00510000, 0x00500000, 0x004f0000, 0x004d0000,
                                          0x004c0000, 0x004a0000, 0x00490000, 0x00480000, 0x00460000, 0x00450000, 0x00440000, 0x00420000,
                                          0x00410000, 0x00400000, 0x003e0000, 0x003d0000, 0x003c0000, 0x003a0000, 0x00390000, 0x00380000,
                                          0x00360000, 0x00350000, 0x00340000, 0x00320000, 0x00310000, 0x002f0000, 0x002e0000, 0x002d0000,
                                          0x002b0000, 0x002a0000, 0x00290000, 0x00270000, 0x00260000, 0x00250000, 0x00230000, 0x00220000,
                                          0x00210000, 0x001f0000, 0x001e0000, 0x001d0000, 0x001b0000, 0x001a0000, 0x00180000, 0x00170000,
};


static const PaletteConstFWD<sizeof(colors_superblue_b_4) / sizeof(unsigned int)> palette_superblue_b_4(colors_superblue_b_4);
static const PaletteConstBWD<sizeof(colors_superblue_b_4) / sizeof(unsigned int)> palette_superblue_b_4_inv(colors_superblue_b_4);


static const unsigned int colors_superblue_b_5[] = {
                                          0x002f40df, 0x003043e0, 0x003145e1, 0x003247e3, 0x00334ae4, 0x00344ce5, 0x00354ee6, 0x003751e7,
                                          0x003853e8, 0x003955e9, 0x003a58ea, 0x003b5aeb, 0x003c5ded, 0x003d5fee, 0x003e61ef, 0x004064f0,
                                          0x004166f1, 0x004269f2, 0x00436bf3, 0x00446ef4, 0x004570f4, 0x004673f5, 0x004775f5, 0x004878f6,
                                          0x004a7af6, 0x004b7df6, 0x004c80f7, 0x004d82f7, 0x004e85f7, 0x004f87f8, 0x00508af8, 0x00518cf8,
                                          0x00538ff9, 0x005491f9, 0x005594fa, 0x005696fa, 0x005799fa, 0x00589bfb, 0x00599efb, 0x005aa0fb,
                                          0x005ca2fc, 0x005da5fc, 0x005ea7fc, 0x005faafd, 0x0061acfd, 0x0062aefd, 0x0064b0fe, 0x0066b3fe,
                                          0x0068b5ff, 0x006ab7ff, 0x006bb9ff, 0x006dbbff, 0x006fbeff, 0x0071c0ff, 0x0073c2ff, 0x0075c4ff,
                                          0x0076c6ff, 0x0078c8ff, 0x007acaff, 0x007cccff, 0x007ecdff, 0x007fcfff, 0x0081d1ff, 0x0083d3ff,
                                          0x0085d5ff, 0x0087d6ff, 0x0089d8ff, 0x008ad9ff, 0x008cdbff, 0x008eddff, 0x0090deff, 0x0092e0ff,
                                          0x0093e1ff, 0x0095e3ff, 0x0097e4ff, 0x0099e5ff, 0x009be7ff, 0x009de8ff, 0x009ee9ff, 0x00a0ebff,

                                          0x00a2ecff, 0x00a4edff, 0x00a6eeff, 0x00a7f0ff, 0x00a9f1ff, 0x00abf2ff, 0x00adf3ff, 0x00aff5ff,
                                          0x00b1f6ff, 0x00b2f7ff, 0x00b4f8ff, 0x00b6faff, 0x00b8fbff, 0x00bafcff, 0x00bcfeff, 0x00beffff,
                                          0x00c0ffff, 0x00c2fefd, 0x00c5fefc, 0x00c7fdfb, 0x00c9fdfa, 0x00cbfcf9, 0x00cdfcf7, 0x00d0fcf6,
                                          0x00d2fbf5, 0x00d4fbf4, 0x00d6faf3, 0x00d8faf1, 0x00dbf9f0, 0x00ddf9ef, 0x00dff8ee, 0x00e1f8ed,
                                          0x00e3f7ec, 0x00e5f7ea, 0x00e8f6e9, 0x00eaf6e8, 0x00ecf6e7, 0x00eef5e6, 0x00f0f5e4, 0x00f3f4e3,
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dcc28d, 0x00dbc08b, 0x00dabe89, 0x00d9bc87, 0x00d8ba85, 0x00d7b983, 0x00d6b781,
                                          0x00d5b57f, 0x00d4b37d, 0x00d3b17b, 0x00d2af79, 0x00d1ad77, 0x00d0ab75, 0x00cfa973, 0x00cfa771,
                                          0x00cea56f, 0x00cda36d, 0x00cca16b, 0x00cb9f6a, 0x00c99d68, 0x00c89b66, 0x00c79964, 0x00c69762,
                                          0x00c59560, 0x00c4935e, 0x00c2915c, 0x00c18f5a, 0x00c08c58, 0x00bf8a56, 0x00be8854, 0x00bd8652,
                                          0x00bb8451, 0x00ba814f, 0x00b97f4d, 0x00b87d4b, 0x00b77b49, 0x00b57847, 0x00b47645, 0x00b37444,
                                          0x00b27243, 0x00b16f43, 0x00b06d42, 0x00ae6a41, 0x00ad6840, 0x00ac6640, 0x00ab633f, 0x00aa613e,
                                          0x00a95e3e, 0x00a75c3d, 0x00a6593c, 0x00a5573b, 0x00a4553b, 0x00a3523a, 0x00a24f39, 0x00a04d38,
                                          0x009f4a38, 0x009e4837, 0x009d4536, 0x009c4335, 0x009a4035, 0x00993d34, 0x00983b33, 0x00973833,

                                          0x00971a00, 0x00961900, 0x00951700, 0x00931600, 0x00921400, 0x00911200, 0x008f1100, 0x008e0f00,
                                          0x008d0e00, 0x008b0c00, 0x008a0a00, 0x00890900, 0x00870700, 0x00860600, 0x00850400, 0x00830200,
                                          0x00820100, 0x00810000, 0x007f0000, 0x007e0000, 0x007c0000, 0x007b0000, 0x007a0000, 0x00780000,
                                          0x00770000, 0x00760000, 0x00740000, 0x00730000, 0x00720000, 0x00700000, 0x006f0000, 0x006e0000,
                                          0x006c0000, 0x006b0000, 0x006a0000, 0x00680000, 0x00670000, 0x00660000, 0x00640000, 0x00630000,
                                          0x00610000, 0x00600000, 0x005f0000, 0x005d0000, 0x005c0000, 0x005b0000, 0x00590000, 0x00580000,
                                          0x00570000, 0x00550000, 0x00540000, 0x00530000, 0x00510000, 0x00500000, 0x004f0000, 0x004d0000,
                                          0x004c0000, 0x004a0000, 0x00490000, 0x00480000, 0x00460000, 0x00450000, 0x00440000, 0x00420000,
                                          0x00410000, 0x00400000, 0x003e0000, 0x003d0000, 0x003c0000, 0x003a0000, 0x00390000, 0x00380000,
                                          0x00360000, 0x00350000, 0x00340000, 0x00320000, 0x00310000, 0x002f0000, 0x002e0000, 0x002d0000,
                                          0x002b0000, 0x002a0000, 0x00290000, 0x00270000, 0x00260000, 0x00250000, 0x00230000, 0x00220000,
};


static const PaletteConstFWD<sizeof(colors_superblue_b_5) / sizeof(unsigned int)> palette_superblue_b_5(colors_superblue_b_5);
static const PaletteConstBWD<sizeof(colors_superblue_b_5) / sizeof(unsigned int)> palette_superblue_b_5_inv(colors_superblue_b_5);


static const unsigned int colors_superblue_b_6[] = {
                                          0x003853e8, 0x003955e9, 0x003a58ea, 0x003b5aeb, 0x003c5ded, 0x003d5fee, 0x003e61ef, 0x004064f0,
                                          0x004166f1, 0x004269f2, 0x00436bf3, 0x00446ef4, 0x004570f4, 0x004673f5, 0x004775f5, 0x004878f6,
                                          0x004a7af6, 0x004b7df6, 0x004c80f7, 0x004d82f7, 0x004e85f7, 0x004f87f8, 0x00508af8, 0x00518cf8,
                                          0x00538ff9, 0x005491f9, 0x005594fa, 0x005696fa, 0x005799fa, 0x00589bfb, 0x00599efb, 0x005aa0fb,
                                          0x005ca2fc, 0x005da5fc, 0x005ea7fc, 0x005faafd, 0x0061acfd, 0x0062aefd, 0x0064b0fe, 0x0066b3fe,
                                          0x0068b5ff, 0x006ab7ff, 0x006bb9ff, 0x006dbbff, 0x006fbeff, 0x0071c0ff, 0x0073c2ff, 0x0075c4ff,
                                          0x0076c6ff, 0x0078c8ff, 0x007acaff, 0x007cccff, 0x007ecdff, 0x007fcfff, 0x0081d1ff, 0x0083d3ff,
                                          0x0085d5ff, 0x0087d6ff, 0x0089d8ff, 0x008ad9ff, 0x008cdbff, 0x008eddff, 0x0090deff, 0x0092e0ff,
                                          0x0093e1ff, 0x0095e3ff, 0x0097e4ff, 0x0099e5ff, 0x009be7ff, 0x009de8ff, 0x009ee9ff, 0x00a0ebff,

                                          0x00a2ecff, 0x00a4edff, 0x00a6eeff, 0x00a7f0ff, 0x00a9f1ff, 0x00abf2ff, 0x00adf3ff, 0x00aff5ff,
                                          0x00b1f6ff, 0x00b2f7ff, 0x00b4f8ff, 0x00b6faff, 0x00b8fbff, 0x00bafcff, 0x00bcfeff, 0x00beffff,
                                          0x00c0ffff, 0x00c2fefd, 0x00c5fefc, 0x00c7fdfb, 0x00c9fdfa, 0x00cbfcf9, 0x00cdfcf7, 0x00d0fcf6,
                                          0x00d2fbf5, 0x00d4fbf4, 0x00d6faf3, 0x00d8faf1, 0x00dbf9f0, 0x00ddf9ef, 0x00dff8ee, 0x00e1f8ed,
                                          0x00e3f7ec, 0x00e5f7ea, 0x00e8f6e9, 0x00eaf6e8, 0x00ecf6e7, 0x00eef5e6, 0x00f0f5e4, 0x00f3f4e3,
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dcc28d, 0x00dbc08b, 0x00dabe89, 0x00d9bc87, 0x00d8ba85, 0x00d7b983, 0x00d6b781,
                                          0x00d5b57f, 0x00d4b37d, 0x00d3b17b, 0x00d2af79, 0x00d1ad77, 0x00d0ab75, 0x00cfa973, 0x00cfa771,
                                          0x00cea56f, 0x00cda36d, 0x00cca16b, 0x00cb9f6a, 0x00c99d68, 0x00c89b66, 0x00c79964, 0x00c69762,
                                          0x00c59560, 0x00c4935e, 0x00c2915c, 0x00c18f5a, 0x00c08c58, 0x00bf8a56, 0x00be8854, 0x00bd8652,
                                          0x00bb8451, 0x00ba814f, 0x00b97f4d, 0x00b87d4b, 0x00b77b49, 0x00b57847, 0x00b47645, 0x00b37444,
                                          0x00b27243, 0x00b16f43, 0x00b06d42, 0x00ae6a41, 0x00ad6840, 0x00ac6640, 0x00ab633f, 0x00aa613e,
                                          0x00a95e3e, 0x00a75c3d, 0x00a6593c, 0x00a5573b, 0x00a4553b, 0x00a3523a, 0x00a24f39, 0x00a04d38,
                                          0x009f4a38, 0x009e4837, 0x009d4536, 0x009c4335, 0x009a4035, 0x00993d34, 0x00983b33, 0x00973833,

                                          0x00971a00, 0x00961900, 0x00951700, 0x00931600, 0x00921400, 0x00911200, 0x008f1100, 0x008e0f00,
                                          0x008d0e00, 0x008b0c00, 0x008a0a00, 0x00890900, 0x00870700, 0x00860600, 0x00850400, 0x00830200,
                                          0x00820100, 0x00810000, 0x007f0000, 0x007e0000, 0x007c0000, 0x007b0000, 0x007a0000, 0x00780000,
                                          0x00770000, 0x00760000, 0x00740000, 0x00730000, 0x00720000, 0x00700000, 0x006f0000, 0x006e0000,
                                          0x006c0000, 0x006b0000, 0x006a0000, 0x00680000, 0x00670000, 0x00660000, 0x00640000, 0x00630000,
                                          0x00610000, 0x00600000, 0x005f0000, 0x005d0000, 0x005c0000, 0x005b0000, 0x00590000, 0x00580000,
                                          0x00570000, 0x00550000, 0x00540000, 0x00530000, 0x00510000, 0x00500000, 0x004f0000, 0x004d0000,
                                          0x004c0000, 0x004a0000, 0x00490000, 0x00480000, 0x00460000, 0x00450000, 0x00440000, 0x00420000,
                                          0x00410000, 0x00400000, 0x003e0000, 0x003d0000, 0x003c0000, 0x003a0000, 0x00390000, 0x00380000,
                                          0x00360000, 0x00350000, 0x00340000, 0x00320000, 0x00310000, 0x002f0000, 0x002e0000, 0x002d0000,
};


static const PaletteConstFWD<sizeof(colors_superblue_b_6) / sizeof(unsigned int)> palette_superblue_b_6(colors_superblue_b_6);
static const PaletteConstBWD<sizeof(colors_superblue_b_6) / sizeof(unsigned int)> palette_superblue_b_6_inv(colors_superblue_b_6);


static const unsigned int colors_superblue_b_7[] = {
                                          0x004166f1, 0x004269f2, 0x00436bf3, 0x00446ef4, 0x004570f4, 0x004673f5, 0x004775f5, 0x004878f6,
                                          0x004a7af6, 0x004b7df6, 0x004c80f7, 0x004d82f7, 0x004e85f7, 0x004f87f8, 0x00508af8, 0x00518cf8,
                                          0x00538ff9, 0x005491f9, 0x005594fa, 0x005696fa, 0x005799fa, 0x00589bfb, 0x00599efb, 0x005aa0fb,
                                          0x005ca2fc, 0x005da5fc, 0x005ea7fc, 0x005faafd, 0x0061acfd, 0x0062aefd, 0x0064b0fe, 0x0066b3fe,
                                          0x0068b5ff, 0x006ab7ff, 0x006bb9ff, 0x006dbbff, 0x006fbeff, 0x0071c0ff, 0x0073c2ff, 0x0075c4ff,
                                          0x0076c6ff, 0x0078c8ff, 0x007acaff, 0x007cccff, 0x007ecdff, 0x007fcfff, 0x0081d1ff, 0x0083d3ff,
                                          0x0085d5ff, 0x0087d6ff, 0x0089d8ff, 0x008ad9ff, 0x008cdbff, 0x008eddff, 0x0090deff, 0x0092e0ff,
                                          0x0093e1ff, 0x0095e3ff, 0x0097e4ff, 0x0099e5ff, 0x009be7ff, 0x009de8ff, 0x009ee9ff, 0x00a0ebff,

                                          0x00a2ecff, 0x00a4edff, 0x00a6eeff, 0x00a7f0ff, 0x00a9f1ff, 0x00abf2ff, 0x00adf3ff, 0x00aff5ff,
                                          0x00b1f6ff, 0x00b2f7ff, 0x00b4f8ff, 0x00b6faff, 0x00b8fbff, 0x00bafcff, 0x00bcfeff, 0x00beffff,
                                          0x00c0ffff, 0x00c2fefd, 0x00c5fefc, 0x00c7fdfb, 0x00c9fdfa, 0x00cbfcf9, 0x00cdfcf7, 0x00d0fcf6,
                                          0x00d2fbf5, 0x00d4fbf4, 0x00d6faf3, 0x00d8faf1, 0x00dbf9f0, 0x00ddf9ef, 0x00dff8ee, 0x00e1f8ed,
                                          0x00e3f7ec, 0x00e5f7ea, 0x00e8f6e9, 0x00eaf6e8, 0x00ecf6e7, 0x00eef5e6, 0x00f0f5e4, 0x00f3f4e3,
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dcc28d, 0x00dbc08b, 0x00dabe89, 0x00d9bc87, 0x00d8ba85, 0x00d7b983, 0x00d6b781,
                                          0x00d5b57f, 0x00d4b37d, 0x00d3b17b, 0x00d2af79, 0x00d1ad77, 0x00d0ab75, 0x00cfa973, 0x00cfa771,
                                          0x00cea56f, 0x00cda36d, 0x00cca16b, 0x00cb9f6a, 0x00c99d68, 0x00c89b66, 0x00c79964, 0x00c69762,
                                          0x00c59560, 0x00c4935e, 0x00c2915c, 0x00c18f5a, 0x00c08c58, 0x00bf8a56, 0x00be8854, 0x00bd8652,
                                          0x00bb8451, 0x00ba814f, 0x00b97f4d, 0x00b87d4b, 0x00b77b49, 0x00b57847, 0x00b47645, 0x00b37444,
                                          0x00b27243, 0x00b16f43, 0x00b06d42, 0x00ae6a41, 0x00ad6840, 0x00ac6640, 0x00ab633f, 0x00aa613e,
                                          0x00a95e3e, 0x00a75c3d, 0x00a6593c, 0x00a5573b, 0x00a4553b, 0x00a3523a, 0x00a24f39, 0x00a04d38,
                                          0x009f4a38, 0x009e4837, 0x009d4536, 0x009c4335, 0x009a4035, 0x00993d34, 0x00983b33, 0x00973833,

                                          0x00971a00, 0x00961900, 0x00951700, 0x00931600, 0x00921400, 0x00911200, 0x008f1100, 0x008e0f00,
                                          0x008d0e00, 0x008b0c00, 0x008a0a00, 0x00890900, 0x00870700, 0x00860600, 0x00850400, 0x00830200,
                                          0x00820100, 0x00810000, 0x007f0000, 0x007e0000, 0x007c0000, 0x007b0000, 0x007a0000, 0x00780000,
                                          0x00770000, 0x00760000, 0x00740000, 0x00730000, 0x00720000, 0x00700000, 0x006f0000, 0x006e0000,
                                          0x006c0000, 0x006b0000, 0x006a0000, 0x00680000, 0x00670000, 0x00660000, 0x00640000, 0x00630000,
                                          0x00610000, 0x00600000, 0x005f0000, 0x005d0000, 0x005c0000, 0x005b0000, 0x00590000, 0x00580000,
                                          0x00570000, 0x00550000, 0x00540000, 0x00530000, 0x00510000, 0x00500000, 0x004f0000, 0x004d0000,
                                          0x004c0000, 0x004a0000, 0x00490000, 0x00480000, 0x00460000, 0x00450000, 0x00440000, 0x00420000,
                                          0x00410000, 0x00400000, 0x003e0000, 0x003d0000, 0x003c0000, 0x003a0000, 0x00390000, 0x00380000,
                                          0x00360000, 0x00350000, 0x00340000, 0x00320000, 0x00310000, 0x002f0000, 0x002e0000, 0x002d0000,
                                          0x002b0000, 0x002a0000, 0x00290000, 0x00270000, 0x00260000, 0x00250000, 0x00230000, 0x00220000,
};


static const PaletteConstFWD<sizeof(colors_superblue_b_7) / sizeof(unsigned int)> palette_superblue_b_7(colors_superblue_b_7);
static const PaletteConstBWD<sizeof(colors_superblue_b_7) / sizeof(unsigned int)> palette_superblue_b_7_inv(colors_superblue_b_7);

static const unsigned int colors_superblue_b_8[] = {
                                          0x004a7af6, 0x004b7df6, 0x004c80f7, 0x004d82f7, 0x004e85f7, 0x004f87f8, 0x00508af8, 0x00518cf8,
                                          0x00538ff9, 0x005491f9, 0x005594fa, 0x005696fa, 0x005799fa, 0x00589bfb, 0x00599efb, 0x005aa0fb,
                                          0x005ca2fc, 0x005da5fc, 0x005ea7fc, 0x005faafd, 0x0061acfd, 0x0062aefd, 0x0064b0fe, 0x0066b3fe,
                                          0x0068b5ff, 0x006ab7ff, 0x006bb9ff, 0x006dbbff, 0x006fbeff, 0x0071c0ff, 0x0073c2ff, 0x0075c4ff,
                                          0x0076c6ff, 0x0078c8ff, 0x007acaff, 0x007cccff, 0x007ecdff, 0x007fcfff, 0x0081d1ff, 0x0083d3ff,
                                          0x0085d5ff, 0x0087d6ff, 0x0089d8ff, 0x008ad9ff, 0x008cdbff, 0x008eddff, 0x0090deff, 0x0092e0ff,
                                          0x0093e1ff, 0x0095e3ff, 0x0097e4ff, 0x0099e5ff, 0x009be7ff, 0x009de8ff, 0x009ee9ff, 0x00a0ebff,

                                          0x00a2ecff, 0x00a4edff, 0x00a6eeff, 0x00a7f0ff, 0x00a9f1ff, 0x00abf2ff, 0x00adf3ff, 0x00aff5ff,
                                          0x00b1f6ff, 0x00b2f7ff, 0x00b4f8ff, 0x00b6faff, 0x00b8fbff, 0x00bafcff, 0x00bcfeff, 0x00beffff,
                                          0x00c0ffff, 0x00c2fefd, 0x00c5fefc, 0x00c7fdfb, 0x00c9fdfa, 0x00cbfcf9, 0x00cdfcf7, 0x00d0fcf6,
                                          0x00d2fbf5, 0x00d4fbf4, 0x00d6faf3, 0x00d8faf1, 0x00dbf9f0, 0x00ddf9ef, 0x00dff8ee, 0x00e1f8ed,
                                          0x00e3f7ec, 0x00e5f7ea, 0x00e8f6e9, 0x00eaf6e8, 0x00ecf6e7, 0x00eef5e6, 0x00f0f5e4, 0x00f3f4e3,
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dcc28d, 0x00dbc08b, 0x00dabe89, 0x00d9bc87, 0x00d8ba85, 0x00d7b983, 0x00d6b781,
                                          0x00d5b57f, 0x00d4b37d, 0x00d3b17b, 0x00d2af79, 0x00d1ad77, 0x00d0ab75, 0x00cfa973, 0x00cfa771,
                                          0x00cea56f, 0x00cda36d, 0x00cca16b, 0x00cb9f6a, 0x00c99d68, 0x00c89b66, 0x00c79964, 0x00c69762,
                                          0x00c59560, 0x00c4935e, 0x00c2915c, 0x00c18f5a, 0x00c08c58, 0x00bf8a56, 0x00be8854, 0x00bd8652,
                                          0x00bb8451, 0x00ba814f, 0x00b97f4d, 0x00b87d4b, 0x00b77b49, 0x00b57847, 0x00b47645, 0x00b37444,
                                          0x00b27243, 0x00b16f43, 0x00b06d42, 0x00ae6a41, 0x00ad6840, 0x00ac6640, 0x00ab633f, 0x00aa613e,
                                          0x00a95e3e, 0x00a75c3d, 0x00a6593c, 0x00a5573b, 0x00a4553b, 0x00a3523a, 0x00a24f39, 0x00a04d38,
                                          0x009f4a38, 0x009e4837, 0x009d4536, 0x009c4335, 0x009a4035, 0x00993d34, 0x00983b33, 0x00973833,

                                          0x00971a00, 0x00961900, 0x00951700, 0x00931600, 0x00921400, 0x00911200, 0x008f1100, 0x008e0f00,
                                          0x008d0e00, 0x008b0c00, 0x008a0a00, 0x00890900, 0x00870700, 0x00860600, 0x00850400, 0x00830200,
                                          0x00820100, 0x00810000, 0x007f0000, 0x007e0000, 0x007c0000, 0x007b0000, 0x007a0000, 0x00780000,
                                          0x00770000, 0x00760000, 0x00740000, 0x00730000, 0x00720000, 0x00700000, 0x006f0000, 0x006e0000,
                                          0x006c0000, 0x006b0000, 0x006a0000, 0x00680000, 0x00670000, 0x00660000, 0x00640000, 0x00630000,
                                          0x00610000, 0x00600000, 0x005f0000, 0x005d0000, 0x005c0000, 0x005b0000, 0x00590000, 0x00580000,
                                          0x00570000, 0x00550000, 0x00540000, 0x00530000, 0x00510000, 0x00500000, 0x004f0000, 0x004d0000,
                                          0x004c0000, 0x004a0000, 0x00490000, 0x00480000, 0x00460000, 0x00450000, 0x00440000, 0x00420000,
                                          0x00410000, 0x00400000, 0x003e0000, 0x003d0000, 0x003c0000, 0x003a0000, 0x00390000, 0x00380000,
                                          0x00360000, 0x00350000, 0x00340000, 0x00320000, 0x00310000, 0x002f0000, 0x002e0000, 0x002d0000,
};


static const PaletteConstFWD<sizeof(colors_superblue_b_8) / sizeof(unsigned int)> palette_superblue_b_8(colors_superblue_b_8);
static const PaletteConstBWD<sizeof(colors_superblue_b_8) / sizeof(unsigned int)> palette_superblue_b_8_inv(colors_superblue_b_8);




static const unsigned int colors_superblue_b_9[] = {
                                          0x0068b5ff, 0x006ab7ff, 0x006bb9ff, 0x006dbbff, 0x006fbeff, 0x0071c0ff, 0x0073c2ff, 0x0075c4ff,
                                          0x0076c6ff, 0x0078c8ff, 0x007acaff, 0x007cccff, 0x007ecdff, 0x007fcfff, 0x0081d1ff, 0x0083d3ff,
                                          0x0085d5ff, 0x0087d6ff, 0x0089d8ff, 0x008ad9ff, 0x008cdbff, 0x008eddff, 0x0090deff, 0x0092e0ff,
                                          0x0093e1ff, 0x0095e3ff, 0x0097e4ff, 0x0099e5ff, 0x009be7ff, 0x009de8ff, 0x009ee9ff, 0x00a0ebff,

                                          0x00a2ecff, 0x00a4edff, 0x00a6eeff, 0x00a7f0ff, 0x00a9f1ff, 0x00abf2ff, 0x00adf3ff, 0x00aff5ff,
                                          0x00b1f6ff, 0x00b2f7ff, 0x00b4f8ff, 0x00b6faff, 0x00b8fbff, 0x00bafcff, 0x00bcfeff, 0x00beffff,
                                          0x00c0ffff, 0x00c2fefd, 0x00c5fefc, 0x00c7fdfb, 0x00c9fdfa, 0x00cbfcf9, 0x00cdfcf7, 0x00d0fcf6,
                                          0x00d2fbf5, 0x00d4fbf4, 0x00d6faf3, 0x00d8faf1, 0x00dbf9f0, 0x00ddf9ef, 0x00dff8ee, 0x00e1f8ed,
                                          0x00e3f7ec, 0x00e5f7ea, 0x00e8f6e9, 0x00eaf6e8, 0x00ecf6e7, 0x00eef5e6, 0x00f0f5e4, 0x00f3f4e3,
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dcc28d, 0x00dbc08b, 0x00dabe89, 0x00d9bc87, 0x00d8ba85, 0x00d7b983, 0x00d6b781,
                                          0x00d5b57f, 0x00d4b37d, 0x00d3b17b, 0x00d2af79, 0x00d1ad77, 0x00d0ab75, 0x00cfa973, 0x00cfa771,
                                          0x00cea56f, 0x00cda36d, 0x00cca16b, 0x00cb9f6a, 0x00c99d68, 0x00c89b66, 0x00c79964, 0x00c69762,
                                          0x00c59560, 0x00c4935e, 0x00c2915c, 0x00c18f5a, 0x00c08c58, 0x00bf8a56, 0x00be8854, 0x00bd8652,
                                          0x00bb8451, 0x00ba814f, 0x00b97f4d, 0x00b87d4b, 0x00b77b49, 0x00b57847, 0x00b47645, 0x00b37444,
                                          0x00b27243, 0x00b16f43, 0x00b06d42, 0x00ae6a41, 0x00ad6840, 0x00ac6640, 0x00ab633f, 0x00aa613e,
                                          0x00a95e3e, 0x00a75c3d, 0x00a6593c, 0x00a5573b, 0x00a4553b, 0x00a3523a, 0x00a24f39, 0x00a04d38,
                                          0x009f4a38, 0x009e4837, 0x009d4536, 0x009c4335, 0x009a4035, 0x00993d34, 0x00983b33, 0x00973833,

                                          0x00971a00, 0x00961900, 0x00951700, 0x00931600, 0x00921400, 0x00911200, 0x008f1100, 0x008e0f00,
                                          0x008d0e00, 0x008b0c00, 0x008a0a00, 0x00890900, 0x00870700, 0x00860600, 0x00850400, 0x00830200,
                                          0x00820100, 0x00810000, 0x007f0000, 0x007e0000, 0x007c0000, 0x007b0000, 0x007a0000, 0x00780000,
                                          0x00770000, 0x00760000, 0x00740000, 0x00730000, 0x00720000, 0x00700000, 0x006f0000, 0x006e0000,
                                          0x006c0000, 0x006b0000, 0x006a0000, 0x00680000, 0x00670000, 0x00660000, 0x00640000, 0x00630000,
                                          0x00610000, 0x00600000, 0x005f0000, 0x005d0000, 0x005c0000, 0x005b0000, 0x00590000, 0x00580000,
                                          0x00570000, 0x00550000, 0x00540000, 0x00530000, 0x00510000, 0x00500000, 0x004f0000, 0x004d0000,
                                          0x004c0000, 0x004a0000, 0x00490000, 0x00480000, 0x00460000, 0x00450000, 0x00440000, 0x00420000,
                                          0x00410000, 0x00400000, 0x003e0000, 0x003d0000, 0x003c0000, 0x003a0000, 0x00390000, 0x00380000,
                                          0x00360000, 0x00350000, 0x00340000, 0x00320000, 0x00310000, 0x002f0000, 0x002e0000, 0x002d0000,
};


static const PaletteConstFWD<sizeof(colors_superblue_b_9) / sizeof(unsigned int)> palette_superblue_b_9(colors_superblue_b_9);
static const PaletteConstBWD<sizeof(colors_superblue_b_9) / sizeof(unsigned int)> palette_superblue_b_9_inv(colors_superblue_b_9);




static const unsigned int colors_superblue_b_10[] = {
                                          0x002503a8, 0x002507ac, 0x00260bb0, 0x00260fb4, 0x002612b8, 0x002616bc, 0x00261ac0, 0x00261ec4,
                                          0x002621c8, 0x002725cc, 0x002729d0, 0x00272dd4, 0x002731d7, 0x002935da, 0x002b3adc, 0x002e3ede,
                                          0x003043e0, 0x003247e3, 0x00344ce5, 0x003751e7, 0x003955e9, 0x003b5aeb, 0x003d5fee, 0x004064f0,
                                          0x004269f2, 0x00446ef4, 0x004673f5, 0x004878f6, 0x004b7df6, 0x004d82f7, 0x004f87f8, 0x00518cf8,
                                          0x005491f9, 0x005696fa, 0x00589bfb, 0x005aa0fb, 0x005da5fc, 0x005faafd, 0x0062aefd, 0x0066b3fe,
                                          0x006ab7ff, 0x006dbbff, 0x0071c0ff, 0x0075c4ff, 0x0078c8ff, 0x007cccff, 0x007fcfff, 0x0083d3ff,
                                          0x0085d5ff, 0x0087d6ff, 0x0089d8ff, 0x008ad9ff, 0x008cdbff, 0x008eddff, 0x0090deff, 0x0092e0ff,
                                          0x0093e1ff, 0x0095e3ff, 0x0097e4ff, 0x0099e5ff, 0x009be7ff, 0x009de8ff, 0x009ee9ff, 0x00a0ebff,

                                          0x00a2ecff, 0x00a4edff, 0x00a6eeff, 0x00a7f0ff, 0x00a9f1ff, 0x00abf2ff, 0x00adf3ff, 0x00aff5ff,
                                          0x00b1f6ff, 0x00b2f7ff, 0x00b4f8ff, 0x00b6faff, 0x00b8fbff, 0x00bafcff, 0x00bcfeff, 0x00beffff,
                                          0x00c0ffff, 0x00c2fefd, 0x00c5fefc, 0x00c7fdfb, 0x00c9fdfa, 0x00cbfcf9, 0x00cdfcf7, 0x00d0fcf6,
                                          0x00d2fbf5, 0x00d4fbf4, 0x00d6faf3, 0x00d8faf1, 0x00dbf9f0, 0x00ddf9ef, 0x00dff8ee, 0x00e1f8ed,
                                          0x00e3f7ec, 0x00e5f7ea, 0x00e8f6e9, 0x00eaf6e8, 0x00ecf6e7, 0x00eef5e6, 0x00f0f5e4, 0x00f3f4e3,
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dcc28d, 0x00dbc08b, 0x00dabe89, 0x00d9bc87, 0x00d8ba85, 0x00d7b983, 0x00d6b781,
                                          0x00d5b57f, 0x00d4b37d, 0x00d3b17b, 0x00d2af79, 0x00d1ad77, 0x00d0ab75, 0x00cfa973, 0x00cfa771,
                                          0x00cea56f, 0x00cda36d, 0x00cca16b, 0x00cb9f6a, 0x00c99d68, 0x00c89b66, 0x00c79964, 0x00c69762,
                                          0x00c59560, 0x00c4935e, 0x00c2915c, 0x00c18f5a, 0x00c08c58, 0x00bf8a56, 0x00be8854, 0x00bd8652,
                                          0x00bb8451, 0x00ba814f, 0x00b97f4d, 0x00b87d4b, 0x00b77b49, 0x00b57847, 0x00b47645, 0x00b37444,
                                          0x00b27243, 0x00b16f43, 0x00b06d42, 0x00ae6a41, 0x00ad6840, 0x00ac6640, 0x00ab633f, 0x00aa613e,
                                          0x00a95e3e, 0x00a75c3d, 0x00a6593c, 0x00a5573b, 0x00a4553b, 0x00a3523a, 0x00a24f39, 0x00a04d38,
                                          0x009f4a38, 0x009e4837, 0x009d4536, 0x009c4335, 0x009a4035, 0x00993d34, 0x00983b33, 0x00973833,

                                          0x00971a00, 0x00961900, 0x00951700, 0x00931600, 0x00921400, 0x00911200, 0x008f1100, 0x008e0f00,
                                          0x008d0e00, 0x008b0c00, 0x008a0a00, 0x00890900, 0x00870700, 0x00860600, 0x00850400, 0x00830200,
                                          0x00820100, 0x00810000, 0x007f0000, 0x007e0000, 0x007c0000, 0x007b0000, 0x007a0000, 0x00780000,
                                          0x00770000, 0x00760000, 0x00740000, 0x00730000, 0x00720000, 0x00700000, 0x006f0000, 0x006e0000,
                                          0x006c0000, 0x006b0000, 0x006a0000, 0x00680000, 0x00670000, 0x00660000, 0x00640000, 0x00630000,
                                          0x00610000, 0x00600000, 0x005f0000, 0x005d0000, 0x005c0000, 0x005b0000, 0x00590000, 0x00580000,
                                          0x00570000, 0x00550000, 0x00540000, 0x00530000, 0x00510000, 0x00500000, 0x004f0000, 0x004d0000,
                                          0x004c0000, 0x004a0000, 0x00490000, 0x00480000, 0x00460000, 0x00450000, 0x00440000, 0x00420000,
                                          0x00410000, 0x00400000, 0x003e0000, 0x003d0000, 0x003c0000, 0x003a0000, 0x00390000, 0x00380000,
                                          0x00360000, 0x00350000, 0x00340000, 0x00320000, 0x00310000, 0x002f0000, 0x002e0000, 0x002d0000,
};


static const PaletteConstFWD<sizeof(colors_superblue_b_10) / sizeof(unsigned int)> palette_superblue_b_10(colors_superblue_b_10);
static const PaletteConstBWD<sizeof(colors_superblue_b_10) / sizeof(unsigned int)> palette_superblue_b_10_inv(colors_superblue_b_10);



static const unsigned int colors_superblue_b_11[] = {
                                          0x004f87f8, 0x00518cf8,
                                          0x005491f9, 0x005696fa, 0x00589bfb, 0x005aa0fb, 0x005da5fc, 0x005faafd, 0x0062aefd, 0x0066b3fe,
                                          0x006ab7ff, 0x006dbbff, 0x0071c0ff, 0x0075c4ff, 0x0078c8ff, 0x007cccff, 0x007fcfff, 0x0083d3ff,
                                          0x0087d6ff, 0x008ad9ff, 0x008eddff, 0x0092e0ff, 0x0095e3ff, 0x0099e5ff, 0x009de8ff, 0x00a0ebff,
                                          0x00a4edff, 0x00a7f0ff, 0x00abf2ff, 0x00aff5ff, 0x00b2f7ff, 0x00b6faff, 0x00bafcff, 0x00beffff,
                                          0x00c2fefd, 0x00c7fdfb, 0x00cbfcf9, 0x00d0fcf6, 0x00d4fbf4, 0x00d8faf1, 0x00ddf9ef, 0x00e1f8ed,

                                          0x00e3f7ec, 0x00e5f7ea, 0x00e8f6e9, 0x00eaf6e8, 0x00ecf6e7, 0x00eef5e6, 0x00f0f5e4, 0x00f3f4e3,
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dcc28d, 0x00dbc08b, 0x00dabe89, 0x00d9bc87, 0x00d8ba85, 0x00d7b983, 0x00d6b781,
                                          0x00d5b57f, 0x00d4b37d, 0x00d3b17b, 0x00d2af79, 0x00d1ad77, 0x00d0ab75, 0x00cfa973, 0x00cfa771,
                                          0x00cea56f, 0x00cda36d, 0x00cca16b, 0x00cb9f6a, 0x00c99d68, 0x00c89b66, 0x00c79964, 0x00c69762,
                                          0x00c59560, 0x00c4935e, 0x00c2915c, 0x00c18f5a, 0x00c08c58, 0x00bf8a56, 0x00be8854, 0x00bd8652,
                                          0x00bb8451, 0x00ba814f, 0x00b97f4d, 0x00b87d4b, 0x00b77b49, 0x00b57847, 0x00b47645, 0x00b37444,
                                          0x00b27243, 0x00b16f43, 0x00b06d42, 0x00ae6a41, 0x00ad6840, 0x00ac6640, 0x00ab633f, 0x00aa613e,
                                          0x00a95e3e, 0x00a75c3d, 0x00a6593c, 0x00a5573b, 0x00a4553b, 0x00a3523a, 0x00a24f39, 0x00a04d38,
                                          0x009f4a38, 0x009e4837, 0x009d4536, 0x009c4335, 0x009a4035, 0x00993d34, 0x00983b33, 0x00973833,

                                          0x00971a00, 0x00961900, 0x00951700, 0x00931600, 0x00921400, 0x00911200, 0x008f1100, 0x008e0f00,
                                          0x008d0e00, 0x008b0c00, 0x008a0a00, 0x00890900, 0x00870700, 0x00860600, 0x00850400, 0x00830200,
                                          0x00820100, 0x00810000, 0x007f0000, 0x007e0000, 0x007c0000, 0x007b0000, 0x007a0000, 0x00780000,
                                          0x00770000, 0x00760000, 0x00740000, 0x00730000, 0x00720000, 0x00700000, 0x006f0000, 0x006e0000,
                                          0x006c0000, 0x006b0000, 0x006a0000, 0x00680000, 0x00670000, 0x00660000, 0x00640000, 0x00630000,
                                          0x00610000, 0x00600000, 0x005f0000, 0x005d0000, 0x005c0000, 0x005b0000, 0x00590000, 0x00580000,
                                          0x00570000, 0x00550000, 0x00540000, 0x00530000, 0x00510000, 0x00500000, 0x004f0000, 0x004d0000,
                                          0x004c0000, 0x004a0000, 0x00490000, 0x00480000, 0x00460000, 0x00450000, 0x00440000, 0x00420000,
                                          0x00410000, 0x00400000, 0x003e0000, 0x003d0000, 0x003c0000, 0x003a0000, 0x00390000, 0x00380000,
                                          0x00360000, 0x00350000, 0x00340000, 0x00320000, 0x00310000, 0x002f0000, 0x002e0000, 0x002d0000,
};


static const PaletteConstFWD<sizeof(colors_superblue_b_11) / sizeof(unsigned int)> palette_superblue_b_11(colors_superblue_b_11);
static const PaletteConstBWD<sizeof(colors_superblue_b_11) / sizeof(unsigned int)> palette_superblue_b_11_inv(colors_superblue_b_11);



static const unsigned int colors_superblue_b_12[] = {
                                          0x005491f9, 0x005696fa, 0x00589bfb, 0x005aa0fb, 0x005da5fc, 0x005faafd, 0x0062aefd, 0x0066b3fe,
                                          0x006ab7ff, 0x006dbbff, 0x0071c0ff, 0x0075c4ff, 0x0078c8ff, 0x007cccff, 0x007fcfff, 0x0083d3ff,
                                          0x0087d6ff, 0x008ad9ff, 0x008eddff, 0x0092e0ff, 0x0095e3ff, 0x0099e5ff, 0x009de8ff, 0x00a0ebff,
                                          0x00a4edff, 0x00a7f0ff, 0x00abf2ff, 0x00aff5ff, 0x00b2f7ff, 0x00b6faff, 0x00bafcff, 0x00beffff,
                                          0x00c2fefd, 0x00c7fdfb, 0x00cbfcf9, 0x00d0fcf6, 0x00d4fbf4, 0x00d8faf1, 0x00ddf9ef, 0x00e1f8ed,

                                          0x00e3f7ec, 0x00e5f7ea, 0x00e8f6e9, 0x00eaf6e8, 0x00ecf6e7, 0x00eef5e6, 0x00f0f5e4, 0x00f3f4e3,
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dcc28d, 0x00dbc08b, 0x00dabe89, 0x00d9bc87, 0x00d8ba85, 0x00d7b983, 0x00d6b781,
                                          0x00d5b57f, 0x00d4b37d, 0x00d3b17b, 0x00d2af79, 0x00d1ad77, 0x00d0ab75, 0x00cfa973, 0x00cfa771,
                                          0x00cea56f, 0x00cda36d, 0x00cca16b, 0x00cb9f6a, 0x00c99d68, 0x00c89b66, 0x00c79964, 0x00c69762,
                                          0x00c59560, 0x00c4935e, 0x00c2915c, 0x00c18f5a, 0x00c08c58, 0x00bf8a56, 0x00be8854, 0x00bd8652,
                                          0x00bb8451, 0x00ba814f, 0x00b97f4d, 0x00b87d4b, 0x00b77b49, 0x00b57847, 0x00b47645, 0x00b37444,
                                          0x00b27243, 0x00b16f43, 0x00b06d42, 0x00ae6a41, 0x00ad6840, 0x00ac6640, 0x00ab633f, 0x00aa613e,
                                          0x00a95e3e, 0x00a75c3d, 0x00a6593c, 0x00a5573b, 0x00a4553b, 0x00a3523a, 0x00a24f39, 0x00a04d38,
                                          0x009f4a38, 0x009e4837, 0x009d4536, 0x009c4335, 0x009a4035, 0x00993d34, 0x00983b33, 0x00973833,

                                          0x00971a00, 0x00961900, 0x00951700, 0x00931600, 0x00921400, 0x00911200, 0x008f1100, 0x008e0f00,
                                          0x008d0e00, 0x008b0c00, 0x008a0a00, 0x00890900, 0x00870700, 0x00860600, 0x00850400, 0x00830200,
                                          0x00820100, 0x00810000, 0x007f0000, 0x007e0000, 0x007c0000, 0x007b0000, 0x007a0000, 0x00780000,
                                          0x00770000, 0x00760000, 0x00740000, 0x00730000, 0x00720000, 0x00700000, 0x006f0000, 0x006e0000,
                                          0x006c0000, 0x006b0000, 0x006a0000, 0x00680000, 0x00670000, 0x00660000, 0x00640000, 0x00630000,
                                          0x00610000, 0x00600000, 0x005f0000, 0x005d0000, 0x005c0000, 0x005b0000, 0x00590000, 0x00580000,
                                          0x00570000, 0x00550000, 0x00540000, 0x00530000, 0x00510000, 0x00500000, 0x004f0000, 0x004d0000,
                                          0x004c0000, 0x004a0000, 0x00490000, 0x00480000, 0x00460000, 0x00450000, 0x00440000, 0x00420000,
                                          0x00410000, 0x00400000, 0x003e0000, 0x003d0000, 0x003c0000, 0x003a0000, 0x00390000, 0x00380000,
                                          0x00360000, 0x00350000, 0x00340000, 0x00320000, 0x00310000, 0x002f0000, //0x002e0000, 0x002d0000,
};


static const PaletteConstFWD<sizeof(colors_superblue_b_12) / sizeof(unsigned int)> palette_superblue_b_12(colors_superblue_b_12);
static const PaletteConstBWD<sizeof(colors_superblue_b_12) / sizeof(unsigned int)> palette_superblue_b_12_inv(colors_superblue_b_12);


static const unsigned int colors_superblue_b_13[] = {
                                          0x005491f9, 0x005696fa, 0x00589bfb, 0x005aa0fb, 0x005da5fc, 0x005faafd, 0x0062aefd, 0x0066b3fe,
                                          0x006ab7ff, 0x006dbbff, 0x0071c0ff, 0x0075c4ff, 0x0078c8ff, 0x007cccff, 0x007fcfff, 0x0083d3ff,
                                          0x0087d6ff, 0x008ad9ff, 0x008eddff, 0x0092e0ff, 0x0095e3ff, 0x0099e5ff, 0x009de8ff, 0x00a0ebff,
                                          0x00a4edff, 0x00a7f0ff, 0x00abf2ff, 0x00aff5ff, 0x00b2f7ff, 0x00b6faff, 0x00bafcff, 0x00beffff,
                                          0x00c2fefd, 0x00c7fdfb, 0x00cbfcf9, 0x00d0fcf6, 0x00d4fbf4, 0x00d8faf1, 0x00ddf9ef, 0x00e1f8ed,

                                          0x00e3f7ec, 0x00e5f7ea, 0x00e8f6e9, 0x00eaf6e8, 0x00ecf6e7, 0x00eef5e6, 0x00f0f5e4, 0x00f3f4e3,
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dcc28d, 0x00dbc08b, 0x00dabe89, 0x00d9bc87, 0x00d8ba85, 0x00d7b983, 0x00d6b781,
                                          0x00d5b57f, 0x00d4b37d, 0x00d3b17b, 0x00d2af79, 0x00d1ad77, 0x00d0ab75, 0x00cfa973, 0x00cfa771,
                                          0x00cea56f, 0x00cda36d, 0x00cca16b, 0x00cb9f6a, 0x00c99d68, 0x00c89b66, 0x00c79964, 0x00c69762,
                                          0x00c59560, 0x00c4935e, 0x00c2915c, 0x00c18f5a, 0x00c08c58, 0x00bf8a56, 0x00be8854, 0x00bd8652,

                                          0x00bb8451, 0x00b97f4d, 0x00b77b49, 0x00b47645, 0x00b27243, 0x00b06d42, 0x00ad6840, 0x00ab633f,
                                          0x00a95e3e, 0x00a6593c, 0x00a4553b, 0x00a24f39, 0x009f4a38, 0x009d4536, 0x009a4035, 0x00983b33,

                                          0x00961900, 0x00931600, 0x00911200, 0x008e0f00, 0x008b0c00, 0x00890900, 0x00860600, 0x00830200,
                                          0x00810000, 0x007e0000, 0x007b0000, 0x00780000, 0x00760000, 0x00730000, 0x00700000, 0x006e0000,
                                          0x006b0000, 0x00680000, 0x00660000, 0x00630000, 0x00600000, 0x005d0000, 0x005b0000, 0x00580000, 
                                          0x00550000, 0x00530000, 0x00500000, 0x004d0000, 0x004a0000, 0x00480000, 0x00450000, 0x00420000,
                                          0x00400000, 0x003d0000, 0x003a0000, 0x00380000, 0x00350000, 0x00320000, 0x002f0000, 0x002d0000,
};


static const PaletteConstFWD<sizeof(colors_superblue_b_13) / sizeof(unsigned int)> palette_superblue_b_13(colors_superblue_b_13);
static const PaletteConstBWD<sizeof(colors_superblue_b_13) / sizeof(unsigned int)> palette_superblue_b_13_inv(colors_superblue_b_13);


static const unsigned int colors_superblue_b_14[] = {
                                          0x005491f9, 0x005696fa, 0x00589bfb, 0x005aa0fb, 0x005da5fc, 0x005faafd, 0x0062aefd, 0x0066b3fe, 
                                          0x006ab7ff, 0x006dbbff, 0x0071c0ff, 0x0075c4ff, 0x0078c8ff, 0x007cccff, 0x007fcfff, 0x0083d3ff,
                                          0x0087d6ff, 0x008ad9ff, 0x008eddff, 0x0092e0ff, 0x0095e3ff, 0x0099e5ff, 0x009de8ff, 0x00a0ebff,
                                          0x00a4edff, 0x00a7f0ff, 0x00abf2ff, 0x00aff5ff, 0x00b2f7ff, 0x00b6faff, 0x00bafcff, 0x00beffff,
                                          0x00c2fefd, 0x00c7fdfb, 0x00cbfcf9, 0x00d0fcf6, 0x00d4fbf4, 0x00d8faf1, 0x00ddf9ef, 0x00e1f8ed,

                                          0x00e3f7ec, 0x00e5f7ea, 0x00e8f6e9, 0x00eaf6e8, 0x00ecf6e7, 0x00eef5e6, 0x00f0f5e4, 0x00f3f4e3,
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dbc08b, 0x00d9bc87, 0x00d7b983, 0x00d5b57f, 0x00d3b17b, 0x00d1ad77, 0x00cfa973,
                                          0x00cea56f, 0x00cca16b, 0x00c99d68, 0x00c79964, 0x00c59560, 0x00c2915c, 0x00c08c58, 0x00be8854,

                                          0x00bb8451, 0x00b97f4d, 0x00b77b49, 0x00b47645, 0x00b27243, 0x00b06d42, 0x00ad6840, 0x00ab633f,
                                          0x00a95e3e, 0x00a6593c, 0x00a4553b, 0x00a24f39, 0x009f4a38, 0x009d4536, 0x009a4035, 0x00983b33,

                                          0x00961900, 0x00931600, 0x00911200, 0x008e0f00, 0x008b0c00, 0x00890900, 0x00860600, 0x00830200,
                                          0x00810000, 0x007e0000, 0x007b0000, 0x00780000, 0x00760000, 0x00730000, 0x00700000, 0x006e0000,
                                          0x006b0000, 0x00680000, 0x00660000, 0x00630000, 0x00600000, 0x005d0000, 0x005b0000, 0x00580000,
                                          0x00550000, 0x00500000, 0x004a0000, 0x00450000, 0x00400000, 0x003a0000, 0x00320000, 0x002d0000,
};


static const PaletteConstFWD<sizeof(colors_superblue_b_14) / sizeof(unsigned int)> palette_superblue_b_14(colors_superblue_b_14);
static const PaletteConstBWD<sizeof(colors_superblue_b_14) / sizeof(unsigned int)> palette_superblue_b_14_inv(colors_superblue_b_14);



static const unsigned int colors_superblue_b_15[] = {
                                          0x009bbbd6, 0x009dbed7, 0x009ec0d8, 0x009fc2d9, 
                                          0x00a0c4d9, 0x00a1c6da, 0x00a2c8db, 0x00a3cadc, 0x00a4ccdc, 0x00a5cedd, 0x00a6d0de, 0x00a7d1df, 
                                          0x00a8d3e0, 0x00a9d5e0, 0x00aad7e1, 0x00abd9e2, 0x00acdbe3, 0x00addde3, 0x00aedee4, 0x00afe0e5, 
                                          0x00b0e2e6, 0x00b1e4e6, 0x00b2e5e7, 0x00b3e7e8, 0x00b4e9e9, 0x00b7e9e9, 0x00baeaea, 0x00bdebeb, 
                                          0x00c0ecec, 0x00c2ecec, 0x00c5eded, 0x00c7eeee, 0x00caeeee, 0x00ccefef, 0x00cff0f0, 0x00d1f1f1, 
                                          0x00d4f1f1, 0x00d6f2f2, 0x00d9f3f3, 0x00dbf3f3, 0x00ddf4f4, 0x00e0f5f5, 0x00e2f6f6, 0x00e4f6f6, 
                                          0x00e6f7f7, 0x00e8f8f8, 0x00ebf8f8, 0x00edf9f9, 0x00effafa, 0x00f1fafa, 0x00f3fbfb, 0x00f5fcfc,  
  
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dbc08b, 0x00d9bc87, 0x00d7b983, 0x00d5b57f, 0x00d3b17b, 0x00d1ad77, 0x00cfa973,
                                          0x00cea56f, 0x00cca16b, 0x00c99d68, 0x00c79964, 0x00c59560, 0x00c2915c, 0x00c08c58, 0x00be8854,
                                          0x00bb8451, 0x00b97f4d, 0x00b77b49, 0x00b47645, 0x00b27243, 0x00b06d42, 0x00ad6840, 0x00ab633f,
                                          0x00a95e3e, 0x00a6593c, 0x00a4553b, 0x00a24f39, 0x009f4a38, 0x009d4536, 0x009a4035, 0x00983b33,
                                          0x00961900, 0x00931600, 0x00911200, 0x008e0f00, 0x008b0c00, 0x00890900, 0x00860600, 0x00830200,
                                          0x00810000, 0x007e0000, 0x007b0000, 0x00780000, 0x00760000, 0x00700000, 0x006b0000, 0x00660000, 
                                          0x00600000, 0x005b0000, 0x00550000, 0x00500000, 0x004a0000, 0x00450000, 0x00400000, 0x003a0000, 
                                          0x00320000, 0x002d0000,
};


static const PaletteConstFWD<sizeof(colors_superblue_b_15) / sizeof(unsigned int)> palette_superblue_b_15(colors_superblue_b_15);
static const PaletteConstBWD<sizeof(colors_superblue_b_15) / sizeof(unsigned int)> palette_superblue_b_15_inv(colors_superblue_b_15);

static const unsigned int colors_superblue_b_16[] = {
                                          0x008ea0cc, 0x008fa2cd, 0x0090a5ce, 0x0091a7cf, 0x0092aad0, 0x0094acd0, 0x0095aed1, 0x0096b0d2, 
                                          0x0097b3d3, 0x0098b5d4, 0x0099b7d4, 0x009ab9d5, 0x009bbbd6, 0x009dbed7, 0x009ec0d8, 0x009fc2d9, 
                                          0x00a0c4d9, 0x00a1c6da, 0x00a2c8db, 0x00a3cadc, 0x00a4ccdc, 0x00a5cedd, 0x00a6d0de, 0x00a7d1df, 
                                          0x00a8d3e0, 0x00a9d5e0, 0x00aad7e1, 0x00abd9e2, 0x00acdbe3, 0x00addde3, 0x00aedee4, 0x00afe0e5, 
                                          0x00b0e2e6, 0x00b1e4e6, 0x00b2e5e7, 0x00b3e7e8, 0x00b4e9e9, 0x00b7e9e9, 0x00baeaea, 0x00bdebeb, 
                                          0x00c0ecec, 0x00c2ecec, 0x00c5eded, 0x00c7eeee, 0x00caeeee, 0x00ccefef, 0x00cff0f0, 0x00d1f1f1, 
                                          0x00d4f1f1, 0x00d6f2f2, 0x00d9f3f3, 0x00dbf3f3, 0x00ddf4f4, 0x00e0f5f5, 0x00e2f6f6, 0x00e4f6f6, 
                                          0x00e6f7f7, 0x00e8f8f8, 0x00ebf8f8, 0x00edf9f9, 0x00effafa, 0x00f1fafa, 0x00f3fbfb, 0x00f5fcfc,  
  
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dbc08b, 0x00d9bc87, 0x00d7b983, 0x00d5b57f, 0x00d3b17b, 0x00d1ad77, 0x00cfa973,
                                          0x00cea56f, 0x00cca16b, 0x00c99d68, 0x00c79964, 0x00c59560, 0x00c2915c, 0x00c08c58, 0x00be8854,
                                          0x00bb8451, 0x00b97f4d, 0x00b77b49, 0x00b47645, 0x00b27243, 0x00b06d42, 0x00ad6840, 0x00ab633f, 
                                          0x00a95e3e, 0x00a6593c, 0x00a4553b, 0x00a24f39, 0x009f4a38, 0x009d4536, 0x009a4035, 0x00983b33,
                                          0x00961900, 0x00931600, 0x00911200, 0x008e0f00, 0x008b0c00, 0x00890900, 0x00860600, 0x00830200,
                                          0x00810000, 0x007e0000, 0x007b0000, 0x00780000, 0x00760000, 0x00700000, 0x006b0000, 0x00660000, 
                                          0x00600000, 0x005b0000, 0x00550000, 0x00500000, 0x004a0000, 0x00450000, 0x00400000, 0x003a0000,
                                          0x00320000, 0x002d0000,
};

static const PaletteConstFWD<sizeof(colors_superblue_b_16) / sizeof(unsigned int)> palette_superblue_b_16(colors_superblue_b_16);
static const PaletteConstBWD<sizeof(colors_superblue_b_16) / sizeof(unsigned int)> palette_superblue_b_16_inv(colors_superblue_b_16);

static const unsigned int colors_superblue_b_17[] = {
                                          0x007979ba, 0x007a7abc, 0x007b7bbe, 0x007d7cc0, 0x007e7ec2, 0x008081c3, 0x008185c4, 0x008288c4, 
                                          0x00838bc5, 0x00858dc6, 0x008690c7, 0x008793c8, 0x008996c9, 0x008a98ca, 0x008b9bcb, 0x008c9dcb, 
                                          0x008ea0cc, 0x008fa2cd, 0x0090a5ce, 0x0091a7cf, 0x0092aad0, 0x0094acd0, 0x0095aed1, 0x0096b0d2, 
                                          0x0097b3d3, 0x0098b5d4, 0x0099b7d4, 0x009ab9d5, 0x009bbbd6, 0x009dbed7, 0x009ec0d8, 0x009fc2d9, 
                                          0x00a0c4d9, 0x00a1c6da, 0x00a2c8db, 0x00a3cadc, 0x00a4ccdc, 0x00a5cedd, 0x00a6d0de, 0x00a7d1df, 
                                          0x00a8d3e0, 0x00a9d5e0, 0x00aad7e1, 0x00abd9e2, 0x00acdbe3, 0x00addde3, 0x00aedee4, 0x00afe0e5, 
                                          0x00b0e2e6, 0x00b1e4e6, 0x00b2e5e7, 0x00b3e7e8, 0x00b4e9e9, 0x00b7e9e9, 0x00baeaea, 0x00bdebeb, 
                                          0x00c0ecec, 0x00c2ecec, 0x00c5eded, 0x00c7eeee, 0x00caeeee, 0x00ccefef, 0x00cff0f0, 0x00d1f1f1, 
                                          0x00d4f1f1, 0x00d6f2f2, 0x00d9f3f3, 0x00dbf3f3, 0x00ddf4f4, 0x00e0f5f5, 0x00e2f6f6, 0x00e4f6f6, 
                                          0x00e6f7f7, 0x00e8f8f8, 0x00ebf8f8, 0x00edf9f9, 0x00effafa, 0x00f1fafa, 0x00f3fbfb, 0x00f5fcfc,  
  
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dbc08b, 0x00d9bc87, 0x00d7b983, 0x00d5b57f, 0x00d3b17b, 0x00d1ad77, 0x00cfa973,
                                          0x00cea56f, 0x00cca16b, 0x00c99d68, 0x00c79964, 0x00c59560, 0x00c2915c, 0x00c08c58, 0x00be8854,
                                          0x00bb8451, 0x00b97f4d, 0x00b77b49, 0x00b47645, 0x00b27243, 0x00b06d42, 0x00ad6840, 0x00ab633f,
                                          0x00a95e3e, 0x00a6593c, 0x00a4553b, 0x00a24f39, 0x009f4a38, 0x009d4536, 0x009a4035, 0x00983b33,
                                          0x00961900, 0x00931600, 0x00911200, 0x008e0f00, 0x008b0c00, 0x00890900, 0x00860600, 0x00830200,
                                          0x00810000, 0x007e0000, 0x007b0000, 0x00780000, 0x00760000, 0x00700000, 0x006b0000, 0x00660000, 
                                          0x00600000, 0x005b0000, 0x00550000, 0x00500000, 0x004a0000, 0x00450000, 0x00400000, 0x003a0000,
                                          0x00320000, 0x002d0000,
};


static const PaletteConstFWD<sizeof(colors_superblue_b_17) / sizeof(unsigned int)> palette_superblue_b_17(colors_superblue_b_17);
static const PaletteConstBWD<sizeof(colors_superblue_b_17) / sizeof(unsigned int)> palette_superblue_b_17_inv(colors_superblue_b_17);



static const unsigned int colors_superblue_c_1[] = {
                                          0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 
                                          0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 
                                          0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 
                                          0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 
                                          
                                          0x00ffffff, 0x00fffffB, 0x00fffff8, 0x00fffef3, 0x00fdfcef, 0x00fbfaeb, 0x00f9f8e9, 0x00f7f6e6, 
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dbc08b, 0x00d9bc87, 0x00d7b983, 0x00d5b57f, 0x00d3b17b, 0x00d1ad77, 0x00cfa973, 
                                          0x00cea56f, 0x00cca16b, 0x00c99d68, 0x00c79964, 0x00c59560, 0x00c2915c, 0x00c08c58, 0x00be8854,
                                          0x00bb8451, 0x00b97f4d, 0x00b77b49, 0x00b47645, 0x00b27243, 0x00b06d42, 0x00ad6840, 0x00ab633f,
                                          0x00a95e3e, 0x00a6593c, 0x00a4553b, 0x00a24f39, 0x009f4a38, 0x009d4536, 0x009a4035, 0x00983b33,
                                          0x00961900, 0x00931600, 0x00911200, 0x008e0f00, 0x008b0c00, 0x00890900, 0x00860600, 0x00830200, 
                                          0x00810000, 0x007e0000, 0x007b0000, 0x00780000, 0x00760000, 0x00700000, 0x006b0000, 0x00660000, 
                                          0x00600000, 0x005b0000, 0x00550000, 0x00500000, 0x004a0000, 0x00450000, 0x00400000, 0x003a0000,
                                          0x00320000, 0x002d0000,
};


static const PaletteConstFWD<sizeof(colors_superblue_c_1) / sizeof(unsigned int)> palette_superblue_c_1(colors_superblue_c_1);
static const PaletteConstBWD<sizeof(colors_superblue_c_1) / sizeof(unsigned int)> palette_superblue_c_1_inv(colors_superblue_c_1);


static const unsigned int colors_superblue_c_2[] = {
                                          0x00d6dea1, 0x00d3dea3, 0x00d1dea5, 0x00cfdea7, 
                                          0x00cddea9, 0x00ccdeab, 0x00cadfad, 0x00c9dfaf, 0x00c7dfb0, 0x00c6dfb2, 0x00c5dfb4, 0x00c5dfb6, 
                                          0x00c4dfb8, 0x00c3e0b9, 0x00c3e0bb, 0x00c3e0bd, 0x00c3e0bf, 0x00c3e1c0, 0x00c4e1c2, 0x00c4e1c4, 
                                          0x00c5e1c8, 0x00c7e2cb, 0x00c9e2cd, 0x00cae3d0, 0x00cce3d2, 0x00cde3d5, 0x00cfe4d7, 0x00d0e4d9, 
                                          0x00d2e4db, 0x00d3e5dd, 0x00d5e5de, 0x00d6e6e0, 0x00d8e6e1, 0x00d9e7e3, 0x00dbe7e4, 0x00dce8e5, 
                                          0x00dee8e7, 0x00dfe9e8, 0x00e0eae9, 0x00e2eaea, 0x00e3ebeb, 0x00e4ebec, 0x00e6eced, 0x00e7eded, 
                                          0x00e8edee, 0x00eaeeef, 0x00ebeff0, 0x00eceff1, 0x00edf0f1, 0x00eff1f2, 0x00f0f2f3, 0x00f1f2f3, 
  
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dbc08b, 0x00d9bc87, 0x00d7b983, 0x00d5b57f, 0x00d3b17b, 0x00d1ad77, 0x00cfa973, 
                                          0x00cea56f, 0x00cca16b, 0x00c99d68, 0x00c79964, 0x00c59560, 0x00c2915c, 0x00c08c58, 0x00be8854,
                                          0x00bb8451, 0x00b97f4d, 0x00b77b49, 0x00b47645, 0x00b27243, 0x00b06d42, 0x00ad6840, 0x00ab633f,
                                          0x00a95e3e, 0x00a6593c, 0x00a4553b, 0x00a24f39, 0x009f4a38, 0x009d4536, 0x009a4035, 0x00983b33,

                                          0x00961900, 0x00931600, 0x00911200, 0x008e0f00, 0x008b0c00, 0x00890900, 0x00860600, 0x00830200,
                                          0x00810000, 0x007e0000, 0x007b0000, 0x00780000, 0x00760000, 0x00700000, 
                                          0x006b0000, 0x00660000, 0x00600000, 0x005b0000, 0x00550000, 0x00500000, 0x004a0000, 0x00450000,
                                          0x00400000, 0x003a0000, 0x00320000, 0x002d0000,
};


static const PaletteConstFWD<sizeof(colors_superblue_c_2) / sizeof(unsigned int)> palette_superblue_c_2(colors_superblue_c_2);
static const PaletteConstBWD<sizeof(colors_superblue_c_2) / sizeof(unsigned int)> palette_superblue_c_2_inv(colors_superblue_c_2);


static const unsigned int colors_superblue_c_3[] = {
                                          0x00000096, 0x00000099, 0x0000009c, 0x0000009f, 
                                          0x000000a2, 0x000000a5, 0x000000a8, 0x000000ab, 0x000000ad, 0x000003b0, 0x000007b3, 0x00000bb6, 
                                          0x00000fb9, 0x000012bc, 0x000016bf, 0x00001ac2, 0x00001ec5, 0x000021c7, 0x000025ca, 0x000029cd, 
                                          0x00002dd0, 0x000031d3, 0x000034d6, 0x000038d9, 0x00003cdc, 0x000040de, 0x000043e1, 0x000047e4, 
                                          0x00004be7, 0x00004fea, 0x000052ed, 0x000056f0, 0x00005af3, 0x00005ef6, 0x000061f8, 0x000065fb, 
                                          0x000069fe, 0x00006dff, 0x000070ff, 0x000074ff, 0x000078ff, 0x00007cff, 0x000080ff, 0x000083ff, 
                                          0x000687ff, 0x000e8bff, 0x00168fff, 0x001e92ff, 0x002696ff, 0x002d9aff, 0x00359eff, 0x003da1ff, 
                                          0x0045a5ff, 0x004da9ff, 0x0055adff, 0x005cb0ff, 0x0064b4ff, 0x006cb8ff, 0x0074bcff, 0x007cc0ff, 
                                          0x0083c3ff, 0x008bc7ff, 0x0093cbff, 0x009bcfff, 0x00a3d2ff, 0x00abd6ff, 0x00b2daff, 0x00badeff, 
                                          0x00c2e1ff, 0x00cae5ff, 0x00d2e9ff, 0x00d9edff, 0x00e1f0ff, 0x00e9f4ff, 0x00f1f8ff, 0x00f9fcff, 
  
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dbc08b, 0x00d9bc87, 0x00d7b983, 0x00d5b57f, 0x00d3b17b, 0x00d1ad77, 0x00cfa973,
                                          0x00cea56f, 0x00cca16b, 0x00c99d68, 0x00c79964, 0x00c59560, 0x00c2915c, 0x00c08c58, 0x00be8854,
                                          0x00bb8451, 0x00b97f4d, 0x00b77b49, 0x00b47645, 0x00b27243, 0x00b06d42, 0x00ad6840, 0x00ab633f,
                                          0x00a95e3e, 0x00a6593c, 0x00a4553b, 0x00a24f39, 0x009f4a38, 0x009d4536, 0x009a4035, 0x00983b33,

                                          0x00961900, 0x00931600, 0x00911200, 0x008e0f00, 0x008b0c00, 0x00890900, 0x00860600, 0x00830200,
                                          0x00810000, 0x007e0000, 0x007b0000, 0x00780000, 0x00760000, 0x00700000, 0x006b0000, 0x00660000, 
                                          0x00600000, 0x005b0000, 0x00550000, 0x00500000, 0x004a0000, 0x00450000, 0x00400000, 0x003a0000,
                                          0x00320000, 0x002d0000,
};


static const PaletteConstFWD<sizeof(colors_superblue_c_3) / sizeof(unsigned int)> palette_superblue_c_3(colors_superblue_c_3);
static const PaletteConstBWD<sizeof(colors_superblue_c_3) / sizeof(unsigned int)> palette_superblue_c_3_inv(colors_superblue_c_3);


static const unsigned int colors_superblue_c_4[] = {
                                          0x00000099, 0x0000009f, 
                                          0x000000a5, 0x000000ab, 0x000003b0, 0x00000bb6, 0x000012bc, 0x00001ac2, 0x000021c7, 0x000029cd, 
                                          0x000031d3, 0x000038d9, 0x000040de, 0x000047e4, 0x00004fea, 0x000056f0, 0x00005ef6, 0x000065fb, 
                                          0x00006dff, 0x000074ff, 0x00007cff, 0x000083ff, 0x000e8bff, 0x001e92ff, 0x002d9aff, 0x003da1ff, 
                                          0x004da9ff, 0x005cb0ff, 0x006cb8ff, 0x007cc0ff, 0x008bc7ff, 0x009bcfff, 0x00abd6ff, 0x00badeff, 
                                          0x00cae5ff, 0x00d9edff, 0x00e9f4ff, 0x00f9fcff, 0x00f7fAf6, 0x00f7faef, 0x00f7fAeA, 0x00f7fae6, 
  
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dbc08b, 0x00d9bc87, 0x00d7b983, 0x00d5b57f, 0x00d3b17b, 0x00d1ad77, 0x00cfa973,
                                          0x00cea56f, 0x00cca16b, 0x00c99d68, 0x00c79964, 0x00c59560, 0x00c2915c, 0x00c08c58, 0x00be8854,
                                          0x00bb8451, 0x00b97f4d, 0x00b77b49, 0x00b47645, 0x00b27243, 0x00b06d42, 0x00ad6840, 0x00ab633f,
                                          0x00a95e3e, 0x00a6593c, 0x00a4553b, 0x00a24f39, 0x009f4a38, 0x009d4536, 0x009a4035, 0x00983b33,

                                          0x00961900, 0x00931600, 0x00911200, 0x008e0f00, 0x008b0c00, 0x00890900, 0x00860600, 0x00830200,
                                          0x00810000, 0x007e0000, 0x007b0000, 0x00780000, 0x00760000, 0x00700000, 0x006b0000, 0x00660000, 
                                          0x00600000, 0x005b0000, 0x00550000, 0x00500000, 0x004a0000, 0x00450000, 0x00400000, 0x003a0000,
                                          0x00320000, 0x002d0000,
};


static const PaletteConstFWD<sizeof(colors_superblue_c_4) / sizeof(unsigned int)> palette_superblue_c_4(colors_superblue_c_4);
static const PaletteConstBWD<sizeof(colors_superblue_c_4) / sizeof(unsigned int)> palette_superblue_c_4_inv(colors_superblue_c_4);


static const unsigned int colors_superblue_c_5[] = {
                                          0x00000099,  
                                          0x000000a5, 0x000003b0, 0x000012bc, 0x000021c7, 0x000031d3, 0x000040de, 0x00004fea, 0x00005ef6, 
                                          0x00006dff, 0x00007cff, 0x000e8bff, 0x002d9aff, 0x004da9ff, 0x006cb8ff, 0x008bc7ff, 0x00abd6ff, 
                                          0x00cae5ff, 0x00d9edff, 0x00e9f4ff, 0x00f9fcff, 0x00f7fAf6, 0x00f7faef, 0x00f7fAeA, 0x00f7fae6, 
  
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dbc08b, 0x00d9bc87, 0x00d7b983, 0x00d5b57f, 0x00d3b17b, 0x00d1ad77, 0x00cfa973, 
                                          0x00cea56f, 0x00cca16b, 0x00c99d68, 0x00c79964, 0x00c59560, 0x00c2915c, 0x00c08c58, 0x00be8854,
                                          0x00bb8451, 0x00b97f4d, 0x00b77b49, 0x00b47645, 0x00b27243, 0x00b06d42, 0x00ad6840, 0x00ab633f,
                                          0x00a95e3e, 0x00a6593c, 0x00a4553b, 0x00a24f39, 0x009f4a38, 0x009d4536, 0x009a4035, 0x00983b33,

                                          0x00961900, 0x00931600, 0x00911200, 0x008e0f00, 0x008b0c00, 0x00890900, 0x00860600, 0x00830200,
                                          0x00810000, 0x007e0000, 0x007b0000, 0x00780000, 0x00760000, 0x00700000, 0x006b0000, 0x00660000, 
                                          0x00600000, 0x005b0000, 0x00550000, 0x00500000, 0x004a0000, 0x00450000, 0x00400000, 0x003a0000,
                                          0x00320000, 0x002d0000,
};

static const PaletteConstFWD<sizeof(colors_superblue_c_5) / sizeof(unsigned int)> palette_superblue_c_5(colors_superblue_c_5);
static const PaletteConstBWD<sizeof(colors_superblue_c_5) / sizeof(unsigned int)> palette_superblue_c_5_inv(colors_superblue_c_5);


static const unsigned int colors_superblue_c_6[] = {
                                          0x002e966c, 0x002f9870, 0x002f9b74, 0x00309e78, 0x0031a07b, 0x0037a37f, 0x003ca683, 0x0042a886, 
                                          0x0048ab8a, 0x004eae8e, 0x0054b092, 0x005ab395, 0x005fb699, 0x0065b89d, 0x006bbba1, 0x0071bea4, 
                                          0x0077c0a8, 0x007dc3ac, 0x0082c6af, 0x0088c8b3, 0x008ecbb7, 0x0094cebb, 0x009ad0be, 0x00a0d3c2, 
                                          0x00a6d6c6, 0x00abd8c9, 0x00b1dbcd, 0x00b7ded1, 0x00bde0d5, 0x00c3e3d8, 0x00c9e6dc, 0x00cee8e0, 
                                          0x00d4ebe4, 0x00daeee7, 0x00e0f0eb, 0x00e6f3ef, 0x00eAf4eb, 0x00eff4e8, 0x00f2f4e4, 
  
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dbc08b, 0x00d9bc87, 0x00d7b983, 0x00d5b57f, 0x00d3b17b, 0x00d1ad77, 0x00cfa973,
                                          0x00cea56f, 0x00cca16b, 0x00c99d68, 0x00c79964, 0x00c59560, 0x00c2915c, 0x00c08c58, 0x00be8854,
                                          0x00bb8451, 0x00b97f4d, 0x00b77b49, 0x00b47645, 0x00b27243, 0x00b06d42, 0x00ad6840, 0x00ab633f,
                                          0x00a95e3e, 0x00a6593c, 0x00a4553b, 0x00a24f39, 0x009f4a38, 0x009d4536, 0x009a4035, 0x00983b33,

                                          0x00961900, 0x00931600, 0x00911200, 0x008e0f00, 0x008b0c00, 0x00890900, 0x00860600, 0x00830200,
                                          0x00810000, 0x007e0000, 0x007b0000, 0x00780000, 0x00760000, 0x00700000, 0x006b0000, 0x00660000,  
                                          0x00600000, 0x005b0000, 0x00550000, 0x00500000, 0x004a0000, 0x00450000, 0x00400000, 0x003a0000,
                                          0x00320000, 0x002d0000,
};


static const PaletteConstFWD<sizeof(colors_superblue_c_6) / sizeof(unsigned int)> palette_superblue_c_6(colors_superblue_c_6);
static const PaletteConstBWD<sizeof(colors_superblue_c_6) / sizeof(unsigned int)> palette_superblue_c_6_inv(colors_superblue_c_6);



static const unsigned int colors_superblue_c_7[] = {
                                          0x00266e3c, 0x0027733f, 0x00287844, 0x00297e4b, 0x002a8352, 0x002b885a, 0x002c8e61, 0x002e9369, 
                                          0x002f9870, 0x00309e78, 0x0037a37f, 0x0042a886, 0x004eae8e, 0x005ab395, 0x0065b89d, 0x0071bea4, 
                                          0x0077c0a8, 0x007dc3ac, 0x0082c6af, 0x0088c8b3, 0x008ecbb7, 0x0094cebb, 0x009ad0be, 0x00a0d3c2, 
                                          0x00a6d6c6, 0x00abd8c9, 0x00b1dbcd, 0x00b7ded1, 0x00bde0d5, 0x00c3e3d8, 0x00c9e6dc, 0x00cee8e0, 
                                          0x00d4ebe4, 0x00daeee7, 0x00e0f0eb, 0x00e6f3ef, 0x00eAf4eb, 0x00eff4e8, 0x00f2f4e4, 
  
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dbc08b, 0x00d9bc87, 0x00d7b983, 0x00d5b57f, 0x00d3b17b, 0x00d1ad77, 0x00cfa973,
                                          0x00cea56f, 0x00cca16b, 0x00c99d68, 0x00c79964, 0x00c59560, 0x00c2915c, 0x00c08c58, 0x00be8854,
                                          0x00bb8451, 0x00b97f4d, 0x00b77b49, 0x00b47645, 0x00b27243, 0x00b06d42, 0x00ad6840, 0x00ab633f,
                                          0x00a95e3e, 0x00a6593c, 0x00a4553b, 0x00a24f39, 0x009f4a38, 0x009d4536, 0x009a4035, 0x00983b33,

                                          0x00961900, 0x00931600, 0x00911200, 0x008e0f00, 0x008b0c00, 0x00890900, 0x00860600, 0x00830200,
                                          0x00810000, 0x007e0000, 0x007b0000, 0x00780000, 0x00760000, 0x00700000, 0x006b0000, 0x00660000, 
                                          0x00600000, 0x005b0000, 0x00550000, 0x00500000, 0x004a0000, 0x00450000, 0x00400000, 0x003a0000,
                                          0x00320000, 0x002d0000,
};

static const PaletteConstFWD<sizeof(colors_superblue_c_7) / sizeof(unsigned int)> palette_superblue_c_7(colors_superblue_c_7);
static const PaletteConstBWD<sizeof(colors_superblue_c_7) / sizeof(unsigned int)> palette_superblue_c_7_inv(colors_superblue_c_7);


static const unsigned int colors_superblue_c_8[] = {
                                          0x001e6caa, 0x002170ae, 0x002474b1, 0x002778b5, 0x00297cb8, 0x002c80bb, 0x002f84be, 0x003689c1, 
                                          0x003d8ec4, 0x004393c7, 0x004a98ca, 0x00519dcd, 0x0057a2d0, 0x005ea8d2, 0x0064add5, 0x006ab3d7, 
                                          0x0070b8da, 0x0076bddc, 0x007cc1de, 0x0082c5e0, 0x0088c8e3, 0x008dcbe5, 0x0093cee6, 0x0098d0e8, 
                                          0x009ed3ea, 0x00a3d6ec, 0x00a8d9ed, 0x00addcef, 0x00b2dff0, 0x00b7e2f2, 0x00bce4f3, 0x00c0e7f4, 
                                          0x00c5e9f6, 0x00caeaf6, 0x00ceebf6, 0x00d2ecf6, 0x00d7edf6, 0x00dbeef6, 0x00dfeff5, 0x00e3f0f5, 
                                          0x00e7f1f5, 0x00eaf2f5, 0x00eef3f5, 0x00f2f4f5, 0x00f5f5f4, 0x00f5f5f2, 0x00f4f4f0, 0x00f3f4ef, 
  
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dbc08b, 0x00d9bc87, 0x00d7b983, 0x00d5b57f, 0x00d3b17b, 0x00d1ad77, 0x00cfa973,
                                          0x00cea56f, 0x00cca16b, 0x00c99d68, 0x00c79964, 0x00c59560, 0x00c2915c, 0x00c08c58, 0x00be8854,
                                          0x00bb8451, 0x00b97f4d, 0x00b77b49, 0x00b47645, 0x00b27243, 0x00b06d42, 0x00ad6840, 0x00ab633f,
                                          0x00a95e3e, 0x00a6593c, 0x00a4553b, 0x00a24f39, 0x009f4a38, 0x009d4536, 0x009a4035, 0x00983b33,

                                          0x00961900, 0x00931600, 0x00911200, 0x008e0f00, 0x008b0c00, 0x00890900, 0x00860600, 0x00830200,
                                          0x00810000, 0x007e0000, 0x007b0000, 0x00780000, 0x00760000, 0x00700000, 0x006b0000, 0x00660000, 
                                          0x00600000, 0x005b0000, 0x00550000, 0x00500000, 0x004a0000, 0x00450000, 0x00400000, 0x003a0000,
                                          0x00320000, 0x002d0000,
};


static const PaletteConstFWD<sizeof(colors_superblue_c_8) / sizeof(unsigned int)> palette_superblue_c_8(colors_superblue_c_8);
static const PaletteConstBWD<sizeof(colors_superblue_c_8) / sizeof(unsigned int)> palette_superblue_c_8_inv(colors_superblue_c_8);

static const unsigned int colors_superblue_c_9[] = {
                                          0x0009487e, 0x000a4e87, 0x000b548f, 0x00115b97, 0x0016629f, 0x001c69a7, 0x002170ae, 0x002778b5, 
                                          0x002c80bb, 0x003689c1, 0x004393c7, 0x00519dcd, 0x0057a2d0, 0x005ea8d2, 0x0064add5, 0x006ab3d7, 
                                          0x0070b8da, 0x0076bddc, 0x007cc1de, 0x0082c5e0, 0x0088c8e3, 0x008dcbe5, 0x0093cee6, 0x0098d0e8, 
                                          0x009ed3ea, 0x00a3d6ec, 0x00a8d9ed, 0x00addcef, 0x00b2dff0, 0x00b7e2f2, 0x00bce4f3, 0x00c0e7f4, 
                                          0x00c5e9f6, 0x00caeaf6, 0x00ceebf6, 0x00d2ecf6, 0x00d7edf6, 0x00dbeef6, 0x00dfeff5, 0x00e3f0f5, 
                                          0x00e7f1f5, 0x00eaf2f5, 0x00eef3f5, 0x00f2f4f5, 0x00f5f5f4, 0x00f5f5f2, 0x00f4f4f0, 0x00f3f4ef, 
  
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dbc08b, 0x00d9bc87, 0x00d7b983, 0x00d5b57f, 0x00d3b17b, 0x00d1ad77, 0x00cfa973,
                                          0x00cea56f, 0x00cca16b, 0x00c99d68, 0x00c79964, 0x00c59560, 0x00c2915c, 0x00c08c58, 0x00be8854,
                                          0x00bb8451, 0x00b97f4d, 0x00b77b49, 0x00b47645, 0x00b27243, 0x00b06d42, 0x00ad6840, 0x00ab633f,
                                          0x00a95e3e, 0x00a6593c, 0x00a4553b, 0x00a24f39, 0x009f4a38, 0x009d4536, 0x009a4035, 0x00983b33,

                                          0x00961900, 0x00931600, 0x00911200, 0x008e0f00, 0x008b0c00, 0x00890900, 0x00860600, 0x00830200,
                                          0x00810000, 0x007e0000, 0x007b0000, 0x00780000, 0x00760000, 0x00700000, 0x006b0000, 0x00660000, 
                                          0x00600000, 0x005b0000, 0x00550000, 0x00500000, 0x004a0000, 0x00450000, 0x00400000, 0x003a0000,
                                          0x00320000, 0x002d0000,
};


static const PaletteConstFWD<sizeof(colors_superblue_c_9) / sizeof(unsigned int)> palette_superblue_c_9(colors_superblue_c_9);
static const PaletteConstBWD<sizeof(colors_superblue_c_9) / sizeof(unsigned int)> palette_superblue_c_9_inv(colors_superblue_c_9);



static const unsigned int colors_superblue_c_10[] = {
                                          0x00053458, 0x00063962, 0x00073d6c, 0x00084275, 
                                          0x0009487e, 0x000a4e87, 0x000b548f, 0x00115b97, 0x0016629f, 0x001c69a7, 0x002170ae, 0x002778b5, 
                                          0x002c80bb, 0x003689c1, 0x004393c7, 0x00519dcd, 0x0057a2d0, 0x005ea8d2, 0x0064add5, 0x006ab3d7, 
                                          0x0070b8da, 0x0076bddc, 0x007cc1de, 0x0082c5e0, 0x0088c8e3, 0x008dcbe5, 0x0093cee6, 0x0098d0e8, 
                                          0x009ed3ea, 0x00a3d6ec, 0x00a8d9ed, 0x00addcef, 0x00b2dff0, 0x00b7e2f2, 0x00bce4f3, 0x00c0e7f4, 
                                          0x00c5e9f6, 0x00caeaf6, 0x00ceebf6, 0x00d2ecf6, 0x00d7edf6, 0x00dbeef6, 0x00dfeff5, 0x00e3f0f5, 
                                          0x00e7f1f5, 0x00eaf2f5, 0x00eef3f5, 0x00f2f4f5, 0x00f5f5f4, 0x00f5f5f2, 0x00f4f4f0, 0x00f3f4ef, 
  
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dbc08b, 0x00d9bc87, 0x00d7b983, 0x00d5b57f, 0x00d3b17b, 0x00d1ad77, 0x00cfa973,
                                          0x00cea56f, 0x00cca16b, 0x00c99d68, 0x00c79964, 0x00c59560, 0x00c2915c, 0x00c08c58, 0x00be8854,
                                          0x00bb8451, 0x00b97f4d, 0x00b77b49, 0x00b47645, 0x00b27243, 0x00b06d42, 0x00ad6840, 0x00ab633f,
                                          0x00a95e3e, 0x00a6593c, 0x00a4553b, 0x00a24f39, 0x009f4a38, 0x009d4536, 0x009a4035, 0x00983b33,

                                          0x00961900, 0x00931600, 0x00911200, 0x008e0f00, 0x008b0c00, 0x00890900, 0x00860600, 0x00830200,
                                          0x00810000, 0x007e0000, 0x007b0000, 0x00780000, 0x00760000, 0x00700000, 0x006b0000, 0x00660000, 
                                          0x00600000, 0x005b0000, 0x00550000, 0x00500000, 0x004a0000, 0x00450000, 0x00400000, 0x003a0000,
                                          0x00320000, 0x002d0000, 
};


static const PaletteConstFWD<sizeof(colors_superblue_c_10) / sizeof(unsigned int)> palette_superblue_c_10(colors_superblue_c_10);
static const PaletteConstBWD<sizeof(colors_superblue_c_10) / sizeof(unsigned int)> palette_superblue_c_10_inv(colors_superblue_c_10);


static const unsigned int colors_superblue_c_11[] = {
                                          0x001d0ff7, 0x002111ed, 0x002513e2, 0x002915d8, 0x002d17ce, 
                                          0x003119c3, 0x00351bb9, 0x00391daf, 0x003d1fa4, 0x0041219a, 0x00452390, 0x00492585, 0x004d277b, 
                                          0x00512971, 0x00552b66, 0x00592d5c, 0x005d2f52, 0x00613147, 0x0065333d, 0x00693533, 0x006d3728, 
                                          0x0071391e, 0x00753b14, 0x00793d0a, 0x007d3f00, 0x00804141, 0x00844343, 0x00884545, 0x008c4747, 
                                          0x00904949, 0x00944b4b, 0x00984d4d, 0x009c4f4f, 0x00a05151, 0x00a45353, 0x00a85555, 0x00ac5757, 
                                          0x00b05959, 0x00b45b5b, 0x00b85d5d, 0x00bc5f5f, 0x00c06161, 0x00c46363, 0x00c86565, 0x00cc6767, 
                                          0x00d06969, 0x00d46b6b, 0x00d86d6d, 0x00dc6f6f, 0x00e07171, 0x00e47373, 0x00e87575, 0x00ec7777, 
                                          0x00f07979, 0x00f47b7b, 0x00f87d7d, 0x00fc7f7f, 0x00fd8181, 0x00f58383, 0x00ec8585, 0x00e48787, 
                                          0x00db8989, 0x00d38b8b, 0x00ca8d8d, 0x00c28f8f, 0x00ba9191, 0x00b19393, 0x00a99595, 0x00a09797, 
                                          0x00989999, 0x008f9b9b, 0x00879d9d, 0x007e9f9f, 0x0076a1a1, 0x006da3a3, 0x0065a5a5, 0x005ca7a7, 
                                          0x0054a9a9, 0x004babab, 0x0043adad, 0x003bafaf, 0x0032b1b1, 0x002ab3b3, 0x0021b5b5, 0x0019b7b7, 
                                          0x0010b9b9, 0x0008bbbb, 0x0000bdbd, 0x0008bfbf, 0x0010c1c1, 0x0017c3c3, 0x001fc5c5, 0x0026c7c7, 
                                          0x002ec9c9, 0x0036cbcb, 0x003dcdcd, 0x0045cfcf, 0x004cd1d1, 0x0054d3d3, 0x005bd5d5, 0x0063d7d7, 
                                          0x006bd9d9, 0x0072dbdb, 0x007adddd, 0x0081dfdf, 0x0089e1e1, 0x0091e3e3, 0x0098e5e5, 0x00a0e7e7, 
                                          0x00a7e9e9, 0x00afebeb, 0x00b6eded, 0x00beefef, 0x00c6f1f1, 0x00cdf3f3, 0x00d5f5f5, 0x00dcf7f7, 
                                          0x00e0f8f8, 0x00e4f9f9, 0x00e4f7f5, 0x00eff6eA, 0x00f2f5e6, 
  
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dbc08b, 0x00d9bc87, 0x00d7b983, 0x00d5b57f, 0x00d3b17b, 0x00d1ad77, 0x00cfa973,
                                          0x00cea56f, 0x00cca16b, 0x00c99d68, 0x00c79964, 0x00c59560, 0x00c2915c, 0x00c08c58, 0x00be8854,
                                          0x00bb8451, 0x00b97f4d, 0x00b77b49, 0x00b47645, 0x00b27243, 0x00b06d42, 0x00ad6840, 0x00ab633f,
                                          0x00a95e3e, 0x00a6593c, 0x00a4553b, 0x00a24f39, 0x009f4a38, 0x009d4536, 0x009a4035, 0x00983b33,

                                          0x00961900, 0x00931600, 0x00911200, 0x008e0f00, 0x008b0c00, 0x00890900, 0x00860600, 0x00830200,
                                          0x00810000, 0x007e0000, 0x007b0000, 0x00780000, 0x00760000, 0x00700000, 0x006b0000, 0x00660000, 
                                          0x00600000, 0x005b0000, 0x00550000, 0x00500000, 0x004a0000, 0x00450000, 0x00400000, 0x003a0000,
                                          0x00320000, 0x002d0000,
};


static const PaletteConstFWD<sizeof(colors_superblue_c_11) / sizeof(unsigned int)> palette_superblue_c_11(colors_superblue_c_11);
static const PaletteConstBWD<sizeof(colors_superblue_c_11) / sizeof(unsigned int)> palette_superblue_c_11_inv(colors_superblue_c_11);


static const unsigned int colors_superblue_c_12[] = {
                                          0x001109a2, 0x00150bc6, 0x00190dea, 0x001d0ff7, 0x002111ed, 0x002513e2, 0x002915d8, 0x002d17ce, 
                                          0x003119c3, 0x00351bb9, 0x00391daf, 0x003d1fa4, 0x0041219a, 0x00452390, 0x00492585, 0x004d277b, 
                                          0x00512971, 0x00552b66, 0x00592d5c, 0x005d2f52, 0x00613147, 0x0065333d, 0x00693533, 0x006d3728, 
                                          0x0071391e, 0x00753b14, 0x00793d0a, 0x007d3f00, 0x00804141, 0x00844343, 0x00884545, 0x008c4747, 
                                          0x00904949, 0x00944b4b, 0x00984d4d, 0x009c4f4f, 0x00a05151, 0x00a45353, 0x00a85555, 0x00ac5757, 
                                          0x00b05959, 0x00b45b5b, 0x00b85d5d, 0x00bc5f5f, 0x00c06161, 0x00c46363, 0x00c86565, 0x00cc6767, 
                                          0x00d06969, 0x00d46b6b, 0x00d86d6d, 0x00dc6f6f, 0x00e07171, 0x00e47373, 0x00e87575, 0x00ec7777, 
                                          0x00f07979, 0x00f47b7b, 0x00f87d7d, 0x00fc7f7f, 0x00fd8181, 0x00f58383, 0x00ec8585, 0x00e48787, 
                                          0x00db8989, 0x00d38b8b, 0x00ca8d8d, 0x00c28f8f, 0x00ba9191, 0x00b19393, 0x00a99595, 0x00a09797, 
                                          0x00989999, 0x008f9b9b, 0x00879d9d, 0x007e9f9f, 0x0076a1a1, 0x006da3a3, 0x0065a5a5, 0x005ca7a7, 
                                          0x0054a9a9, 0x004babab, 0x0043adad, 0x003bafaf, 0x0032b1b1, 0x002ab3b3, 0x0021b5b5, 0x0019b7b7, 
                                          0x0010b9b9, 0x0008bbbb, 0x0000bdbd, 0x0008bfbf, 0x0010c1c1, 0x0017c3c3, 0x001fc5c5, 0x0026c7c7, 
                                          0x002ec9c9, 0x0036cbcb, 0x003dcdcd, 0x0045cfcf, 0x004cd1d1, 0x0054d3d3, 0x005bd5d5, 0x0063d7d7, 
                                          0x006bd9d9, 0x0072dbdb, 0x007adddd, 0x0081dfdf, 0x0089e1e1, 0x0091e3e3, 0x0098e5e5, 0x00a0e7e7, 
                                          0x00a7e9e9, 0x00afebeb, 0x00b6eded, 0x00beefef, 0x00c6f1f1, 0x00cdf3f3, 0x00d5f5f5, 0x00dcf7f7, 
                                          0x00e0f8f8, 0x00e4f9f9, 0x00e4f7f5, 0x00eff6eA, 0x00f2f5e6, 
  
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dbc08b, 0x00d9bc87, 0x00d7b983, 0x00d5b57f, 0x00d3b17b, 0x00d1ad77, 0x00cfa973,
                                          0x00cea56f, 0x00cca16b, 0x00c99d68, 0x00c79964, 0x00c59560, 0x00c2915c, 0x00c08c58, 0x00be8854,
                                          0x00bb8451, 0x00b97f4d, 0x00b77b49, 0x00b47645, 0x00b27243, 0x00b06d42, 0x00ad6840, 0x00ab633f,
                                          0x00a95e3e, 0x00a6593c, 0x00a4553b, 0x00a24f39, 0x009f4a38, 0x009d4536, 0x009a4035, 0x00983b33,
  
                                          0x00961900, 0x00931600, 0x00911200, 0x008e0f00, 0x008b0c00, 0x00890900, 0x00860600, 0x00830200,
                                          0x00810000, 0x007e0000, 0x007b0000, 0x00780000, 0x00760000, 0x00700000, 0x006b0000, 0x00660000, 
                                          0x00600000, 0x005b0000, 0x00550000, 0x00500000, 0x004a0000, 0x00450000, 0x00400000, 0x003a0000,
                                          0x00320000, 0x002d0000,
};


static const PaletteConstFWD<sizeof(colors_superblue_c_12) / sizeof(unsigned int)> palette_superblue_c_12(colors_superblue_c_12);
static const PaletteConstBWD<sizeof(colors_superblue_c_12) / sizeof(unsigned int)> palette_superblue_c_12_inv(colors_superblue_c_12);


static const unsigned int colors_superblue_c_13[] = {
                                          0x002513e2, 0x002d17ce, 0x00351bb9, 0x003d1fa4, 
                                          0x00452390, 0x004d277b, 0x00552b66, 0x005d2f52, 0x0065333d, 0x006d3728, 0x00753b14, 0x007d3f00, 
                                          0x00844343, 0x008c4747, 0x00944b4b, 0x009c4f4f, 0x00a45353, 0x00ac5757, 0x00b45b5b, 0x00bc5f5f, 
                                          0x00c46363, 0x00cc6767, 0x00d46b6b, 0x00dc6f6f, 0x00e47373, 0x00ec7777, 0x00f47b7b, 0x00fc7f7f, 
                                          0x00f58383, 0x00e48787, 0x00d38b8b, 0x00c28f8f, 0x00b19393, 0x00a09797, 0x008f9b9b, 0x007e9f9f, 
                                          0x006da3a3, 0x005ca7a7, 0x004babab, 0x003bafaf, 0x002ab3b3, 0x0019b7b7, 0x0008bbbb, 0x0008bfbf, 
                                          0x0017c3c3, 0x0026c7c7, 0x0036cbcb, 0x0045cfcf, 0x0054d3d3, 0x0063d7d7, 0x0072dbdb, 0x0081dfdf, 
                                          0x0091e3e3, 0x00a0e7e7, 0x00afebeb, 0x00beefef, 0x00cdf3f3, 0x00dcf7f7, 0x00e0f8f8, 0x00e4f9f9, 
                                          0x00e4f7f5, 0x00eff6eA, 0x00f2f5e6, 
                                          
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dbc08b, 0x00d9bc87, 0x00d7b983, 0x00d5b57f, 0x00d3b17b, 0x00d1ad77, 0x00cfa973,
                                          0x00cea56f, 0x00cca16b, 0x00c99d68, 0x00c79964, 0x00c59560, 0x00c2915c, 0x00c08c58, 0x00be8854,
                                          0x00bb8451, 0x00b97f4d, 0x00b77b49, 0x00b47645, 0x00b27243, 0x00b06d42, 0x00ad6840, 0x00ab633f,
                                          0x00a95e3e, 0x00a6593c, 0x00a4553b, 0x00a24f39, 0x009f4a38, 0x009d4536, 0x009a4035, 0x00983b33,

                                          0x00961900, 0x00931600, 0x00911200, 0x008e0f00, 0x008b0c00, 0x00890900, 0x00860600, 0x00830200,
                                          0x00810000, 0x007e0000, 0x007b0000, 0x00780000, 0x00760000, 0x00700000, 0x006b0000, 0x00660000, 
                                          0x00600000, 0x005b0000, 0x00550000, 0x00500000, 0x004a0000, 0x00450000, 0x00400000, 0x003a0000,
                                          0x00320000, 0x002d0000,
};

static const PaletteConstFWD<sizeof(colors_superblue_c_13) / sizeof(unsigned int)> palette_superblue_c_13(colors_superblue_c_13);
static const PaletteConstBWD<sizeof(colors_superblue_c_13) / sizeof(unsigned int)> palette_superblue_c_13_inv(colors_superblue_c_13);


static const unsigned int colors_superblue_c_14[] = {
                                          0x007d7d7d, 0x00858585, 0x00919191, 0x00a1a1a1, 0x00aeaeae, 
                                          0x00b7b7b7, 0x00b9b9b9, 0x00b4b4b4, 0x00a9a9a9, 0x009b9b9b, 0x008f8f8f, 0x00888888, 0x00888888, 
                                          0x008e8e8e, 0x009b9b9b, 0x00aaaaaa, 0x00b8b8b8, 0x00c2c2c2, 0x00c4c4c4, 0x00bfbfbf, 0x00b5b5b5, 
                                          0x00a7a7a7, 0x009b9b9b, 0x00939393, 0x00929292, 0x00989898, 0x00a4a4a4, 0x00b4b4b4, 0x00c2c2c2, 
                                          0x00cccccc, 0x00cfcfcf, 0x00cbcbcb, 0x00c1c1c1, 0x00b4b4b4, 0x00a7a7a7, 0x009f9f9f, 0x009d9d9d, 
                                          0x00a2a2a2, 0x00aeaeae, 0x00bdbdbd, 0x00cccccc, 0x00d6d6d6, 0x00dadada, 0x00d7d7d7, 0x00cdcdcd, 
                                          0x00c0c0c0, 0x00b3b3b3, 0x00aaaaaa, 0x00a7a7a7, 0x00acacac, 0x00b8b8b8, 0x00c6c6c6, 0x00d5d5d5, 
                                          0x00e0e0e0, 0x00e5e5e5, 0x00e2e2e2, 0x00d9d9d9, 0x00cccccc, 0x00bfbfbf, 0x00b5b5b5, 0x00b2b2b2, 
                                          0x00b6b6b6, 0x00c1c1c1, 0x00d0d0d0, 0x00dfdfdf, 0x00eaeaea, 0x00f0f0f0, 0x00ededed, 0x00e5e5e5, 
                                          0x00d8d8d8, 0x00cbcbcb, 0x00c1c1c1, 0x00bdbdbd, 0x00c1c1c1, 0x00cbcbcb, 0x00d9d9d9, 0x00e8e8e8, 
                                          0x00f4f4f4, 0x00fafafa, 0x00f9f9f9, 0x00f1f1f1, 0x00e4e4e4, 0x00d7d7d7, 0x00cccccc, 0x00c8c8c8, 
                                          0x00cbcbcb, 0x00d5d5d5, 0x00e3e3e3, 0x00f2f2f2, 0x00fefefe, 0x00f9f9f9, 0x00fafafa, 0x00fdfdfd, 
                                          0x00f0f0f0, 0x00e3e3e3, 0x00d8d8d8, 0x00d3d3d3, 0x00d5d5d5, 0x00dedede, 0x00ececec, 0x00fbfbfb, 
                                          0x00f6f6f6, 0x00efefef, 0x00efefef, 0x00f6f6f6, 0x00fcfcfc, 0x00efefef, 0x00e4e4e4, 0x00dedede, 
                                          0x00dfdfdf, 0x00e8e8e8, 0x00f6f6f6, 0x00f9f9f9, 0x00ececec, 0x00e4e4e4, 0x00e3e3e3, 0x00eaeaea,
                                          
                                          
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dbc08b, 0x00d9bc87, 0x00d7b983, 0x00d5b57f, 0x00d3b17b, 0x00d1ad77, 0x00cfa973,
                                          0x00cea56f, 0x00cca16b, 0x00c99d68, 0x00c79964, 0x00c59560, 0x00c2915c, 0x00c08c58, 0x00be8854,
                                          0x00bb8451, 0x00b97f4d, 0x00b77b49, 0x00b47645, 0x00b27243, 0x00b06d42, 0x00ad6840, 0x00ab633f,
                                          0x00a95e3e, 0x00a6593c, 0x00a4553b, 0x00a24f39, 0x009f4a38, 0x009d4536, 0x009a4035, 0x00983b33, 

                                          0x00961900, 0x00931600, 0x00911200, 0x008e0f00, 0x008b0c00, 0x00890900, 0x00860600, 0x00830200, 
                                          0x00810000, 0x007e0000, 0x007b0000, 0x00780000, 0x00760000, 0x00700000, 0x006b0000, 0x00660000, 
                                          0x00600000, 0x005b0000, 0x00550000, 0x00500000, 0x004a0000, 0x00450000, 0x00400000, 0x003a0000,
                                          0x00320000, 0x002d0000,
};


static const PaletteConstFWD<sizeof(colors_superblue_c_14) / sizeof(unsigned int)> palette_superblue_c_14(colors_superblue_c_14);
static const PaletteConstBWD<sizeof(colors_superblue_c_14) / sizeof(unsigned int)> palette_superblue_c_14_inv(colors_superblue_c_14);


static const unsigned int colors_superblue_c_15[] = {
                                          0x009d9d9d, 
                                          0x00a2a2a2, 0x00aeaeae, 0x00bdbdbd, 0x00cccccc, 0x00d6d6d6, 0x00dadada, 0x00d7d7d7, 0x00cdcdcd, 
                                          0x00c0c0c0, 0x00b3b3b3, 0x00aaaaaa, 0x00a7a7a7, 0x00acacac, 0x00b8b8b8, 0x00c6c6c6, 0x00d5d5d5, 
                                          0x00e0e0e0, 0x00e5e5e5, 0x00e2e2e2, 0x00d9d9d9, 0x00cccccc, 0x00bfbfbf, 0x00b5b5b5, 0x00b2b2b2, 
                                          0x00b6b6b6, 0x00c1c1c1, 0x00d0d0d0, 0x00dfdfdf, 0x00eaeaea, 0x00f0f0f0, 0x00ededed, 0x00e5e5e5, 
                                          0x00d8d8d8, 0x00cbcbcb, 0x00c1c1c1, 0x00bdbdbd, 0x00c1c1c1, 0x00cbcbcb, 0x00d9d9d9, 0x00e8e8e8, 
                                          0x00f4f4f4, 0x00fafafa, 0x00f9f9f9, 0x00f1f1f1, 0x00e4e4e4, 0x00d7d7d7, 0x00cccccc, 0x00c8c8c8, 
                                          0x00cbcbcb, 0x00d5d5d5, 0x00e3e3e3, 0x00f2f2f2, 0x00fefefe, 0x00f9f9f9, 0x00fafafa, 0x00fdfdfd, 
                                          0x00f0f0f0, 0x00e3e3e3, 0x00d8d8d8, 0x00d3d3d3, 0x00d5d5d5, 0x00dedede, 0x00ececec, 0x00fbfbfb, 
                                          0x00f6f6f6, 0x00efefef, 0x00efefef, 0x00f6f6f6, 0x00fcfcfc, 0x00efefef, 0x00e4e4e4, 0x00dedede, 
                                          0x00dfdfdf, 0x00e8e8e8, 0x00f6f6f6, 0x00f9f9f9, 0x00ececec, 0x00e4e4e4, 0x00e3e3e3, 0x00eaeaea,
  
                                          0x00f5f4e2, 0x00f7f3e1, 0x00f8f3e0, 0x00f7f2de, 0x00f7f1dc, 0x00f6f0da, 0x00f6efd8, 0x00f5eed5,
                                          0x00f4edd3, 0x00f4ecd1, 0x00f3eacf, 0x00f3e9cd, 0x00f2e8cb, 0x00f1e7c8, 0x00f1e6c6, 0x00f0e5c4,
                                          0x00f0e4c2, 0x00efe3c0, 0x00eee2be, 0x00eee1bb, 0x00ede0b9, 0x00eddfb7, 0x00ecdeb5, 0x00ebddb3,
                                          0x00ebdcb1, 0x00eadbaf, 0x00eadaad, 0x00e9d8aa, 0x00e8d7a8, 0x00e7d6a6, 0x00e6d4a4, 0x00e5d3a2,
                                          0x00e4d1a0, 0x00e3cf9e, 0x00e2ce9c, 0x00e2cc9a, 0x00e1ca98, 0x00e0c996, 0x00dfc794, 0x00dec592,
                                          0x00ddc38f, 0x00dbc08b, 0x00d9bc87, 0x00d7b983, 0x00d5b57f, 0x00d3b17b, 0x00d1ad77, 0x00cfa973,
                                          0x00cea56f, 0x00cca16b, 0x00c99d68, 0x00c79964, 0x00c59560, 0x00c2915c, 0x00c08c58, 0x00be8854,
                                          0x00bb8451, 0x00b97f4d, 0x00b77b49, 0x00b47645, 0x00b27243, 0x00b06d42, 0x00ad6840, 0x00ab633f,
                                          0x00a95e3e, 0x00a6593c, 0x00a4553b, 0x00a24f39, 0x009f4a38, 0x009d4536, 0x009a4035, 0x00983b33,

                                          0x00961900, 0x00931600, 0x00911200, 0x008e0f00, 0x008b0c00, 0x00890900, 0x00860600, 0x00830200,
                                          0x00810000, 0x007e0000, 0x007b0000, 0x00780000, 0x00760000, 0x00700000, 0x006b0000, 0x00660000, 
                                          0x00600000, 0x005b0000, 0x00550000, 0x00500000, 0x004a0000, 0x00450000, 0x00400000, 0x003a0000,
                                          0x00320000, 0x002d0000,
};


static const PaletteConstFWD<sizeof(colors_superblue_c_15) / sizeof(unsigned int)> palette_superblue_c_15(colors_superblue_c_15);
static const PaletteConstBWD<sizeof(colors_superblue_c_15) / sizeof(unsigned int)> palette_superblue_c_15_inv(colors_superblue_c_15);



////////////////////////////////////////////////////////////////////////////////////////

const IPalette* const ppalettes_spec[] = {      &palette_spec_BlYeRd, &palette_spec_BlGnYe, &palette_spec_GnYe,
                                                &paletteWR_02, &paletteWR_03, &paletteWR_04, &paletteWR_05, &paletteWR_06, &paletteWR_07, &paletteWR_08, &paletteWR_09, 
                                                &paletteWG_02, &paletteWG_03, &paletteWG_04, &paletteWG_05, &paletteWG_06, &paletteWG_07, &paletteWG_08, &paletteWG_09, 
                                                &paletteWY_02, &paletteWY_03, &paletteWY_04, &paletteWY_05, &paletteWY_06, &paletteWY_07, &paletteWY_08, &paletteWY_09,
                                                &palette_superblue_a_1, &palette_superblue_a_2, &palette_superblue_a_3, &palette_superblue_a_4, &palette_superblue_a_5, 
                                                &palette_superblue_a_6, &palette_superblue_a_7, &palette_superblue_a_8, &palette_superblue_a_9, &palette_superblue_a_10, 
                                                &palette_superblue_a_11, &palette_superblue_a_12, &palette_superblue_a_13, &palette_superblue_a_14, &palette_superblue_a_15, 
                                                &palette_superblue_b_1,  &palette_superblue_b_2,  &palette_superblue_b_3, &palette_superblue_b_4, &palette_superblue_b_5, 
                                                &palette_superblue_b_6, &palette_superblue_b_7, &palette_superblue_b_8, &palette_superblue_b_9, &palette_superblue_b_10, 
                                                &palette_superblue_b_11, &palette_superblue_b_12, &palette_superblue_b_13, &palette_superblue_b_14, &palette_superblue_b_15, 
                                                &palette_superblue_b_16, &palette_superblue_b_17, &palette_superblue_c_1, &palette_superblue_c_2, &palette_superblue_c_3,  
                                                &palette_superblue_c_4, &palette_superblue_c_5, &palette_superblue_c_6, &palette_superblue_c_7, &palette_superblue_c_8, 
                                                &palette_superblue_c_9, &palette_superblue_c_10,  &palette_superblue_c_11, &palette_superblue_c_12, &palette_superblue_c_13, 
                                                &palette_superblue_c_14, &palette_superblue_c_15, 
                                             };

const IPalette* const ppalettes_spec_inv[] = { &palette_spec_BlYeRd_inv, &palette_spec_BlGnYe_inv, &palette_spec_GnYe_inv,
                                               &paletteWR_02_inv, &paletteWR_03_inv, &paletteWR_04_inv, &paletteWR_05_inv, &paletteWR_06_inv, &paletteWR_07_inv, &paletteWR_08_inv, &paletteWR_09_inv, 
                                               &paletteWG_02_inv, &paletteWG_03_inv, &paletteWG_04_inv, &paletteWG_05_inv, &paletteWG_06_inv, &paletteWG_07_inv, &paletteWG_08_inv, &paletteWG_09_inv, 
                                               &paletteWY_02_inv, &paletteWY_03_inv, &paletteWY_04_inv, &paletteWY_05_inv, &paletteWY_06_inv, &paletteWY_07_inv, &paletteWY_08_inv, &paletteWY_09_inv, 
                                               &palette_superblue_a_1_inv, &palette_superblue_a_2_inv, &palette_superblue_a_3_inv, &palette_superblue_a_4_inv, &palette_superblue_a_5_inv, 
                                               &palette_superblue_a_6_inv, &palette_superblue_a_7_inv, &palette_superblue_a_8_inv, &palette_superblue_a_9_inv, &palette_superblue_a_10_inv, 
                                               &palette_superblue_a_11_inv, &palette_superblue_a_12_inv, &palette_superblue_a_13_inv, &palette_superblue_a_14_inv, &palette_superblue_a_15_inv, 
                                               &palette_superblue_b_1_inv,  &palette_superblue_b_2_inv,  &palette_superblue_b_3_inv, &palette_superblue_b_4_inv, &palette_superblue_b_5_inv, 
                                               &palette_superblue_b_6_inv, &palette_superblue_b_7_inv, &palette_superblue_b_8_inv, &palette_superblue_b_9_inv, &palette_superblue_b_10_inv, 
                                               &palette_superblue_b_11_inv, &palette_superblue_b_12_inv, &palette_superblue_b_13_inv, &palette_superblue_b_14_inv, &palette_superblue_b_15_inv, 
                                               &palette_superblue_b_16_inv, &palette_superblue_b_17_inv, &palette_superblue_c_1_inv, &palette_superblue_c_2_inv, &palette_superblue_c_3_inv,  
                                               &palette_superblue_c_4_inv, &palette_superblue_c_5_inv, &palette_superblue_c_6_inv, &palette_superblue_c_7_inv, &palette_superblue_c_8_inv, 
                                               &palette_superblue_c_9_inv, &palette_superblue_c_10_inv,  &palette_superblue_c_11_inv, &palette_superblue_c_12_inv, &palette_superblue_c_13_inv, 
                                               &palette_superblue_c_14_inv, &palette_superblue_c_15_inv, 
                                             };
const char*     const ppalettenames_spec[] = { "spec_BlYeRd", "spec_BlGnYe", "spec_GnYe",
                                               "spec_WR_02", "spec_WR_03", "spec_WR_04", "spec_WR_05", "spec_WR_06", "spec_WR_07", "spec_WR_08", "spec_WR_09", 
                                               "spec_WG_02", "spec_WG_03", "spec_WG_04", "spec_WG_05", "spec_WG_06", "spec_WG_07", "spec_WG_08", "spec_WG_09", 
                                               "spec_WY_02", "spec_WY_03", "spec_WY_04", "spec_WY_05", "spec_WY_06", "spec_WY_07", "spec_WY_08", "spec_WY_09",
                                               "superblue_a_1", "superblue_a_2", "superblue_a_3", "superblue_a_4", "superblue_a_5", 
                                               "superblue_a_6", "superblue_a_7", "superblue_a_8", "superblue_a_9", "superblue_a_10", 
                                               "superblue_a_11", "superblue_a_12", "superblue_a_13", "superblue_a_14", "superblue_a_15", 
                                               "superblue_b_1",  "superblue_b_2",  "superblue_b_3", "superblue_b_4", "superblue_b_5", 
                                               "superblue_b_6", "superblue_b_7", "superblue_b_8", "superblue_b_9", "superblue_b_10", 
                                               "superblue_b_11", "superblue_b_12", "superblue_b_13", "superblue_b_14", "superblue_b_15", 
                                               "superblue_b_16", "superblue_b_17", "superblue_c_1", "superblue_c_2", "superblue_c_3",  
                                               "superblue_c_4", "superblue_c_5", "superblue_c_6", "superblue_c_7", "superblue_c_8", 
                                               "superblue_c_9", "superblue_c_10",  "superblue_c_11", "superblue_c_12", "superblue_c_13", 
                                               "superblue_c_14", "superblue_c_15", 
                                             };


const IPalette* const ppalettes_spec2[] = {     &palette_spec_BlYeRd, &palette_spec_BlGnYe, &palette_spec_GnYe,
                                                &paletteBR_02, &paletteBR_03, &paletteBR_04, &paletteBR_05, &paletteBR_06, &paletteBR_07, &paletteBR_08, &paletteBR_09, 
                                                &paletteBG_02, &paletteBG_03, &paletteBG_04, &paletteBG_05, &paletteBG_06, &paletteBG_07, &paletteBG_08, &paletteBG_09, 
                                                &paletteBY_02, &paletteBY_03, &paletteBY_04, &paletteBY_05, &paletteBY_06, &paletteBY_07, &paletteBY_08, &paletteBY_09,
                                                &palette_superblue_a_1, &palette_superblue_a_2, &palette_superblue_a_3, &palette_superblue_a_4, &palette_superblue_a_5, 
                                                &palette_superblue_a_6, &palette_superblue_a_7, &palette_superblue_a_8, &palette_superblue_a_9, &palette_superblue_a_10, 
                                                &palette_superblue_a_11, &palette_superblue_a_12, &palette_superblue_a_13, &palette_superblue_a_14, &palette_superblue_a_15, 
                                                &palette_superblue_b_1,  &palette_superblue_b_2,  &palette_superblue_b_3, &palette_superblue_b_4, &palette_superblue_b_5, 
                                                &palette_superblue_b_6, &palette_superblue_b_7, &palette_superblue_b_8, &palette_superblue_b_9, &palette_superblue_b_10, 
                                                &palette_superblue_b_11, &palette_superblue_b_12, &palette_superblue_b_13, &palette_superblue_b_14, &palette_superblue_b_15, 
                                                &palette_superblue_b_16, &palette_superblue_b_17, &palette_superblue_c_1, &palette_superblue_c_2, &palette_superblue_c_3,  
                                                &palette_superblue_c_4, &palette_superblue_c_5, &palette_superblue_c_6, &palette_superblue_c_7, &palette_superblue_c_8, 
                                                &palette_superblue_c_9, &palette_superblue_c_10,  &palette_superblue_c_11, &palette_superblue_c_12, &palette_superblue_c_13, 
                                                &palette_superblue_c_14, &palette_superblue_c_15, 
                                         };
const IPalette* const ppalettes_spec2_inv[] = { &palette_spec_BlYeRd_inv, &palette_spec_BlGnYe_inv, &palette_spec_GnYe_inv,
                                                &paletteBR_02_inv, &paletteBR_03_inv, &paletteBR_04_inv, &paletteBR_05_inv, &paletteBR_06_inv, &paletteBR_07_inv, &paletteBR_08_inv, &paletteBR_09_inv, 
                                                &paletteBG_02_inv, &paletteBG_03_inv, &paletteBG_04_inv, &paletteBG_05_inv, &paletteBG_06_inv, &paletteBG_07_inv, &paletteBG_08_inv, &paletteBG_09_inv, 
                                                &paletteBY_02_inv, &paletteBY_03_inv, &paletteBY_04_inv, &paletteBY_05_inv, &paletteBY_06_inv, &paletteBY_07_inv, &paletteBY_08_inv, &paletteBY_09_inv, 
                                                &palette_superblue_a_1_inv, &palette_superblue_a_2_inv, &palette_superblue_a_3_inv, &palette_superblue_a_4_inv, &palette_superblue_a_5_inv, 
                                                &palette_superblue_a_6_inv, &palette_superblue_a_7_inv, &palette_superblue_a_8_inv, &palette_superblue_a_9_inv, &palette_superblue_a_10_inv, 
                                                &palette_superblue_a_11_inv, &palette_superblue_a_12_inv, &palette_superblue_a_13_inv, &palette_superblue_a_14_inv, &palette_superblue_a_15_inv, 
                                                &palette_superblue_b_1_inv,  &palette_superblue_b_2_inv,  &palette_superblue_b_3_inv, &palette_superblue_b_4_inv, &palette_superblue_b_5_inv, 
                                                &palette_superblue_b_6_inv, &palette_superblue_b_7_inv, &palette_superblue_b_8_inv, &palette_superblue_b_9_inv, &palette_superblue_b_10_inv, 
                                                &palette_superblue_b_11_inv, &palette_superblue_b_12_inv, &palette_superblue_b_13_inv, &palette_superblue_b_14_inv, &palette_superblue_b_15_inv, 
                                                &palette_superblue_b_16_inv, &palette_superblue_b_17_inv, &palette_superblue_c_1_inv, &palette_superblue_c_2_inv, &palette_superblue_c_3_inv,  
                                                &palette_superblue_c_4_inv, &palette_superblue_c_5_inv, &palette_superblue_c_6_inv, &palette_superblue_c_7_inv, &palette_superblue_c_8_inv, 
                                                &palette_superblue_c_9_inv, &palette_superblue_c_10_inv,  &palette_superblue_c_11_inv, &palette_superblue_c_12_inv, &palette_superblue_c_13_inv, 
                                                &palette_superblue_c_14_inv, &palette_superblue_c_15_inv, 
                                             };
const char*     const ppalettenames_spec2[] = { "spec_BlYeRd", "spec_BlGnYe", "spec_GnYe",
                                                "spec_BR_02", "spec_BR_03", "spec_BR_04", "spec_BR_05", "spec_BR_06", "spec_BR_07", "spec_BR_08", "spec_BR_09", 
                                                "spec_BG_02", "spec_BG_03", "spec_BG_04", "spec_BG_05", "spec_BG_06", "spec_BG_07", "spec_BG_08", "spec_BG_09", 
                                                "spec_BY_02", "spec_BY_03", "spec_BY_04", "spec_BY_05", "spec_BY_06", "spec_BY_07", "spec_BY_08", "spec_BY_09", 
                                                "superblue_a_1", "superblue_a_2", "superblue_a_3", "superblue_a_4", "superblue_a_5", 
                                                "superblue_a_6", "superblue_a_7", "superblue_a_8", "superblue_a_9", "superblue_a_10", 
                                                "superblue_a_11", "superblue_a_12", "superblue_a_13", "superblue_a_14", "superblue_a_15", 
                                                "superblue_b_1",  "superblue_b_2",  "superblue_b_3", "superblue_b_4", "superblue_b_5", 
                                                "superblue_b_6", "superblue_b_7", "superblue_b_8", "superblue_b_9", "superblue_b_10", 
                                                "superblue_b_11", "superblue_b_12", "superblue_b_13", "superblue_b_14", "superblue_b_15", 
                                                "superblue_b_16", "superblue_b_17", "superblue_c_1", "superblue_c_2", "superblue_c_3",  
                                                "superblue_c_4", "superblue_c_5", "superblue_c_6", "superblue_c_7", "superblue_c_8", 
                                                "superblue_c_9", "superblue_c_10",  "superblue_c_11", "superblue_c_12", "superblue_c_13", 
                                                "superblue_c_14", "superblue_c_15", 
                                             };

#endif // PALETTES_SPEC_H
